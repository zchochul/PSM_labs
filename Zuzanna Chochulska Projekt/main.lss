
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fe8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  00000fe8  0000107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800150  00800150  0000116c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017fd  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b12  00000000  00000000  00002a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000721  00000000  00000000  00003553  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00003c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cd  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec9  00000000  00000000  00004555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000541e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_1>
   8:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_2>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_13>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	41 6c       	ori	r20, 0xC1	; 193
  56:	61 20       	and	r6, r1
  58:	6d 61       	ori	r22, 0x1D	; 29
  5a:	20 6b       	ori	r18, 0xB0	; 176
  5c:	6f 74       	andi	r22, 0x4F	; 79
  5e:	61 00       	.word	0x0061	; ????

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e6       	ldi	r26, 0x60	; 96
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	e8 ee       	ldi	r30, 0xE8	; 232
  74:	ff e0       	ldi	r31, 0x0F	; 15
  76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	a0 35       	cpi	r26, 0x50	; 80
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e5       	ldi	r26, 0x50	; 80
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	af 35       	cpi	r26, 0x5F	; 95
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 70 04 	call	0x8e0	; 0x8e0 <main>
  96:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <__vector_1>:
};


const char * tab[] = {"nd", "pn", "wt", "sr", "czw", "pt", "so"};

ISR(INT0_vect){
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	5f 93       	push	r21
  b0:	6f 93       	push	r22
  b2:	7f 93       	push	r23
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	//PORTB  ^= 0xff;
	rtc_get_date_time(&mydt);
  c4:	8e e6       	ldi	r24, 0x6E	; 110
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <rtc_get_date_time>
	lcd_set_xy(0,0);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 b6 02 	call	0x56c	; 0x56c <lcd_set_xy>
	fprintf(&lcd_stream, "%02d:%02d:%02d   %s", mydt.hour, mydt.min, mydt.sec, tab[mydt.weekday]);
  d4:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <mydt+0x5>
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e0 5a       	subi	r30, 0xA0	; 160
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	81 81       	ldd	r24, Z+1	; 0x01
  e4:	8f 93       	push	r24
  e6:	80 81       	ld	r24, Z
  e8:	8f 93       	push	r24
  ea:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <mydt+0x3>
  ee:	1f 92       	push	r1
  f0:	8f 93       	push	r24
  f2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <mydt+0x2>
  f6:	1f 92       	push	r1
  f8:	8f 93       	push	r24
  fa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <mydt+0x1>
  fe:	1f 92       	push	r1
 100:	8f 93       	push	r24
 102:	88 e9       	ldi	r24, 0x98	; 152
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	9f 93       	push	r25
 108:	8f 93       	push	r24
 10a:	ca e8       	ldi	r28, 0x8A	; 138
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	0e 94 ee 04 	call	0x9dc	; 0x9dc <fprintf>
	if(wybur ==0){
 116:	8d b7       	in	r24, 0x3d	; 61
 118:	9e b7       	in	r25, 0x3e	; 62
 11a:	0c 96       	adiw	r24, 0x0c	; 12
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	9e bf       	out	0x3e, r25	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	8d bf       	out	0x3d, r24	; 61
 126:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <wybur>
 12a:	81 11       	cpse	r24, r1
 12c:	1b c0       	rjmp	.+54     	; 0x164 <__vector_1+0xc6>
		lcd_set_xy(0,1);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	0e 94 b6 02 	call	0x56c	; 0x56c <lcd_set_xy>
		fprintf(&lcd_stream, "budzik: %02d:%02d ", mydt.ahour, mydt.amin);
 134:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <mydt+0x8>
 138:	1f 92       	push	r1
 13a:	8f 93       	push	r24
 13c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <mydt+0x9>
 140:	1f 92       	push	r1
 142:	8f 93       	push	r24
 144:	8c ea       	ldi	r24, 0xAC	; 172
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	9f 93       	push	r25
 14a:	8f 93       	push	r24
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	0e 94 ee 04 	call	0x9dc	; 0x9dc <fprintf>
 154:	8d b7       	in	r24, 0x3d	; 61
 156:	9e b7       	in	r25, 0x3e	; 62
 158:	08 96       	adiw	r24, 0x08	; 8
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	9e bf       	out	0x3e, r25	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	8d bf       	out	0x3d, r24	; 61
	}
	if(wybur == 1){
 164:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <wybur>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	c1 f4       	brne	.+48     	; 0x19c <__vector_1+0xfe>
		lcd_set_xy(0,1);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 b6 02 	call	0x56c	; 0x56c <lcd_set_xy>
		fprintf(&lcd_stream, "stoper: %02d ", mydt.timer);
 174:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <mydt+0xc>
 178:	1f 92       	push	r1
 17a:	8f 93       	push	r24
 17c:	8f eb       	ldi	r24, 0xBF	; 191
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	9f 93       	push	r25
 182:	8f 93       	push	r24
 184:	8a e8       	ldi	r24, 0x8A	; 138
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <fprintf>
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
	}
	//lcd_set_xy(0,1);
	//fprintf(&lcd_stream, "%02d/%02d/%02d", mydt.day, mydt.month, 2000+ mydt.year);
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_2>:

ISR(INT1_vect){ //alarm
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	PORTB = 0x00;
 1f0:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	83 ed       	ldi	r24, 0xD3	; 211
 1f6:	90 e3       	ldi	r25, 0x30	; 48
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <__vector_2+0x36>
 200:	00 c0       	rjmp	.+0      	; 0x202 <__vector_2+0x40>
 202:	00 00       	nop
	_delay_ms(1000);
	PORTB = 0xff;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	88 bb       	out	0x18, r24	; 24
	if(wybur==1){
 208:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <wybur>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	f9 f4       	brne	.+62     	; 0x24e <__vector_2+0x8c>
		mydt.timercon = 0;
 210:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <mydt+0xd>
		rtc_set_date_time(mydt);
 214:	c0 90 6e 00 	lds	r12, 0x006E	; 0x80006e <mydt>
 218:	d0 90 6f 00 	lds	r13, 0x006F	; 0x80006f <mydt+0x1>
 21c:	e0 90 70 00 	lds	r14, 0x0070	; 0x800070 <mydt+0x2>
 220:	f0 90 71 00 	lds	r15, 0x0071	; 0x800071 <mydt+0x3>
 224:	00 91 72 00 	lds	r16, 0x0072	; 0x800072 <mydt+0x4>
 228:	10 91 73 00 	lds	r17, 0x0073	; 0x800073 <mydt+0x5>
 22c:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <mydt+0x6>
 230:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <mydt+0x7>
 234:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <mydt+0x8>
 238:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <mydt+0x9>
 23c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <mydt+0xa>
 240:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <mydt+0xb>
 244:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <mydt+0xc>
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 0d 03 	call	0x61a	; 0x61a <rtc_set_date_time>
	}
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_13>:

ISR(USART_RXC_vect){
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	cf 92       	push	r12
 288:	df 92       	push	r13
 28a:	ef 92       	push	r14
 28c:	ff 92       	push	r15
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
	bufor[i] = UDR;
 2aa:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <i>
 2ae:	9c b1       	in	r25, 0x0c	; 12
 2b0:	e8 2f       	mov	r30, r24
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ec 5a       	subi	r30, 0xAC	; 172
 2b6:	fe 4f       	sbci	r31, 0xFE	; 254
 2b8:	90 83       	st	Z, r25
	if(bufor[i]=='\n'){
 2ba:	9a 30       	cpi	r25, 0x0A	; 10
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <__vector_13+0x44>
 2be:	bf c0       	rjmp	.+382    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		//alarm
		
		if(strncmp(bufor, "sah", 3) == 0)// takie same
 2c0:	43 e0       	ldi	r20, 0x03	; 3
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	6d ec       	ldi	r22, 0xCD	; 205
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	84 e5       	ldi	r24, 0x54	; 84
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <strncmp>
 2d0:	89 2b       	or	r24, r25
 2d2:	51 f5       	brne	.+84     	; 0x328 <__vector_13+0xac>
		{
			ustaw = atoi((const char*)(bufor+3));
 2d4:	87 e5       	ldi	r24, 0x57	; 87
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 ba 04 	call	0x974	; 0x974 <atoi>
 2dc:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
			mydt.ahour = ustaw;
 2e0:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <mydt+0x9>
			mydt.control2 = 0b00000010;
 2e4:	92 e0       	ldi	r25, 0x02	; 2
 2e6:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <mydt>
			rtc_set_date_time(mydt);
 2ea:	42 e0       	ldi	r20, 0x02	; 2
 2ec:	c4 2e       	mov	r12, r20
 2ee:	d0 90 6f 00 	lds	r13, 0x006F	; 0x80006f <mydt+0x1>
 2f2:	e0 90 70 00 	lds	r14, 0x0070	; 0x800070 <mydt+0x2>
 2f6:	f0 90 71 00 	lds	r15, 0x0071	; 0x800071 <mydt+0x3>
 2fa:	00 91 72 00 	lds	r16, 0x0072	; 0x800072 <mydt+0x4>
 2fe:	10 91 73 00 	lds	r17, 0x0073	; 0x800073 <mydt+0x5>
 302:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <mydt+0x6>
 306:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <mydt+0x7>
 30a:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <mydt+0x8>
 30e:	58 2f       	mov	r21, r24
 310:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <mydt+0xa>
 314:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <mydt+0xb>
 318:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <mydt+0xc>
 31c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <mydt+0xd>
 320:	0e 94 0d 03 	call	0x61a	; 0x61a <rtc_set_date_time>
			wybur =0;
 324:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <wybur>
		}
		if(strncmp(bufor, "sam", 3) == 0)// takie same
 328:	43 e0       	ldi	r20, 0x03	; 3
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	61 ed       	ldi	r22, 0xD1	; 209
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	84 e5       	ldi	r24, 0x54	; 84
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <strncmp>
 338:	89 2b       	or	r24, r25
 33a:	09 f0       	breq	.+2      	; 0x33e <__vector_13+0xc2>
 33c:	48 c0       	rjmp	.+144    	; 0x3ce <__vector_13+0x152>
		{
			ustaw = atoi((const char*)(bufor+3));
 33e:	87 e5       	ldi	r24, 0x57	; 87
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 ba 04 	call	0x974	; 0x974 <atoi>
 346:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
			mydt.control2 = 0b00000010;
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <mydt>
			mydt.amin = ustaw;
 350:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <mydt+0x8>
			rtc_set_date_time(mydt);
 354:	32 e0       	ldi	r19, 0x02	; 2
 356:	c3 2e       	mov	r12, r19
 358:	d0 90 6f 00 	lds	r13, 0x006F	; 0x80006f <mydt+0x1>
 35c:	e0 90 70 00 	lds	r14, 0x0070	; 0x800070 <mydt+0x2>
 360:	f0 90 71 00 	lds	r15, 0x0071	; 0x800071 <mydt+0x3>
 364:	00 91 72 00 	lds	r16, 0x0072	; 0x800072 <mydt+0x4>
 368:	10 91 73 00 	lds	r17, 0x0073	; 0x800073 <mydt+0x5>
 36c:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <mydt+0x6>
 370:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <mydt+0x7>
 374:	48 2f       	mov	r20, r24
 376:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <mydt+0x9>
 37a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <mydt+0xa>
 37e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <mydt+0xb>
 382:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <mydt+0xc>
 386:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <mydt+0xd>
 38a:	0e 94 0d 03 	call	0x61a	; 0x61a <rtc_set_date_time>
			lcd_set_xy(0,1);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 b6 02 	call	0x56c	; 0x56c <lcd_set_xy>
			fprintf(&lcd_stream, "godz: %02d:%02d ", mydt.ahour, mydt.amin);
 396:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <mydt+0x8>
 39a:	1f 92       	push	r1
 39c:	8f 93       	push	r24
 39e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <mydt+0x9>
 3a2:	1f 92       	push	r1
 3a4:	8f 93       	push	r24
 3a6:	85 ed       	ldi	r24, 0xD5	; 213
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	9f 93       	push	r25
 3ac:	8f 93       	push	r24
 3ae:	8a e8       	ldi	r24, 0x8A	; 138
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	9f 93       	push	r25
 3b4:	8f 93       	push	r24
 3b6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <fprintf>
			wybur =0;
 3ba:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <wybur>
 3be:	8d b7       	in	r24, 0x3d	; 61
 3c0:	9e b7       	in	r25, 0x3e	; 62
 3c2:	08 96       	adiw	r24, 0x08	; 8
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	9e bf       	out	0x3e, r25	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	8d bf       	out	0x3d, r24	; 61
		}
		//stoper
		if(strncmp(bufor, "st", 2) == 0){
 3ce:	42 e0       	ldi	r20, 0x02	; 2
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	66 ee       	ldi	r22, 0xE6	; 230
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	84 e5       	ldi	r24, 0x54	; 84
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <strncmp>
 3de:	89 2b       	or	r24, r25
 3e0:	59 f5       	brne	.+86     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			ustaw = atoi((const char*)(bufor+2));
 3e2:	86 e5       	ldi	r24, 0x56	; 86
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 ba 04 	call	0x974	; 0x974 <atoi>
 3ea:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
			mydt.control2 = 0b00010001;
 3ee:	91 e1       	ldi	r25, 0x11	; 17
 3f0:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <mydt>
			mydt.timercon = 0b10000010;
 3f4:	92 e8       	ldi	r25, 0x82	; 130
 3f6:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <mydt+0xd>
			mydt.timer = ustaw;
 3fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <mydt+0xc>
			rtc_set_date_time(mydt);
 3fe:	21 e1       	ldi	r18, 0x11	; 17
 400:	c2 2e       	mov	r12, r18
 402:	d0 90 6f 00 	lds	r13, 0x006F	; 0x80006f <mydt+0x1>
 406:	e0 90 70 00 	lds	r14, 0x0070	; 0x800070 <mydt+0x2>
 40a:	f0 90 71 00 	lds	r15, 0x0071	; 0x800071 <mydt+0x3>
 40e:	00 91 72 00 	lds	r16, 0x0072	; 0x800072 <mydt+0x4>
 412:	10 91 73 00 	lds	r17, 0x0073	; 0x800073 <mydt+0x5>
 416:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <mydt+0x6>
 41a:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <mydt+0x7>
 41e:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <mydt+0x8>
 422:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <mydt+0x9>
 426:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <mydt+0xa>
 42a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <mydt+0xb>
 42e:	0e 94 0d 03 	call	0x61a	; 0x61a <rtc_set_date_time>
			wybur =1;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <wybur>
		}
		
		i=0;
 438:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <i>
 43c:	03 c0       	rjmp	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	
	} else {
		i++;
 43e:	8f 5f       	subi	r24, 0xFF	; 255
 440:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <i>
	}
	
}
 444:	ff 91       	pop	r31
 446:	ef 91       	pop	r30
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	7f 91       	pop	r23
 452:	6f 91       	pop	r22
 454:	5f 91       	pop	r21
 456:	4f 91       	pop	r20
 458:	3f 91       	pop	r19
 45a:	2f 91       	pop	r18
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <lcd_write_instr>:
#include "lcd.h"

void lcd_write_instr(uint8_t data) //funkcja wysyłająca pojedynczą instrukcję do wyświetlacza↪→
{
	LCD_PORT &= ~(1<<LCD_RS); // zrobilismy zapis 
 472:	da 98       	cbi	0x1b, 2	; 27
	
	//wysylamy starsza
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 474:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
 476:	9b b3       	in	r25, 0x1b	; 27
 478:	28 2f       	mov	r18, r24
 47a:	20 7f       	andi	r18, 0xF0	; 240
 47c:	9f 70       	andi	r25, 0x0F	; 15
 47e:	92 2b       	or	r25, r18
 480:	9b bb       	out	0x1b, r25	; 27
 482:	ef e9       	ldi	r30, 0x9F	; 159
 484:	ff e0       	ldi	r31, 0x0F	; 15
 486:	31 97       	sbiw	r30, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <lcd_write_instr+0x14>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <lcd_write_instr+0x1a>
 48c:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 48e:	db 98       	cbi	0x1b, 3	; 27
 490:	ef e9       	ldi	r30, 0x9F	; 159
 492:	ff e0       	ldi	r31, 0x0F	; 15
 494:	31 97       	sbiw	r30, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <lcd_write_instr+0x22>
 498:	00 c0       	rjmp	.+0      	; 0x49a <lcd_write_instr+0x28>
 49a:	00 00       	nop
	_delay_ms(1);
	
	//wysylamy mlodsza
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 49c:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
 49e:	2b b3       	in	r18, 0x1b	; 27
 4a0:	f0 e1       	ldi	r31, 0x10	; 16
 4a2:	8f 9f       	mul	r24, r31
 4a4:	c0 01       	movw	r24, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	92 2f       	mov	r25, r18
 4aa:	9f 70       	andi	r25, 0x0F	; 15
 4ac:	89 2b       	or	r24, r25
 4ae:	8b bb       	out	0x1b, r24	; 27
 4b0:	8f e9       	ldi	r24, 0x9F	; 159
 4b2:	9f e0       	ldi	r25, 0x0F	; 15
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <lcd_write_instr+0x42>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <lcd_write_instr+0x48>
 4ba:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 4bc:	db 98       	cbi	0x1b, 3	; 27
 4be:	ef e9       	ldi	r30, 0x9F	; 159
 4c0:	ff e0       	ldi	r31, 0x0F	; 15
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_write_instr+0x50>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_write_instr+0x56>
 4c8:	00 00       	nop
 4ca:	08 95       	ret

000004cc <lcd_write_data>:
}


void lcd_write_data(uint8_t data) //funkcja wysyłająca pojedynczą daną do wyświetlacza↪→
{
	LCD_PORT |= (1<<LCD_RS); // ustawiamy 1 
 4cc:	da 9a       	sbi	0x1b, 2	; 27
	
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 4ce:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
 4d0:	9b b3       	in	r25, 0x1b	; 27
 4d2:	28 2f       	mov	r18, r24
 4d4:	20 7f       	andi	r18, 0xF0	; 240
 4d6:	9f 70       	andi	r25, 0x0F	; 15
 4d8:	92 2b       	or	r25, r18
 4da:	9b bb       	out	0x1b, r25	; 27
 4dc:	ef e9       	ldi	r30, 0x9F	; 159
 4de:	ff e0       	ldi	r31, 0x0F	; 15
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <lcd_write_data+0x14>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <lcd_write_data+0x1a>
 4e6:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 4e8:	db 98       	cbi	0x1b, 3	; 27
 4ea:	ef e9       	ldi	r30, 0x9F	; 159
 4ec:	ff e0       	ldi	r31, 0x0F	; 15
 4ee:	31 97       	sbiw	r30, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_write_data+0x22>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <lcd_write_data+0x28>
 4f4:	00 00       	nop
	_delay_ms(1);
	
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 4f6:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
 4f8:	2b b3       	in	r18, 0x1b	; 27
 4fa:	f0 e1       	ldi	r31, 0x10	; 16
 4fc:	8f 9f       	mul	r24, r31
 4fe:	c0 01       	movw	r24, r0
 500:	11 24       	eor	r1, r1
 502:	92 2f       	mov	r25, r18
 504:	9f 70       	andi	r25, 0x0F	; 15
 506:	89 2b       	or	r24, r25
 508:	8b bb       	out	0x1b, r24	; 27
 50a:	8f e9       	ldi	r24, 0x9F	; 159
 50c:	9f e0       	ldi	r25, 0x0F	; 15
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <lcd_write_data+0x42>
 512:	00 c0       	rjmp	.+0      	; 0x514 <lcd_write_data+0x48>
 514:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 516:	db 98       	cbi	0x1b, 3	; 27
 518:	ef e9       	ldi	r30, 0x9F	; 159
 51a:	ff e0       	ldi	r31, 0x0F	; 15
 51c:	31 97       	sbiw	r30, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <lcd_write_data+0x50>
 520:	00 c0       	rjmp	.+0      	; 0x522 <lcd_write_data+0x56>
 522:	00 00       	nop
 524:	08 95       	ret

00000526 <lcdinit>:
	_delay_ms(1);
}

void lcdinit(void) //inicjalizacja wyswietlacza
{	
	LCD_DDR = 0xff; //ca;y port wyjsciowy
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	8a bb       	out	0x1a, r24	; 26
 52a:	2f e7       	ldi	r18, 0x7F	; 127
 52c:	82 e3       	ldi	r24, 0x32	; 50
 52e:	92 e0       	ldi	r25, 0x02	; 2
 530:	21 50       	subi	r18, 0x01	; 1
 532:	80 40       	sbci	r24, 0x00	; 0
 534:	90 40       	sbci	r25, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <lcdinit+0xa>
 538:	00 c0       	rjmp	.+0      	; 0x53a <lcdinit+0x14>
 53a:	00 00       	nop
	_delay_ms(45);
	lcd_write_instr(0x33);
 53c:	83 e3       	ldi	r24, 0x33	; 51
 53e:	0e 94 39 02 	call	0x472	; 0x472 <lcd_write_instr>
	lcd_write_instr(0x32);
 542:	82 e3       	ldi	r24, 0x32	; 50
 544:	0e 94 39 02 	call	0x472	; 0x472 <lcd_write_instr>
	
	lcd_write_instr(0x28); //konfiguruje wyswietlacz
 548:	88 e2       	ldi	r24, 0x28	; 40
 54a:	0e 94 39 02 	call	0x472	; 0x472 <lcd_write_instr>
	lcd_write_instr(0x08);
 54e:	88 e0       	ldi	r24, 0x08	; 8
 550:	0e 94 39 02 	call	0x472	; 0x472 <lcd_write_instr>
	lcd_write_instr(0x01); //czysci
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 39 02 	call	0x472	; 0x472 <lcd_write_instr>
	lcd_write_instr(0x06);
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	0e 94 39 02 	call	0x472	; 0x472 <lcd_write_instr>
	lcd_write_instr(0x0f);
 560:	8f e0       	ldi	r24, 0x0F	; 15
 562:	0c 94 39 02 	jmp	0x472	; 0x472 <lcd_write_instr>

00000566 <lcd_clear>:
	
}

void lcd_clear(void)
{
	lcd_write_instr(0x01);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0c 94 39 02 	jmp	0x472	; 0x472 <lcd_write_instr>

0000056c <lcd_set_xy>:
}

void lcd_set_xy(uint8_t x, uint8_t y)
{
	lcd_write_instr(0x80 + x + y * 0x40);
 56c:	80 58       	subi	r24, 0x80	; 128
 56e:	90 e4       	ldi	r25, 0x40	; 64
 570:	69 9f       	mul	r22, r25
 572:	80 0d       	add	r24, r0
 574:	11 24       	eor	r1, r1
 576:	0c 94 39 02 	jmp	0x472	; 0x472 <lcd_write_instr>

0000057a <lcd_write_text_xy>:
}

void lcd_write_text_xy(uint8_t x, uint8_t y, char *text)
{
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	8a 01       	movw	r16, r20
	lcd_set_xy(x,y);
 584:	0e 94 b6 02 	call	0x56c	; 0x56c <lcd_set_xy>
 588:	e8 01       	movw	r28, r16
	while(*text){
 58a:	89 91       	ld	r24, Y+
 58c:	88 23       	and	r24, r24
 58e:	19 f0       	breq	.+6      	; 0x596 <lcd_write_text_xy+0x1c>
		lcd_write_data(*text);
 590:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_write_data>
 594:	fa cf       	rjmp	.-12     	; 0x58a <lcd_write_text_xy+0x10>
		text++;
	}
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <lcd_puts>:

int lcd_puts(char c, FILE *unused)
{
	lcd_write_data(c);
 5a0:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_write_data>
	return 0;
}
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	08 95       	ret

000005aa <blinking>:

void blinking(uint8_t t){
	if(t == 0 )
 5aa:	81 11       	cpse	r24, r1
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <blinking+0x8>
		lcd_write_instr(0b1100);
 5ae:	8c e0       	ldi	r24, 0x0C	; 12
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <blinking+0xe>
	if(t == 1)
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	19 f4       	brne	.+6      	; 0x5bc <blinking+0x12>
		lcd_write_instr(0b1111);
 5b6:	8f e0       	ldi	r24, 0x0F	; 15
 5b8:	0c 94 39 02 	jmp	0x472	; 0x472 <lcd_write_instr>
 5bc:	08 95       	ret

000005be <I2C_init>:
#include <avr/io.h> 
#include "i2c.h"

//procedura inicjalizujaca
void I2C_init(void){//ustawiamy predkosc transmisji
	TWBR = 72;
 5be:	88 e4       	ldi	r24, 0x48	; 72
 5c0:	80 b9       	out	0x00, r24	; 0
 5c2:	08 95       	ret

000005c4 <twistart>:
}

// procedura transmisji sygnału START
void twistart(void)
{
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 5c4:	84 ea       	ldi	r24, 0xA4	; 164
 5c6:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)));
 5c8:	06 b6       	in	r0, 0x36	; 54
 5ca:	07 fe       	sbrs	r0, 7
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <twistart+0x4>
}
 5ce:	08 95       	ret

000005d0 <twistop>:

// procedura transmisji sygnału STOP
void twistop(void)
{
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 5d0:	84 e9       	ldi	r24, 0x94	; 148
 5d2:	86 bf       	out	0x36, r24	; 54
while ((TWCR & (1<<TWSTO)));
 5d4:	06 b6       	in	r0, 0x36	; 54
 5d6:	04 fc       	sbrc	r0, 4
 5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <twistop+0x4>
}
 5da:	08 95       	ret

000005dc <twiwrite>:

// procedura transmisji bajtu danych
void twiwrite(uint8_t bajt)
{
TWDR = bajt;
 5dc:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);
 5de:	84 e8       	ldi	r24, 0x84	; 132
 5e0:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)));
 5e2:	06 b6       	in	r0, 0x36	; 54
 5e4:	07 fe       	sbrs	r0, 7
 5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <twiwrite+0x6>
}
 5e8:	08 95       	ret

000005ea <twiread>:
//procedura odczytu bajtu danych
uint8_t twiread(uint8_t ack)
{
TWCR = (1 << TWINT) | (1 << TWEN) | (ack << TWEA);
 5ea:	20 e4       	ldi	r18, 0x40	; 64
 5ec:	82 9f       	mul	r24, r18
 5ee:	c0 01       	movw	r24, r0
 5f0:	11 24       	eor	r1, r1
 5f2:	84 68       	ori	r24, 0x84	; 132
 5f4:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)));
 5f6:	06 b6       	in	r0, 0x36	; 54
 5f8:	07 fe       	sbrs	r0, 7
 5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <twiread+0xc>
return TWDR;
 5fc:	83 b1       	in	r24, 0x03	; 3
}
 5fe:	08 95       	ret

00000600 <rtc_init>:


//DO ZEGARKA
void rtc_init(void){
	twistart(); //bajt start
 600:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <twistart>
	twiwrite(0xA2); //adres slave zeby zapisac
 604:	82 ea       	ldi	r24, 0xA2	; 162
 606:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(0x0D);//adres komorki na ktorym chcemy wskaznik
 60a:	8d e0       	ldi	r24, 0x0D	; 13
 60c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(0b10000011); //na wyjsciu sygnal co sekunde
 610:	83 e8       	ldi	r24, 0x83	; 131
 612:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twistop();
 616:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <twistop>

0000061a <rtc_set_date_time>:
}
void rtc_set_date_time(struct datetime mydt){
 61a:	6f 92       	push	r6
 61c:	7f 92       	push	r7
 61e:	8f 92       	push	r8
 620:	9f 92       	push	r9
 622:	af 92       	push	r10
 624:	bf 92       	push	r11
 626:	cf 92       	push	r12
 628:	df 92       	push	r13
 62a:	ef 92       	push	r14
 62c:	ff 92       	push	r15
 62e:	0f 93       	push	r16
 630:	1f 93       	push	r17
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	2e 97       	sbiw	r28, 0x0e	; 14
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
 646:	c9 82       	std	Y+1, r12	; 0x01
 648:	8d 87       	std	Y+13, r24	; 0x0d
 64a:	9e 87       	std	Y+14, r25	; 0x0e
 64c:	61 2e       	mov	r6, r17
 64e:	72 2e       	mov	r7, r18
 650:	83 2e       	mov	r8, r19
 652:	94 2e       	mov	r9, r20
 654:	a5 2e       	mov	r10, r21
 656:	b6 2e       	mov	r11, r22
 658:	c7 2e       	mov	r12, r23
	twistart();
 65a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <twistart>
	twiwrite(0xA2); //zeby zapisac
 65e:	82 ea       	ldi	r24, 0xA2	; 162
 660:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(0x01); //wskaznik na control2  // <- alarm control
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(mydt.control2);
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	//twiwrite(0x02); //ustawiamy wskaznik na sekundy
	twiwrite(dec2bcd(mydt.sec)); //ustawiamy sekundy faktycznie
 670:	1a e0       	ldi	r17, 0x0A	; 10
 672:	8f 2d       	mov	r24, r15
 674:	61 2f       	mov	r22, r17
 676:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 67a:	20 e1       	ldi	r18, 0x10	; 16
 67c:	82 9f       	mul	r24, r18
 67e:	90 0d       	add	r25, r0
 680:	11 24       	eor	r1, r1
 682:	89 2f       	mov	r24, r25
 684:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(dec2bcd(mydt.min)); //ustawiamy sekundy minuty
 688:	8e 2d       	mov	r24, r14
 68a:	61 2f       	mov	r22, r17
 68c:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 690:	20 e1       	ldi	r18, 0x10	; 16
 692:	82 9f       	mul	r24, r18
 694:	90 0d       	add	r25, r0
 696:	11 24       	eor	r1, r1
 698:	89 2f       	mov	r24, r25
 69a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(dec2bcd(mydt.hour)); 
 69e:	8d 2d       	mov	r24, r13
 6a0:	61 2f       	mov	r22, r17
 6a2:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 6a6:	20 e1       	ldi	r18, 0x10	; 16
 6a8:	82 9f       	mul	r24, r18
 6aa:	90 0d       	add	r25, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	89 2f       	mov	r24, r25
 6b0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(dec2bcd(mydt.day));
 6b4:	80 2f       	mov	r24, r16
 6b6:	61 2f       	mov	r22, r17
 6b8:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 6bc:	20 e1       	ldi	r18, 0x10	; 16
 6be:	82 9f       	mul	r24, r18
 6c0:	90 0d       	add	r25, r0
 6c2:	11 24       	eor	r1, r1
 6c4:	89 2f       	mov	r24, r25
 6c6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(dec2bcd(mydt.weekday));
 6ca:	86 2d       	mov	r24, r6
 6cc:	61 2f       	mov	r22, r17
 6ce:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 6d2:	20 e1       	ldi	r18, 0x10	; 16
 6d4:	82 9f       	mul	r24, r18
 6d6:	90 0d       	add	r25, r0
 6d8:	11 24       	eor	r1, r1
 6da:	89 2f       	mov	r24, r25
 6dc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(dec2bcd(mydt.month));
 6e0:	87 2d       	mov	r24, r7
 6e2:	61 2f       	mov	r22, r17
 6e4:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 6e8:	20 e1       	ldi	r18, 0x10	; 16
 6ea:	82 9f       	mul	r24, r18
 6ec:	90 0d       	add	r25, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	89 2f       	mov	r24, r25
 6f2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(dec2bcd(mydt.year));
 6f6:	88 2d       	mov	r24, r8
 6f8:	61 2f       	mov	r22, r17
 6fa:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 6fe:	20 e1       	ldi	r18, 0x10	; 16
 700:	82 9f       	mul	r24, r18
 702:	90 0d       	add	r25, r0
 704:	11 24       	eor	r1, r1
 706:	89 2f       	mov	r24, r25
 708:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	// alarm moment
	twiwrite(dec2bcd(mydt.amin));
 70c:	89 2d       	mov	r24, r9
 70e:	61 2f       	mov	r22, r17
 710:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 714:	20 e1       	ldi	r18, 0x10	; 16
 716:	82 9f       	mul	r24, r18
 718:	90 0d       	add	r25, r0
 71a:	11 24       	eor	r1, r1
 71c:	89 2f       	mov	r24, r25
 71e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(dec2bcd(mydt.ahour));
 722:	8a 2d       	mov	r24, r10
 724:	61 2f       	mov	r22, r17
 726:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 72a:	20 e1       	ldi	r18, 0x10	; 16
 72c:	82 9f       	mul	r24, r18
 72e:	90 0d       	add	r25, r0
 730:	11 24       	eor	r1, r1
 732:	89 2f       	mov	r24, r25
 734:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(dec2bcd(mydt.aday));
 738:	8b 2d       	mov	r24, r11
 73a:	61 2f       	mov	r22, r17
 73c:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 740:	20 e1       	ldi	r18, 0x10	; 16
 742:	82 9f       	mul	r24, r18
 744:	90 0d       	add	r25, r0
 746:	11 24       	eor	r1, r1
 748:	89 2f       	mov	r24, r25
 74a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(dec2bcd(mydt.aweekday));
 74e:	8c 2d       	mov	r24, r12
 750:	61 2f       	mov	r22, r17
 752:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodqi4>
 756:	20 e1       	ldi	r18, 0x10	; 16
 758:	82 9f       	mul	r24, r18
 75a:	90 0d       	add	r25, r0
 75c:	11 24       	eor	r1, r1
 75e:	89 2f       	mov	r24, r25
 760:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	//stoper
	twistart();
 764:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <twistart>
	twiwrite(0xA2);
 768:	82 ea       	ldi	r24, 0xA2	; 162
 76a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(0x0E);
 76e:	8e e0       	ldi	r24, 0x0E	; 14
 770:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(mydt.timercon);
 774:	8e 85       	ldd	r24, Y+14	; 0x0e
 776:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(mydt.timer);
 77a:	8d 85       	ldd	r24, Y+13	; 0x0d
 77c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twistop();    
}
 780:	2e 96       	adiw	r28, 0x0e	; 14
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	f8 94       	cli
 786:	de bf       	out	0x3e, r29	; 62
 788:	0f be       	out	0x3f, r0	; 63
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
 79a:	cf 90       	pop	r12
 79c:	bf 90       	pop	r11
 79e:	af 90       	pop	r10
 7a0:	9f 90       	pop	r9
 7a2:	8f 90       	pop	r8
 7a4:	7f 90       	pop	r7
 7a6:	6f 90       	pop	r6
	twistart();
	twiwrite(0xA2);
	twiwrite(0x0E);
	twiwrite(mydt.timercon);
	twiwrite(mydt.timer);
	twistop();    
 7a8:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <twistop>

000007ac <rtc_get_date_time>:
}
void rtc_get_date_time(struct datetime* mydt){
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	ec 01       	movw	r28, r24
	twistart();
 7b2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <twistart>
	twiwrite(0xA2);
 7b6:	82 ea       	ldi	r24, 0xA2	; 162
 7b8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twiwrite(0x02);
 7bc:	82 e0       	ldi	r24, 0x02	; 2
 7be:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	twistart();
 7c2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <twistart>
	twiwrite(0xA3);
 7c6:	83 ea       	ldi	r24, 0xA3	; 163
 7c8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twiwrite>
	uint8_t x;
	x = twiread(1) & (0b01111111);
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	mydt->sec = bcd2dec(x);
 7d2:	98 2f       	mov	r25, r24
 7d4:	96 95       	lsr	r25
 7d6:	96 95       	lsr	r25
 7d8:	96 95       	lsr	r25
 7da:	9e 70       	andi	r25, 0x0E	; 14
 7dc:	29 2f       	mov	r18, r25
 7de:	22 0f       	add	r18, r18
 7e0:	22 0f       	add	r18, r18
 7e2:	92 0f       	add	r25, r18
 7e4:	8f 70       	andi	r24, 0x0F	; 15
 7e6:	89 0f       	add	r24, r25
 7e8:	8b 83       	std	Y+3, r24	; 0x03
	x = twiread(1) & (0b01111111);
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	mydt->min = bcd2dec(x);
 7f0:	98 2f       	mov	r25, r24
 7f2:	96 95       	lsr	r25
 7f4:	96 95       	lsr	r25
 7f6:	96 95       	lsr	r25
 7f8:	9e 70       	andi	r25, 0x0E	; 14
 7fa:	29 2f       	mov	r18, r25
 7fc:	22 0f       	add	r18, r18
 7fe:	22 0f       	add	r18, r18
 800:	92 0f       	add	r25, r18
 802:	8f 70       	andi	r24, 0x0F	; 15
 804:	89 0f       	add	r24, r25
 806:	8a 83       	std	Y+2, r24	; 0x02
	x = twiread(1) & (0b00111111);
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	mydt->hour = bcd2dec(x);
 80e:	98 2f       	mov	r25, r24
 810:	96 95       	lsr	r25
 812:	96 95       	lsr	r25
 814:	96 95       	lsr	r25
 816:	96 70       	andi	r25, 0x06	; 6
 818:	29 2f       	mov	r18, r25
 81a:	22 0f       	add	r18, r18
 81c:	22 0f       	add	r18, r18
 81e:	92 0f       	add	r25, r18
 820:	8f 70       	andi	r24, 0x0F	; 15
 822:	89 0f       	add	r24, r25
 824:	89 83       	std	Y+1, r24	; 0x01
	x = twiread(1) & (0b00111111);
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	mydt->day = bcd2dec(x);
 82c:	98 2f       	mov	r25, r24
 82e:	96 95       	lsr	r25
 830:	96 95       	lsr	r25
 832:	96 95       	lsr	r25
 834:	96 70       	andi	r25, 0x06	; 6
 836:	29 2f       	mov	r18, r25
 838:	22 0f       	add	r18, r18
 83a:	22 0f       	add	r18, r18
 83c:	92 0f       	add	r25, r18
 83e:	8f 70       	andi	r24, 0x0F	; 15
 840:	89 0f       	add	r24, r25
 842:	8c 83       	std	Y+4, r24	; 0x04
	x = twiread(1) & (0b00000111);
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	mydt->weekday = bcd2dec(x);
 84a:	87 70       	andi	r24, 0x07	; 7
 84c:	8d 83       	std	Y+5, r24	; 0x05
	x = twiread(1) & (0b00011111);
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	mydt->month = bcd2dec(x);
 854:	84 fb       	bst	r24, 4
 856:	99 27       	eor	r25, r25
 858:	90 f9       	bld	r25, 0
 85a:	99 0f       	add	r25, r25
 85c:	29 2f       	mov	r18, r25
 85e:	22 0f       	add	r18, r18
 860:	22 0f       	add	r18, r18
 862:	92 0f       	add	r25, r18
 864:	8f 70       	andi	r24, 0x0F	; 15
 866:	89 0f       	add	r24, r25
 868:	8e 83       	std	Y+6, r24	; 0x06
	x = twiread(1) & (0b11111111);
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	mydt->year = bcd2dec(x);
 870:	98 2f       	mov	r25, r24
 872:	92 95       	swap	r25
 874:	9f 70       	andi	r25, 0x0F	; 15
 876:	8f 70       	andi	r24, 0x0F	; 15
 878:	2a e0       	ldi	r18, 0x0A	; 10
 87a:	92 9f       	mul	r25, r18
 87c:	80 0d       	add	r24, r0
 87e:	11 24       	eor	r1, r1
 880:	8f 83       	std	Y+7, r24	; 0x07
	x = twiread(1);
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	x = twiread(1);
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	x = twiread(1);
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	x = twiread(1);
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	x = twiread(1);
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	x = twiread(1);
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	x = twiread(0) & (0b11111111);
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <twiread>
	mydt->timer = x;
 8ac:	8c 87       	std	Y+12, r24	; 0x0c
	twistop();
}
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
	x = twiread(1);
	x = twiread(1);
	x = twiread(1);
	x = twiread(0) & (0b11111111);
	mydt->timer = x;
	twistop();
 8b2:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <twistop>

000008b6 <USART_Init>:
#include "usart.h"
void USART_Init( unsigned int baud )
{
/* prę dkoś ć transmisji */
UBRRH = (unsigned char)(baud>>8);
 8b6:	90 bd       	out	0x20, r25	; 32
UBRRL = (unsigned char)baud;
 8b8:	89 b9       	out	0x09, r24	; 9
/* Format ramki: słowo=8bitów, 2 bity stopu */
UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 8ba:	8e e8       	ldi	r24, 0x8E	; 142
 8bc:	80 bd       	out	0x20, r24	; 32
/* Włą czenie odbiornika i nadajnika */
UCSRB = (1<<RXEN)|(1<<TXEN);
 8be:	88 e1       	ldi	r24, 0x18	; 24
 8c0:	8a b9       	out	0x0a, r24	; 10
/* Włą czenie przerwania, gdy przyszła dana */
UCSRB |= (1<<RXCIE);
 8c2:	57 9a       	sbi	0x0a, 7	; 10
 8c4:	08 95       	ret

000008c6 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
/* Czekaj, aż zwolni się bufor nadajnika */
while ( !( UCSRA & (1<<UDRE)) );
 8c6:	5d 9b       	sbis	0x0b, 5	; 11
 8c8:	fe cf       	rjmp	.-4      	; 0x8c6 <USART_Transmit>
/* Umieś ć daną w buforze i ją wyś lij */
UDR = data;
 8ca:	8c b9       	out	0x0c, r24	; 12
 8cc:	08 95       	ret

000008ce <USART_Receive>:

//Wysyłanie i odbiór danej (pooling)
unsigned char USART_Receive( void )
{
/* Czekaj, aż pojawi się dana do odbioru */
while ( !(UCSRA & (1<<RXC)) ) ;
 8ce:	5f 9b       	sbis	0x0b, 7	; 11
 8d0:	fe cf       	rjmp	.-4      	; 0x8ce <USART_Receive>
/* Odbierz daną */
return UDR;
 8d2:	8c b1       	in	r24, 0x0c	; 12

}
 8d4:	08 95       	ret

000008d6 <u_putc>:

int u_putc(char c, FILE *unused)
{
	USART_Transmit(c);
 8d6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <USART_Transmit>
	return 0;
}
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	08 95       	ret

000008e0 <main>:


int main(void){
	MCUCR |= (1<<ISC01)| (1<<ISC11);//narastajace zbocze, czyli raz na sekunde 
 8e0:	85 b7       	in	r24, 0x35	; 53
 8e2:	8a 60       	ori	r24, 0x0A	; 10
 8e4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0)|(1<<INT1);
 8e6:	8b b7       	in	r24, 0x3b	; 59
 8e8:	80 6c       	ori	r24, 0xC0	; 192
 8ea:	8b bf       	out	0x3b, r24	; 59
	
	
	//bzyczek alarmowy
	DDRB = 0xFF;
 8ec:	8f ef       	ldi	r24, 0xFF	; 255
 8ee:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;
 8f0:	88 bb       	out	0x18, r24	; 24
	
	//ekran
	lcdinit();
 8f2:	0e 94 93 02 	call	0x526	; 0x526 <lcdinit>
	blinking(0);
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <blinking>
	lcd_clear();
 8fc:	0e 94 b3 02 	call	0x566	; 0x566 <lcd_clear>
	
	//zegareczek
	I2C_init();
 900:	0e 94 df 02 	call	0x5be	; 0x5be <I2C_init>
	rtc_init();
 904:	0e 94 00 03 	call	0x600	; 0x600 <rtc_init>
	rtc_set_date_time(mydt);
 908:	c0 90 6e 00 	lds	r12, 0x006E	; 0x80006e <mydt>
 90c:	d0 90 6f 00 	lds	r13, 0x006F	; 0x80006f <mydt+0x1>
 910:	e0 90 70 00 	lds	r14, 0x0070	; 0x800070 <mydt+0x2>
 914:	f0 90 71 00 	lds	r15, 0x0071	; 0x800071 <mydt+0x3>
 918:	00 91 72 00 	lds	r16, 0x0072	; 0x800072 <mydt+0x4>
 91c:	10 91 73 00 	lds	r17, 0x0073	; 0x800073 <mydt+0x5>
 920:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <mydt+0x6>
 924:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <mydt+0x7>
 928:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <mydt+0x8>
 92c:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <mydt+0x9>
 930:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <mydt+0xa>
 934:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <mydt+0xb>
 938:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <mydt+0xc>
 93c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <mydt+0xd>
 940:	0e 94 0d 03 	call	0x61a	; 0x61a <rtc_set_date_time>
	
	//USART
	USART_Init(1); //500 000 baud
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <USART_Init>
	sei();
 94c:	78 94       	sei
	fprintf(&u_stream,"Jaki tryb wybierasz? Wpisz 0 jezeli chcesz ustawic budzik i 1 jezeli stoperek! \n");
 94e:	6c e7       	ldi	r22, 0x7C	; 124
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	89 ee       	ldi	r24, 0xE9	; 233
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 00 05 	call	0xa00	; 0xa00 <fputs>
 95a:	ff cf       	rjmp	.-2      	; 0x95a <main+0x7a>

0000095c <__udivmodqi4>:
 95c:	99 1b       	sub	r25, r25
 95e:	79 e0       	ldi	r23, 0x09	; 9
 960:	04 c0       	rjmp	.+8      	; 0x96a <__udivmodqi4_ep>

00000962 <__udivmodqi4_loop>:
 962:	99 1f       	adc	r25, r25
 964:	96 17       	cp	r25, r22
 966:	08 f0       	brcs	.+2      	; 0x96a <__udivmodqi4_ep>
 968:	96 1b       	sub	r25, r22

0000096a <__udivmodqi4_ep>:
 96a:	88 1f       	adc	r24, r24
 96c:	7a 95       	dec	r23
 96e:	c9 f7       	brne	.-14     	; 0x962 <__udivmodqi4_loop>
 970:	80 95       	com	r24
 972:	08 95       	ret

00000974 <atoi>:
 974:	fc 01       	movw	r30, r24
 976:	88 27       	eor	r24, r24
 978:	99 27       	eor	r25, r25
 97a:	e8 94       	clt
 97c:	21 91       	ld	r18, Z+
 97e:	20 32       	cpi	r18, 0x20	; 32
 980:	e9 f3       	breq	.-6      	; 0x97c <atoi+0x8>
 982:	29 30       	cpi	r18, 0x09	; 9
 984:	10 f0       	brcs	.+4      	; 0x98a <atoi+0x16>
 986:	2e 30       	cpi	r18, 0x0E	; 14
 988:	c8 f3       	brcs	.-14     	; 0x97c <atoi+0x8>
 98a:	2b 32       	cpi	r18, 0x2B	; 43
 98c:	41 f0       	breq	.+16     	; 0x99e <atoi+0x2a>
 98e:	2d 32       	cpi	r18, 0x2D	; 45
 990:	39 f4       	brne	.+14     	; 0x9a0 <atoi+0x2c>
 992:	68 94       	set
 994:	04 c0       	rjmp	.+8      	; 0x99e <atoi+0x2a>
 996:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__mulhi_const_10>
 99a:	82 0f       	add	r24, r18
 99c:	91 1d       	adc	r25, r1
 99e:	21 91       	ld	r18, Z+
 9a0:	20 53       	subi	r18, 0x30	; 48
 9a2:	2a 30       	cpi	r18, 0x0A	; 10
 9a4:	c0 f3       	brcs	.-16     	; 0x996 <atoi+0x22>
 9a6:	1e f4       	brtc	.+6      	; 0x9ae <atoi+0x3a>
 9a8:	90 95       	com	r25
 9aa:	81 95       	neg	r24
 9ac:	9f 4f       	sbci	r25, 0xFF	; 255
 9ae:	08 95       	ret

000009b0 <strncmp>:
 9b0:	fb 01       	movw	r30, r22
 9b2:	dc 01       	movw	r26, r24
 9b4:	41 50       	subi	r20, 0x01	; 1
 9b6:	50 40       	sbci	r21, 0x00	; 0
 9b8:	30 f0       	brcs	.+12     	; 0x9c6 <strncmp+0x16>
 9ba:	8d 91       	ld	r24, X+
 9bc:	01 90       	ld	r0, Z+
 9be:	80 19       	sub	r24, r0
 9c0:	19 f4       	brne	.+6      	; 0x9c8 <strncmp+0x18>
 9c2:	00 20       	and	r0, r0
 9c4:	b9 f7       	brne	.-18     	; 0x9b4 <strncmp+0x4>
 9c6:	88 1b       	sub	r24, r24
 9c8:	99 0b       	sbc	r25, r25
 9ca:	08 95       	ret

000009cc <__mulhi_const_10>:
 9cc:	7a e0       	ldi	r23, 0x0A	; 10
 9ce:	97 9f       	mul	r25, r23
 9d0:	90 2d       	mov	r25, r0
 9d2:	87 9f       	mul	r24, r23
 9d4:	80 2d       	mov	r24, r0
 9d6:	91 0d       	add	r25, r1
 9d8:	11 24       	eor	r1, r1
 9da:	08 95       	ret

000009dc <fprintf>:
 9dc:	a0 e0       	ldi	r26, 0x00	; 0
 9de:	b0 e0       	ldi	r27, 0x00	; 0
 9e0:	e4 ef       	ldi	r30, 0xF4	; 244
 9e2:	f4 e0       	ldi	r31, 0x04	; 4
 9e4:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__prologue_saves__+0x20>
 9e8:	ae 01       	movw	r20, r28
 9ea:	47 5f       	subi	r20, 0xF7	; 247
 9ec:	5f 4f       	sbci	r21, 0xFF	; 255
 9ee:	6f 81       	ldd	r22, Y+7	; 0x07
 9f0:	78 85       	ldd	r23, Y+8	; 0x08
 9f2:	8d 81       	ldd	r24, Y+5	; 0x05
 9f4:	9e 81       	ldd	r25, Y+6	; 0x06
 9f6:	0e 94 2a 05 	call	0xa54	; 0xa54 <vfprintf>
 9fa:	e2 e0       	ldi	r30, 0x02	; 2
 9fc:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__epilogue_restores__+0x20>

00000a00 <fputs>:
 a00:	ef 92       	push	r14
 a02:	ff 92       	push	r15
 a04:	0f 93       	push	r16
 a06:	1f 93       	push	r17
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	db 01       	movw	r26, r22
 a0e:	13 96       	adiw	r26, 0x03	; 3
 a10:	2c 91       	ld	r18, X
 a12:	21 ff       	sbrs	r18, 1
 a14:	18 c0       	rjmp	.+48     	; 0xa46 <fputs+0x46>
 a16:	8b 01       	movw	r16, r22
 a18:	7c 01       	movw	r14, r24
 a1a:	d0 e0       	ldi	r29, 0x00	; 0
 a1c:	c0 e0       	ldi	r28, 0x00	; 0
 a1e:	f7 01       	movw	r30, r14
 a20:	81 91       	ld	r24, Z+
 a22:	7f 01       	movw	r14, r30
 a24:	88 23       	and	r24, r24
 a26:	61 f0       	breq	.+24     	; 0xa40 <fputs+0x40>
 a28:	d8 01       	movw	r26, r16
 a2a:	18 96       	adiw	r26, 0x08	; 8
 a2c:	ed 91       	ld	r30, X+
 a2e:	fc 91       	ld	r31, X
 a30:	19 97       	sbiw	r26, 0x09	; 9
 a32:	b8 01       	movw	r22, r16
 a34:	09 95       	icall
 a36:	89 2b       	or	r24, r25
 a38:	91 f3       	breq	.-28     	; 0xa1e <fputs+0x1e>
 a3a:	df ef       	ldi	r29, 0xFF	; 255
 a3c:	cf ef       	ldi	r28, 0xFF	; 255
 a3e:	ef cf       	rjmp	.-34     	; 0xa1e <fputs+0x1e>
 a40:	8d 2f       	mov	r24, r29
 a42:	9c 2f       	mov	r25, r28
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <fputs+0x4a>
 a46:	8f ef       	ldi	r24, 0xFF	; 255
 a48:	9f ef       	ldi	r25, 0xFF	; 255
 a4a:	cd b7       	in	r28, 0x3d	; 61
 a4c:	de b7       	in	r29, 0x3e	; 62
 a4e:	e6 e0       	ldi	r30, 0x06	; 6
 a50:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__epilogue_restores__+0x18>

00000a54 <vfprintf>:
 a54:	ab e0       	ldi	r26, 0x0B	; 11
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	e0 e3       	ldi	r30, 0x30	; 48
 a5a:	f5 e0       	ldi	r31, 0x05	; 5
 a5c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__prologue_saves__>
 a60:	6c 01       	movw	r12, r24
 a62:	7b 01       	movw	r14, r22
 a64:	8a 01       	movw	r16, r20
 a66:	fc 01       	movw	r30, r24
 a68:	17 82       	std	Z+7, r1	; 0x07
 a6a:	16 82       	std	Z+6, r1	; 0x06
 a6c:	83 81       	ldd	r24, Z+3	; 0x03
 a6e:	81 ff       	sbrs	r24, 1
 a70:	cc c1       	rjmp	.+920    	; 0xe0a <vfprintf+0x3b6>
 a72:	ce 01       	movw	r24, r28
 a74:	01 96       	adiw	r24, 0x01	; 1
 a76:	3c 01       	movw	r6, r24
 a78:	f6 01       	movw	r30, r12
 a7a:	93 81       	ldd	r25, Z+3	; 0x03
 a7c:	f7 01       	movw	r30, r14
 a7e:	93 fd       	sbrc	r25, 3
 a80:	85 91       	lpm	r24, Z+
 a82:	93 ff       	sbrs	r25, 3
 a84:	81 91       	ld	r24, Z+
 a86:	7f 01       	movw	r14, r30
 a88:	88 23       	and	r24, r24
 a8a:	09 f4       	brne	.+2      	; 0xa8e <vfprintf+0x3a>
 a8c:	ba c1       	rjmp	.+884    	; 0xe02 <vfprintf+0x3ae>
 a8e:	85 32       	cpi	r24, 0x25	; 37
 a90:	39 f4       	brne	.+14     	; 0xaa0 <vfprintf+0x4c>
 a92:	93 fd       	sbrc	r25, 3
 a94:	85 91       	lpm	r24, Z+
 a96:	93 ff       	sbrs	r25, 3
 a98:	81 91       	ld	r24, Z+
 a9a:	7f 01       	movw	r14, r30
 a9c:	85 32       	cpi	r24, 0x25	; 37
 a9e:	29 f4       	brne	.+10     	; 0xaaa <vfprintf+0x56>
 aa0:	b6 01       	movw	r22, r12
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 21 07 	call	0xe42	; 0xe42 <fputc>
 aa8:	e7 cf       	rjmp	.-50     	; 0xa78 <vfprintf+0x24>
 aaa:	91 2c       	mov	r9, r1
 aac:	21 2c       	mov	r2, r1
 aae:	31 2c       	mov	r3, r1
 ab0:	ff e1       	ldi	r31, 0x1F	; 31
 ab2:	f3 15       	cp	r31, r3
 ab4:	d8 f0       	brcs	.+54     	; 0xaec <vfprintf+0x98>
 ab6:	8b 32       	cpi	r24, 0x2B	; 43
 ab8:	79 f0       	breq	.+30     	; 0xad8 <vfprintf+0x84>
 aba:	38 f4       	brcc	.+14     	; 0xaca <vfprintf+0x76>
 abc:	80 32       	cpi	r24, 0x20	; 32
 abe:	79 f0       	breq	.+30     	; 0xade <vfprintf+0x8a>
 ac0:	83 32       	cpi	r24, 0x23	; 35
 ac2:	a1 f4       	brne	.+40     	; 0xaec <vfprintf+0x98>
 ac4:	23 2d       	mov	r18, r3
 ac6:	20 61       	ori	r18, 0x10	; 16
 ac8:	1d c0       	rjmp	.+58     	; 0xb04 <vfprintf+0xb0>
 aca:	8d 32       	cpi	r24, 0x2D	; 45
 acc:	61 f0       	breq	.+24     	; 0xae6 <vfprintf+0x92>
 ace:	80 33       	cpi	r24, 0x30	; 48
 ad0:	69 f4       	brne	.+26     	; 0xaec <vfprintf+0x98>
 ad2:	23 2d       	mov	r18, r3
 ad4:	21 60       	ori	r18, 0x01	; 1
 ad6:	16 c0       	rjmp	.+44     	; 0xb04 <vfprintf+0xb0>
 ad8:	83 2d       	mov	r24, r3
 ada:	82 60       	ori	r24, 0x02	; 2
 adc:	38 2e       	mov	r3, r24
 ade:	e3 2d       	mov	r30, r3
 ae0:	e4 60       	ori	r30, 0x04	; 4
 ae2:	3e 2e       	mov	r3, r30
 ae4:	2a c0       	rjmp	.+84     	; 0xb3a <vfprintf+0xe6>
 ae6:	f3 2d       	mov	r31, r3
 ae8:	f8 60       	ori	r31, 0x08	; 8
 aea:	1d c0       	rjmp	.+58     	; 0xb26 <vfprintf+0xd2>
 aec:	37 fc       	sbrc	r3, 7
 aee:	2d c0       	rjmp	.+90     	; 0xb4a <vfprintf+0xf6>
 af0:	20 ed       	ldi	r18, 0xD0	; 208
 af2:	28 0f       	add	r18, r24
 af4:	2a 30       	cpi	r18, 0x0A	; 10
 af6:	40 f0       	brcs	.+16     	; 0xb08 <vfprintf+0xb4>
 af8:	8e 32       	cpi	r24, 0x2E	; 46
 afa:	b9 f4       	brne	.+46     	; 0xb2a <vfprintf+0xd6>
 afc:	36 fc       	sbrc	r3, 6
 afe:	81 c1       	rjmp	.+770    	; 0xe02 <vfprintf+0x3ae>
 b00:	23 2d       	mov	r18, r3
 b02:	20 64       	ori	r18, 0x40	; 64
 b04:	32 2e       	mov	r3, r18
 b06:	19 c0       	rjmp	.+50     	; 0xb3a <vfprintf+0xe6>
 b08:	36 fe       	sbrs	r3, 6
 b0a:	06 c0       	rjmp	.+12     	; 0xb18 <vfprintf+0xc4>
 b0c:	8a e0       	ldi	r24, 0x0A	; 10
 b0e:	98 9e       	mul	r9, r24
 b10:	20 0d       	add	r18, r0
 b12:	11 24       	eor	r1, r1
 b14:	92 2e       	mov	r9, r18
 b16:	11 c0       	rjmp	.+34     	; 0xb3a <vfprintf+0xe6>
 b18:	ea e0       	ldi	r30, 0x0A	; 10
 b1a:	2e 9e       	mul	r2, r30
 b1c:	20 0d       	add	r18, r0
 b1e:	11 24       	eor	r1, r1
 b20:	22 2e       	mov	r2, r18
 b22:	f3 2d       	mov	r31, r3
 b24:	f0 62       	ori	r31, 0x20	; 32
 b26:	3f 2e       	mov	r3, r31
 b28:	08 c0       	rjmp	.+16     	; 0xb3a <vfprintf+0xe6>
 b2a:	8c 36       	cpi	r24, 0x6C	; 108
 b2c:	21 f4       	brne	.+8      	; 0xb36 <vfprintf+0xe2>
 b2e:	83 2d       	mov	r24, r3
 b30:	80 68       	ori	r24, 0x80	; 128
 b32:	38 2e       	mov	r3, r24
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <vfprintf+0xe6>
 b36:	88 36       	cpi	r24, 0x68	; 104
 b38:	41 f4       	brne	.+16     	; 0xb4a <vfprintf+0xf6>
 b3a:	f7 01       	movw	r30, r14
 b3c:	93 fd       	sbrc	r25, 3
 b3e:	85 91       	lpm	r24, Z+
 b40:	93 ff       	sbrs	r25, 3
 b42:	81 91       	ld	r24, Z+
 b44:	7f 01       	movw	r14, r30
 b46:	81 11       	cpse	r24, r1
 b48:	b3 cf       	rjmp	.-154    	; 0xab0 <vfprintf+0x5c>
 b4a:	98 2f       	mov	r25, r24
 b4c:	9f 7d       	andi	r25, 0xDF	; 223
 b4e:	95 54       	subi	r25, 0x45	; 69
 b50:	93 30       	cpi	r25, 0x03	; 3
 b52:	28 f4       	brcc	.+10     	; 0xb5e <vfprintf+0x10a>
 b54:	0c 5f       	subi	r16, 0xFC	; 252
 b56:	1f 4f       	sbci	r17, 0xFF	; 255
 b58:	9f e3       	ldi	r25, 0x3F	; 63
 b5a:	99 83       	std	Y+1, r25	; 0x01
 b5c:	0d c0       	rjmp	.+26     	; 0xb78 <vfprintf+0x124>
 b5e:	83 36       	cpi	r24, 0x63	; 99
 b60:	31 f0       	breq	.+12     	; 0xb6e <vfprintf+0x11a>
 b62:	83 37       	cpi	r24, 0x73	; 115
 b64:	71 f0       	breq	.+28     	; 0xb82 <vfprintf+0x12e>
 b66:	83 35       	cpi	r24, 0x53	; 83
 b68:	09 f0       	breq	.+2      	; 0xb6c <vfprintf+0x118>
 b6a:	59 c0       	rjmp	.+178    	; 0xc1e <vfprintf+0x1ca>
 b6c:	21 c0       	rjmp	.+66     	; 0xbb0 <vfprintf+0x15c>
 b6e:	f8 01       	movw	r30, r16
 b70:	80 81       	ld	r24, Z
 b72:	89 83       	std	Y+1, r24	; 0x01
 b74:	0e 5f       	subi	r16, 0xFE	; 254
 b76:	1f 4f       	sbci	r17, 0xFF	; 255
 b78:	88 24       	eor	r8, r8
 b7a:	83 94       	inc	r8
 b7c:	91 2c       	mov	r9, r1
 b7e:	53 01       	movw	r10, r6
 b80:	13 c0       	rjmp	.+38     	; 0xba8 <vfprintf+0x154>
 b82:	28 01       	movw	r4, r16
 b84:	f2 e0       	ldi	r31, 0x02	; 2
 b86:	4f 0e       	add	r4, r31
 b88:	51 1c       	adc	r5, r1
 b8a:	f8 01       	movw	r30, r16
 b8c:	a0 80       	ld	r10, Z
 b8e:	b1 80       	ldd	r11, Z+1	; 0x01
 b90:	36 fe       	sbrs	r3, 6
 b92:	03 c0       	rjmp	.+6      	; 0xb9a <vfprintf+0x146>
 b94:	69 2d       	mov	r22, r9
 b96:	70 e0       	ldi	r23, 0x00	; 0
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <vfprintf+0x14a>
 b9a:	6f ef       	ldi	r22, 0xFF	; 255
 b9c:	7f ef       	ldi	r23, 0xFF	; 255
 b9e:	c5 01       	movw	r24, r10
 ba0:	0e 94 16 07 	call	0xe2c	; 0xe2c <strnlen>
 ba4:	4c 01       	movw	r8, r24
 ba6:	82 01       	movw	r16, r4
 ba8:	f3 2d       	mov	r31, r3
 baa:	ff 77       	andi	r31, 0x7F	; 127
 bac:	3f 2e       	mov	r3, r31
 bae:	16 c0       	rjmp	.+44     	; 0xbdc <vfprintf+0x188>
 bb0:	28 01       	movw	r4, r16
 bb2:	22 e0       	ldi	r18, 0x02	; 2
 bb4:	42 0e       	add	r4, r18
 bb6:	51 1c       	adc	r5, r1
 bb8:	f8 01       	movw	r30, r16
 bba:	a0 80       	ld	r10, Z
 bbc:	b1 80       	ldd	r11, Z+1	; 0x01
 bbe:	36 fe       	sbrs	r3, 6
 bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <vfprintf+0x174>
 bc2:	69 2d       	mov	r22, r9
 bc4:	70 e0       	ldi	r23, 0x00	; 0
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <vfprintf+0x178>
 bc8:	6f ef       	ldi	r22, 0xFF	; 255
 bca:	7f ef       	ldi	r23, 0xFF	; 255
 bcc:	c5 01       	movw	r24, r10
 bce:	0e 94 0b 07 	call	0xe16	; 0xe16 <strnlen_P>
 bd2:	4c 01       	movw	r8, r24
 bd4:	f3 2d       	mov	r31, r3
 bd6:	f0 68       	ori	r31, 0x80	; 128
 bd8:	3f 2e       	mov	r3, r31
 bda:	82 01       	movw	r16, r4
 bdc:	33 fc       	sbrc	r3, 3
 bde:	1b c0       	rjmp	.+54     	; 0xc16 <vfprintf+0x1c2>
 be0:	82 2d       	mov	r24, r2
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	88 16       	cp	r8, r24
 be6:	99 06       	cpc	r9, r25
 be8:	b0 f4       	brcc	.+44     	; 0xc16 <vfprintf+0x1c2>
 bea:	b6 01       	movw	r22, r12
 bec:	80 e2       	ldi	r24, 0x20	; 32
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	0e 94 21 07 	call	0xe42	; 0xe42 <fputc>
 bf4:	2a 94       	dec	r2
 bf6:	f4 cf       	rjmp	.-24     	; 0xbe0 <vfprintf+0x18c>
 bf8:	f5 01       	movw	r30, r10
 bfa:	37 fc       	sbrc	r3, 7
 bfc:	85 91       	lpm	r24, Z+
 bfe:	37 fe       	sbrs	r3, 7
 c00:	81 91       	ld	r24, Z+
 c02:	5f 01       	movw	r10, r30
 c04:	b6 01       	movw	r22, r12
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	0e 94 21 07 	call	0xe42	; 0xe42 <fputc>
 c0c:	21 10       	cpse	r2, r1
 c0e:	2a 94       	dec	r2
 c10:	21 e0       	ldi	r18, 0x01	; 1
 c12:	82 1a       	sub	r8, r18
 c14:	91 08       	sbc	r9, r1
 c16:	81 14       	cp	r8, r1
 c18:	91 04       	cpc	r9, r1
 c1a:	71 f7       	brne	.-36     	; 0xbf8 <vfprintf+0x1a4>
 c1c:	e8 c0       	rjmp	.+464    	; 0xdee <vfprintf+0x39a>
 c1e:	84 36       	cpi	r24, 0x64	; 100
 c20:	11 f0       	breq	.+4      	; 0xc26 <vfprintf+0x1d2>
 c22:	89 36       	cpi	r24, 0x69	; 105
 c24:	41 f5       	brne	.+80     	; 0xc76 <vfprintf+0x222>
 c26:	f8 01       	movw	r30, r16
 c28:	37 fe       	sbrs	r3, 7
 c2a:	07 c0       	rjmp	.+14     	; 0xc3a <vfprintf+0x1e6>
 c2c:	60 81       	ld	r22, Z
 c2e:	71 81       	ldd	r23, Z+1	; 0x01
 c30:	82 81       	ldd	r24, Z+2	; 0x02
 c32:	93 81       	ldd	r25, Z+3	; 0x03
 c34:	0c 5f       	subi	r16, 0xFC	; 252
 c36:	1f 4f       	sbci	r17, 0xFF	; 255
 c38:	08 c0       	rjmp	.+16     	; 0xc4a <vfprintf+0x1f6>
 c3a:	60 81       	ld	r22, Z
 c3c:	71 81       	ldd	r23, Z+1	; 0x01
 c3e:	07 2e       	mov	r0, r23
 c40:	00 0c       	add	r0, r0
 c42:	88 0b       	sbc	r24, r24
 c44:	99 0b       	sbc	r25, r25
 c46:	0e 5f       	subi	r16, 0xFE	; 254
 c48:	1f 4f       	sbci	r17, 0xFF	; 255
 c4a:	f3 2d       	mov	r31, r3
 c4c:	ff 76       	andi	r31, 0x6F	; 111
 c4e:	3f 2e       	mov	r3, r31
 c50:	97 ff       	sbrs	r25, 7
 c52:	09 c0       	rjmp	.+18     	; 0xc66 <vfprintf+0x212>
 c54:	90 95       	com	r25
 c56:	80 95       	com	r24
 c58:	70 95       	com	r23
 c5a:	61 95       	neg	r22
 c5c:	7f 4f       	sbci	r23, 0xFF	; 255
 c5e:	8f 4f       	sbci	r24, 0xFF	; 255
 c60:	9f 4f       	sbci	r25, 0xFF	; 255
 c62:	f0 68       	ori	r31, 0x80	; 128
 c64:	3f 2e       	mov	r3, r31
 c66:	2a e0       	ldi	r18, 0x0A	; 10
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	a3 01       	movw	r20, r6
 c6c:	0e 94 5d 07 	call	0xeba	; 0xeba <__ultoa_invert>
 c70:	88 2e       	mov	r8, r24
 c72:	86 18       	sub	r8, r6
 c74:	45 c0       	rjmp	.+138    	; 0xd00 <vfprintf+0x2ac>
 c76:	85 37       	cpi	r24, 0x75	; 117
 c78:	31 f4       	brne	.+12     	; 0xc86 <vfprintf+0x232>
 c7a:	23 2d       	mov	r18, r3
 c7c:	2f 7e       	andi	r18, 0xEF	; 239
 c7e:	b2 2e       	mov	r11, r18
 c80:	2a e0       	ldi	r18, 0x0A	; 10
 c82:	30 e0       	ldi	r19, 0x00	; 0
 c84:	25 c0       	rjmp	.+74     	; 0xcd0 <vfprintf+0x27c>
 c86:	93 2d       	mov	r25, r3
 c88:	99 7f       	andi	r25, 0xF9	; 249
 c8a:	b9 2e       	mov	r11, r25
 c8c:	8f 36       	cpi	r24, 0x6F	; 111
 c8e:	c1 f0       	breq	.+48     	; 0xcc0 <vfprintf+0x26c>
 c90:	18 f4       	brcc	.+6      	; 0xc98 <vfprintf+0x244>
 c92:	88 35       	cpi	r24, 0x58	; 88
 c94:	79 f0       	breq	.+30     	; 0xcb4 <vfprintf+0x260>
 c96:	b5 c0       	rjmp	.+362    	; 0xe02 <vfprintf+0x3ae>
 c98:	80 37       	cpi	r24, 0x70	; 112
 c9a:	19 f0       	breq	.+6      	; 0xca2 <vfprintf+0x24e>
 c9c:	88 37       	cpi	r24, 0x78	; 120
 c9e:	21 f0       	breq	.+8      	; 0xca8 <vfprintf+0x254>
 ca0:	b0 c0       	rjmp	.+352    	; 0xe02 <vfprintf+0x3ae>
 ca2:	e9 2f       	mov	r30, r25
 ca4:	e0 61       	ori	r30, 0x10	; 16
 ca6:	be 2e       	mov	r11, r30
 ca8:	b4 fe       	sbrs	r11, 4
 caa:	0d c0       	rjmp	.+26     	; 0xcc6 <vfprintf+0x272>
 cac:	fb 2d       	mov	r31, r11
 cae:	f4 60       	ori	r31, 0x04	; 4
 cb0:	bf 2e       	mov	r11, r31
 cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <vfprintf+0x272>
 cb4:	34 fe       	sbrs	r3, 4
 cb6:	0a c0       	rjmp	.+20     	; 0xccc <vfprintf+0x278>
 cb8:	29 2f       	mov	r18, r25
 cba:	26 60       	ori	r18, 0x06	; 6
 cbc:	b2 2e       	mov	r11, r18
 cbe:	06 c0       	rjmp	.+12     	; 0xccc <vfprintf+0x278>
 cc0:	28 e0       	ldi	r18, 0x08	; 8
 cc2:	30 e0       	ldi	r19, 0x00	; 0
 cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <vfprintf+0x27c>
 cc6:	20 e1       	ldi	r18, 0x10	; 16
 cc8:	30 e0       	ldi	r19, 0x00	; 0
 cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x27c>
 ccc:	20 e1       	ldi	r18, 0x10	; 16
 cce:	32 e0       	ldi	r19, 0x02	; 2
 cd0:	f8 01       	movw	r30, r16
 cd2:	b7 fe       	sbrs	r11, 7
 cd4:	07 c0       	rjmp	.+14     	; 0xce4 <vfprintf+0x290>
 cd6:	60 81       	ld	r22, Z
 cd8:	71 81       	ldd	r23, Z+1	; 0x01
 cda:	82 81       	ldd	r24, Z+2	; 0x02
 cdc:	93 81       	ldd	r25, Z+3	; 0x03
 cde:	0c 5f       	subi	r16, 0xFC	; 252
 ce0:	1f 4f       	sbci	r17, 0xFF	; 255
 ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <vfprintf+0x29c>
 ce4:	60 81       	ld	r22, Z
 ce6:	71 81       	ldd	r23, Z+1	; 0x01
 ce8:	80 e0       	ldi	r24, 0x00	; 0
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	0e 5f       	subi	r16, 0xFE	; 254
 cee:	1f 4f       	sbci	r17, 0xFF	; 255
 cf0:	a3 01       	movw	r20, r6
 cf2:	0e 94 5d 07 	call	0xeba	; 0xeba <__ultoa_invert>
 cf6:	88 2e       	mov	r8, r24
 cf8:	86 18       	sub	r8, r6
 cfa:	fb 2d       	mov	r31, r11
 cfc:	ff 77       	andi	r31, 0x7F	; 127
 cfe:	3f 2e       	mov	r3, r31
 d00:	36 fe       	sbrs	r3, 6
 d02:	0d c0       	rjmp	.+26     	; 0xd1e <vfprintf+0x2ca>
 d04:	23 2d       	mov	r18, r3
 d06:	2e 7f       	andi	r18, 0xFE	; 254
 d08:	a2 2e       	mov	r10, r18
 d0a:	89 14       	cp	r8, r9
 d0c:	58 f4       	brcc	.+22     	; 0xd24 <vfprintf+0x2d0>
 d0e:	34 fe       	sbrs	r3, 4
 d10:	0b c0       	rjmp	.+22     	; 0xd28 <vfprintf+0x2d4>
 d12:	32 fc       	sbrc	r3, 2
 d14:	09 c0       	rjmp	.+18     	; 0xd28 <vfprintf+0x2d4>
 d16:	83 2d       	mov	r24, r3
 d18:	8e 7e       	andi	r24, 0xEE	; 238
 d1a:	a8 2e       	mov	r10, r24
 d1c:	05 c0       	rjmp	.+10     	; 0xd28 <vfprintf+0x2d4>
 d1e:	b8 2c       	mov	r11, r8
 d20:	a3 2c       	mov	r10, r3
 d22:	03 c0       	rjmp	.+6      	; 0xd2a <vfprintf+0x2d6>
 d24:	b8 2c       	mov	r11, r8
 d26:	01 c0       	rjmp	.+2      	; 0xd2a <vfprintf+0x2d6>
 d28:	b9 2c       	mov	r11, r9
 d2a:	a4 fe       	sbrs	r10, 4
 d2c:	0f c0       	rjmp	.+30     	; 0xd4c <vfprintf+0x2f8>
 d2e:	fe 01       	movw	r30, r28
 d30:	e8 0d       	add	r30, r8
 d32:	f1 1d       	adc	r31, r1
 d34:	80 81       	ld	r24, Z
 d36:	80 33       	cpi	r24, 0x30	; 48
 d38:	21 f4       	brne	.+8      	; 0xd42 <vfprintf+0x2ee>
 d3a:	9a 2d       	mov	r25, r10
 d3c:	99 7e       	andi	r25, 0xE9	; 233
 d3e:	a9 2e       	mov	r10, r25
 d40:	09 c0       	rjmp	.+18     	; 0xd54 <vfprintf+0x300>
 d42:	a2 fe       	sbrs	r10, 2
 d44:	06 c0       	rjmp	.+12     	; 0xd52 <vfprintf+0x2fe>
 d46:	b3 94       	inc	r11
 d48:	b3 94       	inc	r11
 d4a:	04 c0       	rjmp	.+8      	; 0xd54 <vfprintf+0x300>
 d4c:	8a 2d       	mov	r24, r10
 d4e:	86 78       	andi	r24, 0x86	; 134
 d50:	09 f0       	breq	.+2      	; 0xd54 <vfprintf+0x300>
 d52:	b3 94       	inc	r11
 d54:	a3 fc       	sbrc	r10, 3
 d56:	11 c0       	rjmp	.+34     	; 0xd7a <vfprintf+0x326>
 d58:	a0 fe       	sbrs	r10, 0
 d5a:	06 c0       	rjmp	.+12     	; 0xd68 <vfprintf+0x314>
 d5c:	b2 14       	cp	r11, r2
 d5e:	88 f4       	brcc	.+34     	; 0xd82 <vfprintf+0x32e>
 d60:	28 0c       	add	r2, r8
 d62:	92 2c       	mov	r9, r2
 d64:	9b 18       	sub	r9, r11
 d66:	0e c0       	rjmp	.+28     	; 0xd84 <vfprintf+0x330>
 d68:	b2 14       	cp	r11, r2
 d6a:	60 f4       	brcc	.+24     	; 0xd84 <vfprintf+0x330>
 d6c:	b6 01       	movw	r22, r12
 d6e:	80 e2       	ldi	r24, 0x20	; 32
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	0e 94 21 07 	call	0xe42	; 0xe42 <fputc>
 d76:	b3 94       	inc	r11
 d78:	f7 cf       	rjmp	.-18     	; 0xd68 <vfprintf+0x314>
 d7a:	b2 14       	cp	r11, r2
 d7c:	18 f4       	brcc	.+6      	; 0xd84 <vfprintf+0x330>
 d7e:	2b 18       	sub	r2, r11
 d80:	02 c0       	rjmp	.+4      	; 0xd86 <vfprintf+0x332>
 d82:	98 2c       	mov	r9, r8
 d84:	21 2c       	mov	r2, r1
 d86:	a4 fe       	sbrs	r10, 4
 d88:	10 c0       	rjmp	.+32     	; 0xdaa <vfprintf+0x356>
 d8a:	b6 01       	movw	r22, r12
 d8c:	80 e3       	ldi	r24, 0x30	; 48
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	0e 94 21 07 	call	0xe42	; 0xe42 <fputc>
 d94:	a2 fe       	sbrs	r10, 2
 d96:	17 c0       	rjmp	.+46     	; 0xdc6 <vfprintf+0x372>
 d98:	a1 fc       	sbrc	r10, 1
 d9a:	03 c0       	rjmp	.+6      	; 0xda2 <vfprintf+0x34e>
 d9c:	88 e7       	ldi	r24, 0x78	; 120
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	02 c0       	rjmp	.+4      	; 0xda6 <vfprintf+0x352>
 da2:	88 e5       	ldi	r24, 0x58	; 88
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	b6 01       	movw	r22, r12
 da8:	0c c0       	rjmp	.+24     	; 0xdc2 <vfprintf+0x36e>
 daa:	8a 2d       	mov	r24, r10
 dac:	86 78       	andi	r24, 0x86	; 134
 dae:	59 f0       	breq	.+22     	; 0xdc6 <vfprintf+0x372>
 db0:	a1 fe       	sbrs	r10, 1
 db2:	02 c0       	rjmp	.+4      	; 0xdb8 <vfprintf+0x364>
 db4:	8b e2       	ldi	r24, 0x2B	; 43
 db6:	01 c0       	rjmp	.+2      	; 0xdba <vfprintf+0x366>
 db8:	80 e2       	ldi	r24, 0x20	; 32
 dba:	a7 fc       	sbrc	r10, 7
 dbc:	8d e2       	ldi	r24, 0x2D	; 45
 dbe:	b6 01       	movw	r22, r12
 dc0:	90 e0       	ldi	r25, 0x00	; 0
 dc2:	0e 94 21 07 	call	0xe42	; 0xe42 <fputc>
 dc6:	89 14       	cp	r8, r9
 dc8:	38 f4       	brcc	.+14     	; 0xdd8 <vfprintf+0x384>
 dca:	b6 01       	movw	r22, r12
 dcc:	80 e3       	ldi	r24, 0x30	; 48
 dce:	90 e0       	ldi	r25, 0x00	; 0
 dd0:	0e 94 21 07 	call	0xe42	; 0xe42 <fputc>
 dd4:	9a 94       	dec	r9
 dd6:	f7 cf       	rjmp	.-18     	; 0xdc6 <vfprintf+0x372>
 dd8:	8a 94       	dec	r8
 dda:	f3 01       	movw	r30, r6
 ddc:	e8 0d       	add	r30, r8
 dde:	f1 1d       	adc	r31, r1
 de0:	80 81       	ld	r24, Z
 de2:	b6 01       	movw	r22, r12
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	0e 94 21 07 	call	0xe42	; 0xe42 <fputc>
 dea:	81 10       	cpse	r8, r1
 dec:	f5 cf       	rjmp	.-22     	; 0xdd8 <vfprintf+0x384>
 dee:	22 20       	and	r2, r2
 df0:	09 f4       	brne	.+2      	; 0xdf4 <vfprintf+0x3a0>
 df2:	42 ce       	rjmp	.-892    	; 0xa78 <vfprintf+0x24>
 df4:	b6 01       	movw	r22, r12
 df6:	80 e2       	ldi	r24, 0x20	; 32
 df8:	90 e0       	ldi	r25, 0x00	; 0
 dfa:	0e 94 21 07 	call	0xe42	; 0xe42 <fputc>
 dfe:	2a 94       	dec	r2
 e00:	f6 cf       	rjmp	.-20     	; 0xdee <vfprintf+0x39a>
 e02:	f6 01       	movw	r30, r12
 e04:	86 81       	ldd	r24, Z+6	; 0x06
 e06:	97 81       	ldd	r25, Z+7	; 0x07
 e08:	02 c0       	rjmp	.+4      	; 0xe0e <vfprintf+0x3ba>
 e0a:	8f ef       	ldi	r24, 0xFF	; 255
 e0c:	9f ef       	ldi	r25, 0xFF	; 255
 e0e:	2b 96       	adiw	r28, 0x0b	; 11
 e10:	e2 e1       	ldi	r30, 0x12	; 18
 e12:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__epilogue_restores__>

00000e16 <strnlen_P>:
 e16:	fc 01       	movw	r30, r24
 e18:	05 90       	lpm	r0, Z+
 e1a:	61 50       	subi	r22, 0x01	; 1
 e1c:	70 40       	sbci	r23, 0x00	; 0
 e1e:	01 10       	cpse	r0, r1
 e20:	d8 f7       	brcc	.-10     	; 0xe18 <strnlen_P+0x2>
 e22:	80 95       	com	r24
 e24:	90 95       	com	r25
 e26:	8e 0f       	add	r24, r30
 e28:	9f 1f       	adc	r25, r31
 e2a:	08 95       	ret

00000e2c <strnlen>:
 e2c:	fc 01       	movw	r30, r24
 e2e:	61 50       	subi	r22, 0x01	; 1
 e30:	70 40       	sbci	r23, 0x00	; 0
 e32:	01 90       	ld	r0, Z+
 e34:	01 10       	cpse	r0, r1
 e36:	d8 f7       	brcc	.-10     	; 0xe2e <strnlen+0x2>
 e38:	80 95       	com	r24
 e3a:	90 95       	com	r25
 e3c:	8e 0f       	add	r24, r30
 e3e:	9f 1f       	adc	r25, r31
 e40:	08 95       	ret

00000e42 <fputc>:
 e42:	0f 93       	push	r16
 e44:	1f 93       	push	r17
 e46:	cf 93       	push	r28
 e48:	df 93       	push	r29
 e4a:	fb 01       	movw	r30, r22
 e4c:	23 81       	ldd	r18, Z+3	; 0x03
 e4e:	21 fd       	sbrc	r18, 1
 e50:	03 c0       	rjmp	.+6      	; 0xe58 <fputc+0x16>
 e52:	8f ef       	ldi	r24, 0xFF	; 255
 e54:	9f ef       	ldi	r25, 0xFF	; 255
 e56:	2c c0       	rjmp	.+88     	; 0xeb0 <fputc+0x6e>
 e58:	22 ff       	sbrs	r18, 2
 e5a:	16 c0       	rjmp	.+44     	; 0xe88 <fputc+0x46>
 e5c:	46 81       	ldd	r20, Z+6	; 0x06
 e5e:	57 81       	ldd	r21, Z+7	; 0x07
 e60:	24 81       	ldd	r18, Z+4	; 0x04
 e62:	35 81       	ldd	r19, Z+5	; 0x05
 e64:	42 17       	cp	r20, r18
 e66:	53 07       	cpc	r21, r19
 e68:	44 f4       	brge	.+16     	; 0xe7a <fputc+0x38>
 e6a:	a0 81       	ld	r26, Z
 e6c:	b1 81       	ldd	r27, Z+1	; 0x01
 e6e:	9d 01       	movw	r18, r26
 e70:	2f 5f       	subi	r18, 0xFF	; 255
 e72:	3f 4f       	sbci	r19, 0xFF	; 255
 e74:	31 83       	std	Z+1, r19	; 0x01
 e76:	20 83       	st	Z, r18
 e78:	8c 93       	st	X, r24
 e7a:	26 81       	ldd	r18, Z+6	; 0x06
 e7c:	37 81       	ldd	r19, Z+7	; 0x07
 e7e:	2f 5f       	subi	r18, 0xFF	; 255
 e80:	3f 4f       	sbci	r19, 0xFF	; 255
 e82:	37 83       	std	Z+7, r19	; 0x07
 e84:	26 83       	std	Z+6, r18	; 0x06
 e86:	14 c0       	rjmp	.+40     	; 0xeb0 <fputc+0x6e>
 e88:	8b 01       	movw	r16, r22
 e8a:	ec 01       	movw	r28, r24
 e8c:	fb 01       	movw	r30, r22
 e8e:	00 84       	ldd	r0, Z+8	; 0x08
 e90:	f1 85       	ldd	r31, Z+9	; 0x09
 e92:	e0 2d       	mov	r30, r0
 e94:	09 95       	icall
 e96:	89 2b       	or	r24, r25
 e98:	e1 f6       	brne	.-72     	; 0xe52 <fputc+0x10>
 e9a:	d8 01       	movw	r26, r16
 e9c:	16 96       	adiw	r26, 0x06	; 6
 e9e:	8d 91       	ld	r24, X+
 ea0:	9c 91       	ld	r25, X
 ea2:	17 97       	sbiw	r26, 0x07	; 7
 ea4:	01 96       	adiw	r24, 0x01	; 1
 ea6:	17 96       	adiw	r26, 0x07	; 7
 ea8:	9c 93       	st	X, r25
 eaa:	8e 93       	st	-X, r24
 eac:	16 97       	sbiw	r26, 0x06	; 6
 eae:	ce 01       	movw	r24, r28
 eb0:	df 91       	pop	r29
 eb2:	cf 91       	pop	r28
 eb4:	1f 91       	pop	r17
 eb6:	0f 91       	pop	r16
 eb8:	08 95       	ret

00000eba <__ultoa_invert>:
 eba:	fa 01       	movw	r30, r20
 ebc:	aa 27       	eor	r26, r26
 ebe:	28 30       	cpi	r18, 0x08	; 8
 ec0:	51 f1       	breq	.+84     	; 0xf16 <__ultoa_invert+0x5c>
 ec2:	20 31       	cpi	r18, 0x10	; 16
 ec4:	81 f1       	breq	.+96     	; 0xf26 <__ultoa_invert+0x6c>
 ec6:	e8 94       	clt
 ec8:	6f 93       	push	r22
 eca:	6e 7f       	andi	r22, 0xFE	; 254
 ecc:	6e 5f       	subi	r22, 0xFE	; 254
 ece:	7f 4f       	sbci	r23, 0xFF	; 255
 ed0:	8f 4f       	sbci	r24, 0xFF	; 255
 ed2:	9f 4f       	sbci	r25, 0xFF	; 255
 ed4:	af 4f       	sbci	r26, 0xFF	; 255
 ed6:	b1 e0       	ldi	r27, 0x01	; 1
 ed8:	3e d0       	rcall	.+124    	; 0xf56 <__ultoa_invert+0x9c>
 eda:	b4 e0       	ldi	r27, 0x04	; 4
 edc:	3c d0       	rcall	.+120    	; 0xf56 <__ultoa_invert+0x9c>
 ede:	67 0f       	add	r22, r23
 ee0:	78 1f       	adc	r23, r24
 ee2:	89 1f       	adc	r24, r25
 ee4:	9a 1f       	adc	r25, r26
 ee6:	a1 1d       	adc	r26, r1
 ee8:	68 0f       	add	r22, r24
 eea:	79 1f       	adc	r23, r25
 eec:	8a 1f       	adc	r24, r26
 eee:	91 1d       	adc	r25, r1
 ef0:	a1 1d       	adc	r26, r1
 ef2:	6a 0f       	add	r22, r26
 ef4:	71 1d       	adc	r23, r1
 ef6:	81 1d       	adc	r24, r1
 ef8:	91 1d       	adc	r25, r1
 efa:	a1 1d       	adc	r26, r1
 efc:	20 d0       	rcall	.+64     	; 0xf3e <__ultoa_invert+0x84>
 efe:	09 f4       	brne	.+2      	; 0xf02 <__ultoa_invert+0x48>
 f00:	68 94       	set
 f02:	3f 91       	pop	r19
 f04:	2a e0       	ldi	r18, 0x0A	; 10
 f06:	26 9f       	mul	r18, r22
 f08:	11 24       	eor	r1, r1
 f0a:	30 19       	sub	r19, r0
 f0c:	30 5d       	subi	r19, 0xD0	; 208
 f0e:	31 93       	st	Z+, r19
 f10:	de f6       	brtc	.-74     	; 0xec8 <__ultoa_invert+0xe>
 f12:	cf 01       	movw	r24, r30
 f14:	08 95       	ret
 f16:	46 2f       	mov	r20, r22
 f18:	47 70       	andi	r20, 0x07	; 7
 f1a:	40 5d       	subi	r20, 0xD0	; 208
 f1c:	41 93       	st	Z+, r20
 f1e:	b3 e0       	ldi	r27, 0x03	; 3
 f20:	0f d0       	rcall	.+30     	; 0xf40 <__ultoa_invert+0x86>
 f22:	c9 f7       	brne	.-14     	; 0xf16 <__ultoa_invert+0x5c>
 f24:	f6 cf       	rjmp	.-20     	; 0xf12 <__ultoa_invert+0x58>
 f26:	46 2f       	mov	r20, r22
 f28:	4f 70       	andi	r20, 0x0F	; 15
 f2a:	40 5d       	subi	r20, 0xD0	; 208
 f2c:	4a 33       	cpi	r20, 0x3A	; 58
 f2e:	18 f0       	brcs	.+6      	; 0xf36 <__ultoa_invert+0x7c>
 f30:	49 5d       	subi	r20, 0xD9	; 217
 f32:	31 fd       	sbrc	r19, 1
 f34:	40 52       	subi	r20, 0x20	; 32
 f36:	41 93       	st	Z+, r20
 f38:	02 d0       	rcall	.+4      	; 0xf3e <__ultoa_invert+0x84>
 f3a:	a9 f7       	brne	.-22     	; 0xf26 <__ultoa_invert+0x6c>
 f3c:	ea cf       	rjmp	.-44     	; 0xf12 <__ultoa_invert+0x58>
 f3e:	b4 e0       	ldi	r27, 0x04	; 4
 f40:	a6 95       	lsr	r26
 f42:	97 95       	ror	r25
 f44:	87 95       	ror	r24
 f46:	77 95       	ror	r23
 f48:	67 95       	ror	r22
 f4a:	ba 95       	dec	r27
 f4c:	c9 f7       	brne	.-14     	; 0xf40 <__ultoa_invert+0x86>
 f4e:	00 97       	sbiw	r24, 0x00	; 0
 f50:	61 05       	cpc	r22, r1
 f52:	71 05       	cpc	r23, r1
 f54:	08 95       	ret
 f56:	9b 01       	movw	r18, r22
 f58:	ac 01       	movw	r20, r24
 f5a:	0a 2e       	mov	r0, r26
 f5c:	06 94       	lsr	r0
 f5e:	57 95       	ror	r21
 f60:	47 95       	ror	r20
 f62:	37 95       	ror	r19
 f64:	27 95       	ror	r18
 f66:	ba 95       	dec	r27
 f68:	c9 f7       	brne	.-14     	; 0xf5c <__ultoa_invert+0xa2>
 f6a:	62 0f       	add	r22, r18
 f6c:	73 1f       	adc	r23, r19
 f6e:	84 1f       	adc	r24, r20
 f70:	95 1f       	adc	r25, r21
 f72:	a0 1d       	adc	r26, r0
 f74:	08 95       	ret

00000f76 <__prologue_saves__>:
 f76:	2f 92       	push	r2
 f78:	3f 92       	push	r3
 f7a:	4f 92       	push	r4
 f7c:	5f 92       	push	r5
 f7e:	6f 92       	push	r6
 f80:	7f 92       	push	r7
 f82:	8f 92       	push	r8
 f84:	9f 92       	push	r9
 f86:	af 92       	push	r10
 f88:	bf 92       	push	r11
 f8a:	cf 92       	push	r12
 f8c:	df 92       	push	r13
 f8e:	ef 92       	push	r14
 f90:	ff 92       	push	r15
 f92:	0f 93       	push	r16
 f94:	1f 93       	push	r17
 f96:	cf 93       	push	r28
 f98:	df 93       	push	r29
 f9a:	cd b7       	in	r28, 0x3d	; 61
 f9c:	de b7       	in	r29, 0x3e	; 62
 f9e:	ca 1b       	sub	r28, r26
 fa0:	db 0b       	sbc	r29, r27
 fa2:	0f b6       	in	r0, 0x3f	; 63
 fa4:	f8 94       	cli
 fa6:	de bf       	out	0x3e, r29	; 62
 fa8:	0f be       	out	0x3f, r0	; 63
 faa:	cd bf       	out	0x3d, r28	; 61
 fac:	09 94       	ijmp

00000fae <__epilogue_restores__>:
 fae:	2a 88       	ldd	r2, Y+18	; 0x12
 fb0:	39 88       	ldd	r3, Y+17	; 0x11
 fb2:	48 88       	ldd	r4, Y+16	; 0x10
 fb4:	5f 84       	ldd	r5, Y+15	; 0x0f
 fb6:	6e 84       	ldd	r6, Y+14	; 0x0e
 fb8:	7d 84       	ldd	r7, Y+13	; 0x0d
 fba:	8c 84       	ldd	r8, Y+12	; 0x0c
 fbc:	9b 84       	ldd	r9, Y+11	; 0x0b
 fbe:	aa 84       	ldd	r10, Y+10	; 0x0a
 fc0:	b9 84       	ldd	r11, Y+9	; 0x09
 fc2:	c8 84       	ldd	r12, Y+8	; 0x08
 fc4:	df 80       	ldd	r13, Y+7	; 0x07
 fc6:	ee 80       	ldd	r14, Y+6	; 0x06
 fc8:	fd 80       	ldd	r15, Y+5	; 0x05
 fca:	0c 81       	ldd	r16, Y+4	; 0x04
 fcc:	1b 81       	ldd	r17, Y+3	; 0x03
 fce:	aa 81       	ldd	r26, Y+2	; 0x02
 fd0:	b9 81       	ldd	r27, Y+1	; 0x01
 fd2:	ce 0f       	add	r28, r30
 fd4:	d1 1d       	adc	r29, r1
 fd6:	0f b6       	in	r0, 0x3f	; 63
 fd8:	f8 94       	cli
 fda:	de bf       	out	0x3e, r29	; 62
 fdc:	0f be       	out	0x3f, r0	; 63
 fde:	cd bf       	out	0x3d, r28	; 61
 fe0:	ed 01       	movw	r28, r26
 fe2:	08 95       	ret

00000fe4 <_exit>:
 fe4:	f8 94       	cli

00000fe6 <__stop_program>:
 fe6:	ff cf       	rjmp	.-2      	; 0xfe6 <__stop_program>
