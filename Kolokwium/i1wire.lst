   1               		.file	"i1wire.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	OW_reset
  12               	OW_reset:
  13               	.LFB6:
  14               		.file 1 "i1wire.c"
   1:i1wire.c      **** #include "i1wire.h"
   2:i1wire.c      **** 
   3:i1wire.c      **** uint8_t OW_reset(void){ //przywitanie 
  15               		.loc 1 3 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
   4:i1wire.c      **** 	uint8_t result;
   5:i1wire.c      **** 	_delay_us(0);
   6:i1wire.c      **** 	//outp(PORTADDRESS,0x00); // Drives DQ low <- sprowadza magistrale w stan niski, odpowiednikiem je
   7:i1wire.c      **** 	OW_low;
  21               		.loc 1 7 0
  22 0000 BB9A      		sbi 0x17,3
  23               	.LVL0:
  24               	.LBB32:
  25               	.LBB33:
  26               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  27               		.loc 2 276 0
  28 0002 8FE7      		ldi r24,lo8(1919)
  29 0004 97E0      		ldi r25,hi8(1919)
  30 0006 0197      	1:	sbiw r24,1
  31 0008 01F4      		brne 1b
  32 000a 00C0      		rjmp .
  33 000c 0000      		nop
  34               	.LVL1:
  35               	.LBE33:
  36               	.LBE32:
   8:i1wire.c      **** 	_delay_us(480);
   9:i1wire.c      **** 	//outp(PORTADDRESS,0x01); // Releases the bus <-OWHigh robi to samo
  10:i1wire.c      **** 	OW_high;
  37               		.loc 1 10 0
  38 000e BB98      		cbi 0x17,3
  39               	.LVL2:
  40               	.LBB34:
  41               	.LBB35:
  42               		.loc 2 276 0
  43 0010 E7E1      		ldi r30,lo8(279)
  44 0012 F1E0      		ldi r31,hi8(279)
  45 0014 3197      	1:	sbiw r30,1
  46 0016 01F4      		brne 1b
  47 0018 00C0      		rjmp .
  48 001a 0000      		nop
  49               	.LVL3:
  50               	.LBE35:
  51               	.LBE34:
  11:i1wire.c      **** 	_delay_us(70);
  12:i1wire.c      **** 	//result = inp(PORTADDRESS) ^ 0x01; // Sample for presence pulse from slave <- owcheck
  13:i1wire.c      **** 	result = OW_check;
  52               		.loc 1 13 0
  53 001c 86B3      		in r24,0x16
  54               	.LVL4:
  55               	.LBB36:
  56               	.LBB37:
  57               		.loc 2 276 0
  58 001e E7E6      		ldi r30,lo8(1639)
  59 0020 F6E0      		ldi r31,hi8(1639)
  60 0022 3197      	1:	sbiw r30,1
  61 0024 01F4      		brne 1b
  62 0026 00C0      		rjmp .
  63 0028 0000      		nop
  64               	.LVL5:
  65               	.LBE37:
  66               	.LBE36:
  14:i1wire.c      **** 	_delay_us(410); // Complete the reset sequence recovery
  15:i1wire.c      **** 	return result; // Return sample presence pulse result
  16:i1wire.c      **** }
  67               		.loc 1 16 0
  68 002a 8870      		andi r24,lo8(8)
  69               	.LVL6:
  70 002c 0895      		ret
  71               		.cfi_endproc
  72               	.LFE6:
  74               	.global	OWWriteBit
  76               	OWWriteBit:
  77               	.LFB7:
  17:i1wire.c      **** 
  18:i1wire.c      **** void OWWriteBit(uint8_t byte){ //wysylanie bit
  78               		.loc 1 18 0
  79               		.cfi_startproc
  80               	.LVL7:
  81               	/* prologue: function */
  82               	/* frame size = 0 */
  83               	/* stack size = 0 */
  84               	.L__stack_usage = 0
  85               	.LBB56:
  86               	.LBB57:
  19:i1wire.c      **** 	if(byte)
  20:i1wire.c      **** 	{
  21:i1wire.c      **** 		// Write '1' bit
  22:i1wire.c      **** 		//outp(PORTADDRESS,0x00); // Drives DQ low
  23:i1wire.c      **** 		OW_low;
  87               		.loc 1 23 0
  88 002e BB9A      		sbi 0x17,3
  89               	.LBE57:
  90               	.LBE56:
  19:i1wire.c      **** 	if(byte)
  91               		.loc 1 19 0
  92 0030 8823      		tst r24
  93 0032 01F0      		breq .L3
  94               	.LVL8:
  95               	.LBB63:
  96               	.LBB62:
  97               	.LBB58:
  98               	.LBB59:
  99               		.loc 2 276 0
 100 0034 80E2      		ldi r24,lo8(32)
 101 0036 8A95      	1:	dec r24
 102 0038 01F4      		brne 1b
 103               	.LVL9:
 104               	.LBE59:
 105               	.LBE58:
  24:i1wire.c      **** 		_delay_us(6);
  25:i1wire.c      **** 		//outp(PORTADDRESS,0x01); // Releases the bus
  26:i1wire.c      **** 		OW_high;
 106               		.loc 1 26 0
 107 003a BB98      		cbi 0x17,3
 108               	.LVL10:
 109               	.LBB60:
 110               	.LBB61:
 111               		.loc 2 276 0
 112 003c 8FEF      		ldi r24,lo8(255)
 113 003e 90E0      		ldi r25,hi8(255)
 114 0040 0197      	1:	sbiw r24,1
 115 0042 01F4      		brne 1b
 116 0044 00C0      		rjmp .
 117 0046 00C0      		rjmp .L5
 118               	.LVL11:
 119               	.L3:
 120               	.LBE61:
 121               	.LBE60:
 122               	.LBE62:
 123               	.LBE63:
 124               	.LBB64:
 125               	.LBB65:
 126 0048 8FEE      		ldi r24,lo8(239)
 127 004a 90E0      		ldi r25,hi8(239)
 128 004c 0197      	1:	sbiw r24,1
 129 004e 01F4      		brne 1b
 130               	.LVL12:
 131 0050 00C0      		rjmp .
 132 0052 0000      		nop
 133               	.LVL13:
 134               	.LBE65:
 135               	.LBE64:
  27:i1wire.c      **** 		_delay_us(64); // Complete the time slot and 10us recovery
  28:i1wire.c      **** 	}
  29:i1wire.c      **** 	else
  30:i1wire.c      **** 	{
  31:i1wire.c      **** 		// Write '0' bit
  32:i1wire.c      **** 		//outp(PORTADDRESS,0x00); // Drives DQ low
  33:i1wire.c      **** 		OW_low;
  34:i1wire.c      **** 		_delay_us(60);
  35:i1wire.c      **** 		//outp(PORTADDRESS,0x01); // Releases the bus
  36:i1wire.c      **** 		OW_high;
 136               		.loc 1 36 0
 137 0054 BB98      		cbi 0x17,3
 138               	.LVL14:
 139               	.LBB66:
 140               	.LBB67:
 141               		.loc 2 276 0
 142 0056 95E3      		ldi r25,lo8(53)
 143 0058 9A95      	1:	dec r25
 144 005a 01F4      		brne 1b
 145               	.LVL15:
 146               	.L5:
 147 005c 0000      		nop
 148 005e 0895      		ret
 149               	.LBE67:
 150               	.LBE66:
 151               		.cfi_endproc
 152               	.LFE7:
 154               	.global	OWReadBit
 156               	OWReadBit:
 157               	.LFB8:
  37:i1wire.c      **** 		_delay_us(10);
  38:i1wire.c      **** 	}
  39:i1wire.c      **** }
  40:i1wire.c      **** uint8_t OWReadBit(void){ //otrzymywanie bit
 158               		.loc 1 40 0
 159               		.cfi_startproc
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
  41:i1wire.c      **** 	uint8_t result;
  42:i1wire.c      **** 	//outp(PORTADDRESS,0x00); // Drives DQ low
  43:i1wire.c      **** 	OW_low;
 164               		.loc 1 43 0
 165 0060 BB9A      		sbi 0x17,3
 166               	.LVL16:
 167               	.LBB68:
 168               	.LBB69:
 169               		.loc 2 276 0
 170 0062 80E2      		ldi r24,lo8(32)
 171 0064 8A95      	1:	dec r24
 172 0066 01F4      		brne 1b
 173               	.LVL17:
 174               	.LBE69:
 175               	.LBE68:
  44:i1wire.c      **** 	_delay_us(6);
  45:i1wire.c      **** 	//outp(PORTADDRESS,0x01); // Releases the bus
  46:i1wire.c      **** 	OW_high;
 176               		.loc 1 46 0
 177 0068 BB98      		cbi 0x17,3
 178               	.LVL18:
 179               	.LBB70:
 180               	.LBB71:
 181               		.loc 2 276 0
 182 006a E0E3      		ldi r30,lo8(48)
 183 006c EA95      	1:	dec r30
 184 006e 01F4      		brne 1b
 185               	.LVL19:
 186               	.LBE71:
 187               	.LBE70:
  47:i1wire.c      **** 	_delay_us(9);
  48:i1wire.c      **** 	//result = inp(PORTADDRESS) & 0x01; // Sample the bit value from the slave
  49:i1wire.c      **** 	result = OW_check;
 188               		.loc 1 49 0
 189 0070 86B3      		in r24,0x16
 190               	.LVL20:
 191               	.LBB72:
 192               	.LBB73:
 193               		.loc 2 276 0
 194 0072 EBED      		ldi r30,lo8(219)
 195 0074 F0E0      		ldi r31,hi8(219)
 196 0076 3197      	1:	sbiw r30,1
 197 0078 01F4      		brne 1b
 198 007a 00C0      		rjmp .
 199 007c 0000      		nop
 200               	.LVL21:
 201               	.LBE73:
 202               	.LBE72:
  50:i1wire.c      **** 	_delay_us(55); // Complete the time slot and 10us recovery
  51:i1wire.c      **** 	return result;
  52:i1wire.c      **** }
 203               		.loc 1 52 0
 204 007e 8870      		andi r24,lo8(8)
 205               	.LVL22:
 206 0080 0895      		ret
 207               		.cfi_endproc
 208               	.LFE8:
 210               	.global	OW_send
 212               	OW_send:
 213               	.LFB9:
  53:i1wire.c      **** 
  54:i1wire.c      **** void OW_send(uint8_t byte){ //wysylanie bajt
 214               		.loc 1 54 0
 215               		.cfi_startproc
 216               	.LVL23:
 217 0082 CF93      		push r28
 218               	.LCFI0:
 219               		.cfi_def_cfa_offset 3
 220               		.cfi_offset 28, -2
 221 0084 DF93      		push r29
 222               	.LCFI1:
 223               		.cfi_def_cfa_offset 4
 224               		.cfi_offset 29, -3
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 2 */
 228               	.L__stack_usage = 2
 229 0086 D82F      		mov r29,r24
 230               	.LVL24:
 231               		.loc 1 54 0
 232 0088 C8E0      		ldi r28,lo8(8)
 233               	.LVL25:
 234               	.L9:
  55:i1wire.c      **** 	uint8_t loop;
  56:i1wire.c      **** 	// Loop to write each bit in the byte, LS-bit first
  57:i1wire.c      **** 	for (loop = 0; loop < 8; loop++)
  58:i1wire.c      **** 	{
  59:i1wire.c      **** 		OWWriteBit(byte & 0x01);
 235               		.loc 1 59 0 discriminator 3
 236 008a 8D2F      		mov r24,r29
 237 008c 8170      		andi r24,lo8(1)
 238 008e 0E94 0000 		call OWWriteBit
 239               	.LVL26:
  60:i1wire.c      **** 		// shift the data byte for the next bit
  61:i1wire.c      **** 		byte >>= 1;
 240               		.loc 1 61 0 discriminator 3
 241 0092 D695      		lsr r29
 242               	.LVL27:
 243 0094 C150      		subi r28,lo8(-(-1))
 244               	.LVL28:
  57:i1wire.c      **** 	{
 245               		.loc 1 57 0 discriminator 3
 246 0096 01F4      		brne .L9
 247               	/* epilogue start */
  62:i1wire.c      **** 	}
  63:i1wire.c      **** }
 248               		.loc 1 63 0
 249 0098 DF91      		pop r29
 250               	.LVL29:
 251 009a CF91      		pop r28
 252               	.LVL30:
 253 009c 0895      		ret
 254               		.cfi_endproc
 255               	.LFE9:
 257               	.global	OW_recv
 259               	OW_recv:
 260               	.LFB10:
  64:i1wire.c      **** uint8_t OW_recv(void){ //otrzymywanie bajt
 261               		.loc 1 64 0
 262               		.cfi_startproc
 263 009e CF93      		push r28
 264               	.LCFI2:
 265               		.cfi_def_cfa_offset 3
 266               		.cfi_offset 28, -2
 267 00a0 DF93      		push r29
 268               	.LCFI3:
 269               		.cfi_def_cfa_offset 4
 270               		.cfi_offset 29, -3
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 2 */
 274               	.L__stack_usage = 2
 275               	.LVL31:
 276               		.loc 1 64 0
 277 00a2 D8E0      		ldi r29,lo8(8)
  65:i1wire.c      **** 	uint8_t loop, result=0;
 278               		.loc 1 65 0
 279 00a4 C0E0      		ldi r28,0
 280               	.LVL32:
 281               	.L13:
  66:i1wire.c      **** 	for (loop = 0; loop < 8; loop++)
  67:i1wire.c      **** 	{
  68:i1wire.c      **** 		// shift the result to get it ready for the next bit
  69:i1wire.c      **** 		result >>= 1;
 282               		.loc 1 69 0
 283 00a6 C695      		lsr r28
 284               	.LVL33:
  70:i1wire.c      **** 		// if result is one, then set MS bit
  71:i1wire.c      **** 		if (OWReadBit())
 285               		.loc 1 71 0
 286 00a8 0E94 0000 		call OWReadBit
 287               	.LVL34:
 288 00ac 8111      		cpse r24,__zero_reg__
  72:i1wire.c      **** 			result |= 0x80; //wstawienie 1 do najstarszego bitu
 289               		.loc 1 72 0
 290 00ae C068      		ori r28,lo8(-128)
 291               	.LVL35:
 292               	.L12:
 293 00b0 D150      		subi r29,lo8(-(-1))
 294               	.LVL36:
  66:i1wire.c      **** 	for (loop = 0; loop < 8; loop++)
 295               		.loc 1 66 0 discriminator 2
 296 00b2 01F4      		brne .L13
  73:i1wire.c      **** 	}
  74:i1wire.c      **** 	return result;
  75:i1wire.c      **** }
 297               		.loc 1 75 0
 298 00b4 8C2F      		mov r24,r28
 299               	/* epilogue start */
 300 00b6 DF91      		pop r29
 301               	.LVL37:
 302 00b8 CF91      		pop r28
 303               	.LVL38:
 304 00ba 0895      		ret
 305               		.cfi_endproc
 306               	.LFE10:
 308               	.Letext0:
 309               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 i1wire.c
     /tmp/ccHZ7Nno.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccHZ7Nno.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccHZ7Nno.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccHZ7Nno.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccHZ7Nno.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccHZ7Nno.s:12     .text:0000000000000000 OW_reset
     /tmp/ccHZ7Nno.s:76     .text:000000000000002e OWWriteBit
     /tmp/ccHZ7Nno.s:156    .text:0000000000000060 OWReadBit
     /tmp/ccHZ7Nno.s:212    .text:0000000000000082 OW_send
     /tmp/ccHZ7Nno.s:259    .text:000000000000009e OW_recv

NO UNDEFINED SYMBOLS
