   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 446F 6272 		.string	"Dobrze co tam"
  12      7A65 2063 
  12      6F20 7461 
  12      6D00 
  13               	.LC1:
  14 000e 5465 6368 		.string	"Technicznie"
  14      6E69 637A 
  14      6E69 6500 
  15               	.LC2:
  16 001a 6E61 6A6C 		.string	"najlepsi"
  16      6570 7369 
  16      00
  17               		.section	.text.startup,"ax",@progbits
  18               	.global	main
  20               	main:
  21               	.LFB8:
  22               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h> 
   2:main.c        **** #include "lcd.h"
   3:main.c        **** #include <avr/pgmspace.h> //zeby byl progmem
   4:main.c        **** FILE lcd_stream = FDEV_SETUP_STREAM(lcd_puts, NULL, _FDEV_SETUP_WRITE);
   5:main.c        **** const char tekst[] PROGMEM = "Ala ma kota"; //progmem kluczowy zeby byl we flashu
   6:main.c        **** 
   7:main.c        **** int main(void){
  23               		.loc 1 7 0
  24               		.cfi_startproc
  25               	/* prologue: function */
  26               	/* frame size = 0 */
  27               	/* stack size = 0 */
  28               	.L__stack_usage = 0
   8:main.c        **** 	lcdinit();
  29               		.loc 1 8 0
  30 0000 0E94 0000 		call lcdinit
  31               	.LVL0:
   9:main.c        **** 	lcd_write_data('S');
  32               		.loc 1 9 0
  33 0004 83E5      		ldi r24,lo8(83)
  34 0006 0E94 0000 		call lcd_write_data
  35               	.LVL1:
  10:main.c        **** 	lcd_write_data('i');
  36               		.loc 1 10 0
  37 000a 89E6      		ldi r24,lo8(105)
  38 000c 0E94 0000 		call lcd_write_data
  39               	.LVL2:
  11:main.c        **** 	lcd_write_data('e');
  40               		.loc 1 11 0
  41 0010 85E6      		ldi r24,lo8(101)
  42 0012 0E94 0000 		call lcd_write_data
  43               	.LVL3:
  12:main.c        **** 	lcd_write_data('m');
  44               		.loc 1 12 0
  45 0016 8DE6      		ldi r24,lo8(109)
  46 0018 0E94 0000 		call lcd_write_data
  47               	.LVL4:
  13:main.c        **** 	lcd_write_data('a');
  48               		.loc 1 13 0
  49 001c 81E6      		ldi r24,lo8(97)
  50 001e 0E94 0000 		call lcd_write_data
  51               	.LVL5:
  14:main.c        **** 	lcd_write_data(' ');
  52               		.loc 1 14 0
  53 0022 80E2      		ldi r24,lo8(32)
  54 0024 0E94 0000 		call lcd_write_data
  55               	.LVL6:
  15:main.c        **** 	lcd_write_data('c');
  56               		.loc 1 15 0
  57 0028 83E6      		ldi r24,lo8(99)
  58 002a 0E94 0000 		call lcd_write_data
  59               	.LVL7:
  16:main.c        **** 	lcd_write_data('o');
  60               		.loc 1 16 0
  61 002e 8FE6      		ldi r24,lo8(111)
  62 0030 0E94 0000 		call lcd_write_data
  63               	.LVL8:
  17:main.c        **** 	lcd_write_data(' ');
  64               		.loc 1 17 0
  65 0034 80E2      		ldi r24,lo8(32)
  66 0036 0E94 0000 		call lcd_write_data
  67               	.LVL9:
  18:main.c        **** 	lcd_write_data('t');
  68               		.loc 1 18 0
  69 003a 84E7      		ldi r24,lo8(116)
  70 003c 0E94 0000 		call lcd_write_data
  71               	.LVL10:
  19:main.c        **** 	lcd_write_data('a');
  72               		.loc 1 19 0
  73 0040 81E6      		ldi r24,lo8(97)
  74 0042 0E94 0000 		call lcd_write_data
  75               	.LVL11:
  20:main.c        **** 	lcd_write_data('m');
  76               		.loc 1 20 0
  77 0046 8DE6      		ldi r24,lo8(109)
  78 0048 0E94 0000 		call lcd_write_data
  79               	.LVL12:
  21:main.c        **** 	lcd_write_data('?');
  80               		.loc 1 21 0
  81 004c 8FE3      		ldi r24,lo8(63)
  82 004e 0E94 0000 		call lcd_write_data
  83               	.LVL13:
  84               	.LBB8:
  85               	.LBB9:
  86               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  87               		.loc 2 187 0
  88 0052 2FEF      		ldi r18,lo8(3199999)
  89 0054 83ED      		ldi r24,hi8(3199999)
  90 0056 90E3      		ldi r25,hlo8(3199999)
  91 0058 2150      	1:	subi r18,1
  92 005a 8040      		sbci r24,0
  93 005c 9040      		sbci r25,0
  94 005e 01F4      		brne 1b
  95 0060 00C0      		rjmp .
  96 0062 0000      		nop
  97               	.LVL14:
  98               	.LBE9:
  99               	.LBE8:
  22:main.c        **** 	_delay_ms(1000);
  23:main.c        **** 	
  24:main.c        **** 	//lcd_set_xy(3,1);
  25:main.c        **** 	lcd_write_text_xy(2,1, "Dobrze co tam"); 
 100               		.loc 1 25 0
 101 0064 40E0      		ldi r20,lo8(.LC0)
 102 0066 50E0      		ldi r21,hi8(.LC0)
 103 0068 61E0      		ldi r22,lo8(1)
 104 006a 82E0      		ldi r24,lo8(2)
 105 006c 0E94 0000 		call lcd_write_text_xy
 106               	.LVL15:
 107               	.LBB10:
 108               	.LBB11:
 109               		.loc 2 187 0
 110 0070 2FEF      		ldi r18,lo8(3199999)
 111 0072 83ED      		ldi r24,hi8(3199999)
 112 0074 90E3      		ldi r25,hlo8(3199999)
 113 0076 2150      	1:	subi r18,1
 114 0078 8040      		sbci r24,0
 115 007a 9040      		sbci r25,0
 116 007c 01F4      		brne 1b
 117 007e 00C0      		rjmp .
 118 0080 0000      		nop
 119               	.LVL16:
 120               	.LBE11:
 121               	.LBE10:
  26:main.c        **** 	_delay_ms(1000);
  27:main.c        **** 	lcd_clear();
 122               		.loc 1 27 0
 123 0082 0E94 0000 		call lcd_clear
 124               	.LVL17:
  28:main.c        **** 	//fprintf(&lcd_stream, "Ala ma %d kota", 1);
  29:main.c        **** 	
  30:main.c        **** 	/*
  31:main.c        **** 	for(uint8_t i = 0; i<strlen_P(tekst); i++)
  32:main.c        **** 	{
  33:main.c        **** 		char znak = pgm_read_byte(&tekst[i]);
  34:main.c        **** 		lcd_write_data(znak);
  35:main.c        **** 	}
  36:main.c        **** 	*/
  37:main.c        **** 	//robimy wlasny znak
  38:main.c        **** 	lcd_write_instr(0x40);
 125               		.loc 1 38 0
 126 0086 80E4      		ldi r24,lo8(64)
 127 0088 0E94 0000 		call lcd_write_instr
 128               	.LVL18:
  39:main.c        **** 	/*lcd_write_data(0b00000);
  40:main.c        **** 	lcd_write_data(0b00000);
  41:main.c        **** 	lcd_write_data(0b11111);
  42:main.c        **** 	lcd_write_data(0b00100);
  43:main.c        **** 	lcd_write_data(0b01010);
  44:main.c        **** 	lcd_write_data(0b10001);
  45:main.c        **** 	lcd_write_data(0b00000);
  46:main.c        **** 	lcd_write_data(0b00000);
  47:main.c        **** 	*/
  48:main.c        **** 	lcd_write_data(0b00000);
 129               		.loc 1 48 0
 130 008c 80E0      		ldi r24,0
 131 008e 0E94 0000 		call lcd_write_data
 132               	.LVL19:
  49:main.c        **** 	lcd_write_data(0b00000);
 133               		.loc 1 49 0
 134 0092 80E0      		ldi r24,0
 135 0094 0E94 0000 		call lcd_write_data
 136               	.LVL20:
  50:main.c        **** 	lcd_write_data(0b11111);
 137               		.loc 1 50 0
 138 0098 8FE1      		ldi r24,lo8(31)
 139 009a 0E94 0000 		call lcd_write_data
 140               	.LVL21:
  51:main.c        **** 	lcd_write_data(0b01010);
 141               		.loc 1 51 0
 142 009e 8AE0      		ldi r24,lo8(10)
 143 00a0 0E94 0000 		call lcd_write_data
 144               	.LVL22:
  52:main.c        **** 	lcd_write_data(0b01010);
 145               		.loc 1 52 0
 146 00a4 8AE0      		ldi r24,lo8(10)
 147 00a6 0E94 0000 		call lcd_write_data
 148               	.LVL23:
  53:main.c        **** 	lcd_write_data(0b01010);
 149               		.loc 1 53 0
 150 00aa 8AE0      		ldi r24,lo8(10)
 151 00ac 0E94 0000 		call lcd_write_data
 152               	.LVL24:
  54:main.c        **** 	lcd_write_data(0b00000);
 153               		.loc 1 54 0
 154 00b0 80E0      		ldi r24,0
 155 00b2 0E94 0000 		call lcd_write_data
 156               	.LVL25:
  55:main.c        **** 	lcd_write_data(0b00000);
 157               		.loc 1 55 0
 158 00b6 80E0      		ldi r24,0
 159 00b8 0E94 0000 		call lcd_write_data
 160               	.LVL26:
  56:main.c        **** 	lcd_set_xy(1,1);
 161               		.loc 1 56 0
 162 00bc 61E0      		ldi r22,lo8(1)
 163 00be 81E0      		ldi r24,lo8(1)
 164 00c0 0E94 0000 		call lcd_set_xy
 165               	.LVL27:
  57:main.c        **** 	lcd_write_data(0);
 166               		.loc 1 57 0
 167 00c4 80E0      		ldi r24,0
 168 00c6 0E94 0000 		call lcd_write_data
 169               	.LVL28:
  58:main.c        **** 	blinking(0);
 170               		.loc 1 58 0
 171 00ca 80E0      		ldi r24,0
 172 00cc 0E94 0000 		call blinking
 173               	.LVL29:
  59:main.c        **** 	lcd_clear();
 174               		.loc 1 59 0
 175 00d0 0E94 0000 		call lcd_clear
 176               	.LVL30:
  60:main.c        **** 	lcd_set_xy(16,0);
 177               		.loc 1 60 0
 178 00d4 60E0      		ldi r22,0
 179 00d6 80E1      		ldi r24,lo8(16)
 180 00d8 0E94 0000 		call lcd_set_xy
 181               	.LVL31:
  61:main.c        **** 	fprintf(&lcd_stream, "Technicznie");
 182               		.loc 1 61 0
 183 00dc 60E0      		ldi r22,lo8(lcd_stream)
 184 00de 70E0      		ldi r23,hi8(lcd_stream)
 185 00e0 80E0      		ldi r24,lo8(.LC1)
 186 00e2 90E0      		ldi r25,hi8(.LC1)
 187 00e4 0E94 0000 		call fputs
 188               	.LVL32:
  62:main.c        **** 	lcd_set_xy(16,1);
 189               		.loc 1 62 0
 190 00e8 61E0      		ldi r22,lo8(1)
 191 00ea 80E1      		ldi r24,lo8(16)
 192 00ec 0E94 0000 		call lcd_set_xy
 193               	.LVL33:
  63:main.c        **** 	fprintf(&lcd_stream, "najlepsi");
 194               		.loc 1 63 0
 195 00f0 60E0      		ldi r22,lo8(lcd_stream)
 196 00f2 70E0      		ldi r23,hi8(lcd_stream)
 197 00f4 80E0      		ldi r24,lo8(.LC2)
 198 00f6 90E0      		ldi r25,hi8(.LC2)
 199 00f8 0E94 0000 		call fputs
 200               	.LVL34:
 201               	.L2:
  64:main.c        **** 	while(1)
  65:main.c        **** 	{
  66:main.c        **** 		lcd_write_instr(0b11000);
 202               		.loc 1 66 0 discriminator 1
 203 00fc 88E1      		ldi r24,lo8(24)
 204 00fe 0E94 0000 		call lcd_write_instr
 205               	.LVL35:
 206               	.LBB12:
 207               	.LBB13:
 208               		.loc 2 187 0 discriminator 1
 209 0102 2FEF      		ldi r18,lo8(3199999)
 210 0104 83ED      		ldi r24,hi8(3199999)
 211 0106 90E3      		ldi r25,hlo8(3199999)
 212 0108 2150      	1:	subi r18,1
 213 010a 8040      		sbci r24,0
 214 010c 9040      		sbci r25,0
 215 010e 01F4      		brne 1b
 216 0110 00C0      		rjmp .
 217 0112 0000      		nop
 218 0114 00C0      		rjmp .L2
 219               	.LBE13:
 220               	.LBE12:
 221               		.cfi_endproc
 222               	.LFE8:
 224               	.global	tekst
 225               		.section	.progmem.data,"a",@progbits
 228               	tekst:
 229 0000 416C 6120 		.string	"Ala ma kota"
 229      6D61 206B 
 229      6F74 6100 
 230               	.global	lcd_stream
 231               		.data
 234               	lcd_stream:
 235 0000 0000 00   		.zero	3
 236 0003 02        		.byte	2
 237 0004 0000 0000 		.zero	4
 238 0008 0000      		.word	gs(lcd_puts)
 239 000a 0000      		.word	0
 240 000c 0000      		.word	0
 241               		.text
 242               	.Letext0:
 243               		.file 3 "/usr/lib/avr/include/stdint.h"
 244               		.file 4 "/usr/lib/avr/include/stdio.h"
 245               		.file 5 "lcd.h"
 246               		.file 6 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc1LEyeE.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1LEyeE.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1LEyeE.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1LEyeE.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1LEyeE.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1LEyeE.s:20     .text.startup:0000000000000000 main
     /tmp/cc1LEyeE.s:234    .data:0000000000000000 lcd_stream
     /tmp/cc1LEyeE.s:228    .progmem.data:0000000000000000 tekst

UNDEFINED SYMBOLS
lcdinit
lcd_write_data
lcd_write_text_xy
lcd_clear
lcd_write_instr
lcd_set_xy
blinking
fputs
lcd_puts
__do_copy_data
