
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000037e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000108b  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000871  00000000  00000000  0000153f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038d  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000513  00000000  00000000  000025a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00002ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	41 6c       	ori	r20, 0xC1	; 193
  56:	61 20       	and	r6, r1
  58:	6d 61       	ori	r22, 0x1D	; 29
  5a:	20 6b       	ori	r18, 0xB0	; 176
  5c:	6f 74       	andi	r22, 0x4F	; 79
  5e:	61 00       	.word	0x0061	; ????

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	10 e0       	ldi	r17, 0x00	; 0
  6e:	a0 e6       	ldi	r26, 0x60	; 96
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	ee e7       	ldi	r30, 0x7E	; 126
  74:	f3 e0       	ldi	r31, 0x03	; 3
  76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	a2 39       	cpi	r26, 0x92	; 146
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>
  82:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  86:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <lcd_write_instr>:
#include "lcd.h"

void lcd_write_instr(uint8_t data) //funkcja wysyłająca pojedynczą instrukcję do wyświetlacza↪→
{
	LCD_PORT &= ~(1<<LCD_RS); // zrobilismy zapis 
  8e:	da 98       	cbi	0x1b, 2	; 27
	
	//wysylamy starsza
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
  90:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	28 2f       	mov	r18, r24
  96:	20 7f       	andi	r18, 0xF0	; 240
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	ef e9       	ldi	r30, 0x9F	; 159
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_write_instr+0x14>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <lcd_write_instr+0x1a>
  a8:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
  aa:	db 98       	cbi	0x1b, 3	; 27
  ac:	ef e9       	ldi	r30, 0x9F	; 159
  ae:	ff e0       	ldi	r31, 0x0F	; 15
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_write_instr+0x22>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_write_instr+0x28>
  b6:	00 00       	nop
	_delay_ms(1);
	
	//wysylamy mlodsza
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
  b8:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
  ba:	2b b3       	in	r18, 0x1b	; 27
  bc:	f0 e1       	ldi	r31, 0x10	; 16
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	92 2f       	mov	r25, r18
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	89 2b       	or	r24, r25
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	8f e9       	ldi	r24, 0x9F	; 159
  ce:	9f e0       	ldi	r25, 0x0F	; 15
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_write_instr+0x42>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_write_instr+0x48>
  d6:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
  d8:	db 98       	cbi	0x1b, 3	; 27
  da:	ef e9       	ldi	r30, 0x9F	; 159
  dc:	ff e0       	ldi	r31, 0x0F	; 15
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_write_instr+0x50>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_write_instr+0x56>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <lcd_write_data>:
}


void lcd_write_data(uint8_t data) //funkcja wysyłająca pojedynczą daną do wyświetlacza↪→
{
	LCD_PORT |= (1<<LCD_RS); // ustawiamy 1 
  e8:	da 9a       	sbi	0x1b, 2	; 27
	
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
  ea:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
  ec:	9b b3       	in	r25, 0x1b	; 27
  ee:	28 2f       	mov	r18, r24
  f0:	20 7f       	andi	r18, 0xF0	; 240
  f2:	9f 70       	andi	r25, 0x0F	; 15
  f4:	92 2b       	or	r25, r18
  f6:	9b bb       	out	0x1b, r25	; 27
  f8:	ef e9       	ldi	r30, 0x9F	; 159
  fa:	ff e0       	ldi	r31, 0x0F	; 15
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_write_data+0x14>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_write_data+0x1a>
 102:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 104:	db 98       	cbi	0x1b, 3	; 27
 106:	ef e9       	ldi	r30, 0x9F	; 159
 108:	ff e0       	ldi	r31, 0x0F	; 15
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_write_data+0x22>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_write_data+0x28>
 110:	00 00       	nop
	_delay_ms(1);
	
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 112:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
 114:	2b b3       	in	r18, 0x1b	; 27
 116:	f0 e1       	ldi	r31, 0x10	; 16
 118:	8f 9f       	mul	r24, r31
 11a:	c0 01       	movw	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	92 2f       	mov	r25, r18
 120:	9f 70       	andi	r25, 0x0F	; 15
 122:	89 2b       	or	r24, r25
 124:	8b bb       	out	0x1b, r24	; 27
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_write_data+0x42>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_write_data+0x48>
 130:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 132:	db 98       	cbi	0x1b, 3	; 27
 134:	ef e9       	ldi	r30, 0x9F	; 159
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_write_data+0x50>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_write_data+0x56>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <lcdinit>:
	_delay_ms(1);
}

void lcdinit(void) //inicjalizacja wyswietlacza
{	
	LCD_DDR = 0xff; //ca;y port wyjsciowy
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8a bb       	out	0x1a, r24	; 26
 146:	2f e7       	ldi	r18, 0x7F	; 127
 148:	82 e3       	ldi	r24, 0x32	; 50
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <lcdinit+0xa>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcdinit+0x14>
 156:	00 00       	nop
	_delay_ms(45);
	lcd_write_instr(0x33);
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_write_instr>
	lcd_write_instr(0x32);
 15e:	82 e3       	ldi	r24, 0x32	; 50
 160:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_write_instr>
	
	lcd_write_instr(0x28); //konfiguruje wyswietlacz
 164:	88 e2       	ldi	r24, 0x28	; 40
 166:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_write_instr>
	lcd_write_instr(0x08);
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_write_instr>
	lcd_write_instr(0x01); //czysci
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_write_instr>
	lcd_write_instr(0x06);
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_write_instr>
	lcd_write_instr(0x0f);
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	0c 94 47 00 	jmp	0x8e	; 0x8e <lcd_write_instr>

00000182 <lcd_clear>:
	
}

void lcd_clear(void)
{
	lcd_write_instr(0x01);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0c 94 47 00 	jmp	0x8e	; 0x8e <lcd_write_instr>

00000188 <lcd_set_xy>:
}

void lcd_set_xy(uint8_t x, uint8_t y)
{
	lcd_write_instr(0x80 + x + y * 0x40);
 188:	80 58       	subi	r24, 0x80	; 128
 18a:	90 e4       	ldi	r25, 0x40	; 64
 18c:	69 9f       	mul	r22, r25
 18e:	80 0d       	add	r24, r0
 190:	11 24       	eor	r1, r1
 192:	0c 94 47 00 	jmp	0x8e	; 0x8e <lcd_write_instr>

00000196 <lcd_write_text_xy>:
}

void lcd_write_text_xy(uint8_t x, uint8_t y, char *text)
{
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	8a 01       	movw	r16, r20
	lcd_set_xy(x,y);
 1a0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_set_xy>
 1a4:	e8 01       	movw	r28, r16
	while(*text){
 1a6:	89 91       	ld	r24, Y+
 1a8:	88 23       	and	r24, r24
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <lcd_write_text_xy+0x1c>
		lcd_write_data(*text);
 1ac:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
 1b0:	fa cf       	rjmp	.-12     	; 0x1a6 <lcd_write_text_xy+0x10>
		text++;
	}
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <lcd_puts>:

int lcd_puts(char c, FILE *unused)
{
	lcd_write_data(c);
 1bc:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	return 0;
}
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret

000001c6 <blinking>:

void blinking(uint8_t t){
	if(t == 0 )
 1c6:	81 11       	cpse	r24, r1
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <blinking+0x8>
		lcd_write_instr(0b1100);
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <blinking+0xe>
	if(t == 1)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <blinking+0x12>
		lcd_write_instr(0b1111);
 1d2:	8f e0       	ldi	r24, 0x0F	; 15
 1d4:	0c 94 47 00 	jmp	0x8e	; 0x8e <lcd_write_instr>
 1d8:	08 95       	ret

000001da <main>:
#include <avr/pgmspace.h> //zeby byl progmem
FILE lcd_stream = FDEV_SETUP_STREAM(lcd_puts, NULL, _FDEV_SETUP_WRITE);
const char tekst[] PROGMEM = "Ala ma kota"; //progmem kluczowy zeby byl we flashu

int main(void){
	lcdinit();
 1da:	0e 94 a1 00 	call	0x142	; 0x142 <lcdinit>
	lcd_write_data('S');
 1de:	83 e5       	ldi	r24, 0x53	; 83
 1e0:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('i');
 1e4:	89 e6       	ldi	r24, 0x69	; 105
 1e6:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('e');
 1ea:	85 e6       	ldi	r24, 0x65	; 101
 1ec:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('m');
 1f0:	8d e6       	ldi	r24, 0x6D	; 109
 1f2:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('a');
 1f6:	81 e6       	ldi	r24, 0x61	; 97
 1f8:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data(' ');
 1fc:	80 e2       	ldi	r24, 0x20	; 32
 1fe:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('c');
 202:	83 e6       	ldi	r24, 0x63	; 99
 204:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('o');
 208:	8f e6       	ldi	r24, 0x6F	; 111
 20a:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data(' ');
 20e:	80 e2       	ldi	r24, 0x20	; 32
 210:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('t');
 214:	84 e7       	ldi	r24, 0x74	; 116
 216:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('a');
 21a:	81 e6       	ldi	r24, 0x61	; 97
 21c:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('m');
 220:	8d e6       	ldi	r24, 0x6D	; 109
 222:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data('?');
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	83 ed       	ldi	r24, 0xD3	; 211
 230:	90 e3       	ldi	r25, 0x30	; 48
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x58>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x62>
 23c:	00 00       	nop
	_delay_ms(1000);
	
	//lcd_set_xy(3,1);
	lcd_write_text_xy(2,1, "Dobrze co tam"); 
 23e:	4e e6       	ldi	r20, 0x6E	; 110
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_write_text_xy>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	83 ed       	ldi	r24, 0xD3	; 211
 24e:	90 e3       	ldi	r25, 0x30	; 48
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x76>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x80>
 25a:	00 00       	nop
	_delay_ms(1000);
	lcd_clear();
 25c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_clear>
		char znak = pgm_read_byte(&tekst[i]);
		lcd_write_data(znak);
	}
	*/
	//robimy wlasny znak
	lcd_write_instr(0x40);
 260:	80 e4       	ldi	r24, 0x40	; 64
 262:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_write_instr>
	lcd_write_data(0b01010);
	lcd_write_data(0b10001);
	lcd_write_data(0b00000);
	lcd_write_data(0b00000);
	*/
	lcd_write_data(0b00000);
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data(0b00000);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data(0b11111);
 272:	8f e1       	ldi	r24, 0x1F	; 31
 274:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data(0b01010);
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data(0b01010);
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data(0b01010);
 284:	8a e0       	ldi	r24, 0x0A	; 10
 286:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data(0b00000);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_write_data(0b00000);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	lcd_set_xy(1,1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_set_xy>
	lcd_write_data(0);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_data>
	blinking(0);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <blinking>
	lcd_clear();
 2aa:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_clear>
	lcd_set_xy(16,0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	80 e1       	ldi	r24, 0x10	; 16
 2b2:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_set_xy>
	fprintf(&lcd_stream, "Technicznie");
 2b6:	60 e6       	ldi	r22, 0x60	; 96
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	8c e7       	ldi	r24, 0x7C	; 124
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 78 01 	call	0x2f0	; 0x2f0 <fputs>
	lcd_set_xy(16,1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	80 e1       	ldi	r24, 0x10	; 16
 2c6:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_set_xy>
	fprintf(&lcd_stream, "najlepsi");
 2ca:	60 e6       	ldi	r22, 0x60	; 96
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	88 e8       	ldi	r24, 0x88	; 136
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <fputs>
	while(1)
	{
		lcd_write_instr(0b11000);
 2d6:	88 e1       	ldi	r24, 0x18	; 24
 2d8:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_write_instr>
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	83 ed       	ldi	r24, 0xD3	; 211
 2e0:	90 e3       	ldi	r25, 0x30	; 48
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x108>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x112>
 2ec:	00 00       	nop
 2ee:	f3 cf       	rjmp	.-26     	; 0x2d6 <main+0xfc>

000002f0 <fputs>:
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	db 01       	movw	r26, r22
 2fe:	13 96       	adiw	r26, 0x03	; 3
 300:	2c 91       	ld	r18, X
 302:	21 ff       	sbrs	r18, 1
 304:	18 c0       	rjmp	.+48     	; 0x336 <fputs+0x46>
 306:	8b 01       	movw	r16, r22
 308:	7c 01       	movw	r14, r24
 30a:	d0 e0       	ldi	r29, 0x00	; 0
 30c:	c0 e0       	ldi	r28, 0x00	; 0
 30e:	f7 01       	movw	r30, r14
 310:	81 91       	ld	r24, Z+
 312:	7f 01       	movw	r14, r30
 314:	88 23       	and	r24, r24
 316:	61 f0       	breq	.+24     	; 0x330 <fputs+0x40>
 318:	d8 01       	movw	r26, r16
 31a:	18 96       	adiw	r26, 0x08	; 8
 31c:	ed 91       	ld	r30, X+
 31e:	fc 91       	ld	r31, X
 320:	19 97       	sbiw	r26, 0x09	; 9
 322:	b8 01       	movw	r22, r16
 324:	09 95       	icall
 326:	89 2b       	or	r24, r25
 328:	91 f3       	breq	.-28     	; 0x30e <fputs+0x1e>
 32a:	df ef       	ldi	r29, 0xFF	; 255
 32c:	cf ef       	ldi	r28, 0xFF	; 255
 32e:	ef cf       	rjmp	.-34     	; 0x30e <fputs+0x1e>
 330:	8d 2f       	mov	r24, r29
 332:	9c 2f       	mov	r25, r28
 334:	02 c0       	rjmp	.+4      	; 0x33a <fputs+0x4a>
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	9f ef       	ldi	r25, 0xFF	; 255
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	e6 e0       	ldi	r30, 0x06	; 6
 340:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__epilogue_restores__+0x18>

00000344 <__epilogue_restores__>:
 344:	2a 88       	ldd	r2, Y+18	; 0x12
 346:	39 88       	ldd	r3, Y+17	; 0x11
 348:	48 88       	ldd	r4, Y+16	; 0x10
 34a:	5f 84       	ldd	r5, Y+15	; 0x0f
 34c:	6e 84       	ldd	r6, Y+14	; 0x0e
 34e:	7d 84       	ldd	r7, Y+13	; 0x0d
 350:	8c 84       	ldd	r8, Y+12	; 0x0c
 352:	9b 84       	ldd	r9, Y+11	; 0x0b
 354:	aa 84       	ldd	r10, Y+10	; 0x0a
 356:	b9 84       	ldd	r11, Y+9	; 0x09
 358:	c8 84       	ldd	r12, Y+8	; 0x08
 35a:	df 80       	ldd	r13, Y+7	; 0x07
 35c:	ee 80       	ldd	r14, Y+6	; 0x06
 35e:	fd 80       	ldd	r15, Y+5	; 0x05
 360:	0c 81       	ldd	r16, Y+4	; 0x04
 362:	1b 81       	ldd	r17, Y+3	; 0x03
 364:	aa 81       	ldd	r26, Y+2	; 0x02
 366:	b9 81       	ldd	r27, Y+1	; 0x01
 368:	ce 0f       	add	r28, r30
 36a:	d1 1d       	adc	r29, r1
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	ed 01       	movw	r28, r26
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
