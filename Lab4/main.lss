
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000234  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006a  0080006a  000002d2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005f7  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000545  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000013d  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002bd  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ed  00000000  00000000  00001321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  8a:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:
#include <util/delay.h> 

uint16_t count;
uint8_t digits[10] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
uint8_t d;
ISR(TIMER1_COMPA_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	count--;
  a0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
  a4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <count+0x1>
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <count+0x1>
  ae:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <count>
	if(count == 0){
  b2:	89 2b       	or	r24, r25
  b4:	11 f4       	brne	.+4      	; 0xba <__vector_7+0x28>
		PORTB = 0x00;
  b6:	18 ba       	out	0x18, r1	; 24
		//_delay_ms(1000);
		TCCR1B =0;
  b8:	1e bc       	out	0x2e, r1	; 46
	}
		
}
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <__vector_10>:

ISR(TIMER0_COMP_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	d++;
  e4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
	if (d == 4){
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	19 f0       	breq	.+6      	; 0xf4 <__vector_10+0x2c>
	}
		
}

ISR(TIMER0_COMP_vect){
	d++;
  ee:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__vector_10+0x30>
	if (d == 4){
		d = 0;
  f4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
	}
	PORTC = ~(1<<d);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	00 90 6a 00 	lds	r0, 0x006A	; 0x80006a <__data_end>
 100:	02 c0       	rjmp	.+4      	; 0x106 <__vector_10+0x3e>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <__vector_10+0x3a>
 10a:	80 95       	com	r24
 10c:	85 bb       	out	0x15, r24	; 21
	
	if(d == 0){
 10e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 112:	81 11       	cpse	r24, r1
 114:	0d c0       	rjmp	.+26     	; 0x130 <__vector_10+0x68>
		PORTD = digits[count%10];
 116:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
 11a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <count+0x1>
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 126:	fc 01       	movw	r30, r24
 128:	e0 5a       	subi	r30, 0xA0	; 160
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
 12e:	82 bb       	out	0x12, r24	; 18
	}
	if( d == 1){
 130:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	89 f4       	brne	.+34     	; 0x15a <__vector_10+0x92>
		PORTD = digits[(count%100)/10];
 138:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
 13c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <count+0x1>
 140:	64 e6       	ldi	r22, 0x64	; 100
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 148:	6a e0       	ldi	r22, 0x0A	; 10
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 150:	fb 01       	movw	r30, r22
 152:	e0 5a       	subi	r30, 0xA0	; 160
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	80 81       	ld	r24, Z
 158:	82 bb       	out	0x12, r24	; 18
	}
	if (d == 2){
 15a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	89 f4       	brne	.+34     	; 0x184 <__vector_10+0xbc>
		PORTD = digits[(count%1000)/100];
 162:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
 166:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <count+0x1>
 16a:	68 ee       	ldi	r22, 0xE8	; 232
 16c:	73 e0       	ldi	r23, 0x03	; 3
 16e:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 172:	64 e6       	ldi	r22, 0x64	; 100
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 17a:	fb 01       	movw	r30, r22
 17c:	e0 5a       	subi	r30, 0xA0	; 160
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 81       	ld	r24, Z
 182:	82 bb       	out	0x12, r24	; 18
	}
	if ( d==3 ){
 184:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	89 f4       	brne	.+34     	; 0x1ae <__vector_10+0xe6>
		PORTD = digits[(count%10000)/1000];
 18c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
 190:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <count+0x1>
 194:	60 e1       	ldi	r22, 0x10	; 16
 196:	77 e2       	ldi	r23, 0x27	; 39
 198:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 19c:	68 ee       	ldi	r22, 0xE8	; 232
 19e:	73 e0       	ldi	r23, 0x03	; 3
 1a0:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 1a4:	fb 01       	movw	r30, r22
 1a6:	e0 5a       	subi	r30, 0xA0	; 160
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
 1ac:	82 bb       	out	0x12, r24	; 18
	}
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <main>:
int main(void){
	count = 1000;
 1ca:	88 ee       	ldi	r24, 0xE8	; 232
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <count+0x1>
 1d2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <count>
	//wejscie wyjscie
	DDRC = 0xff;
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;
 1da:	81 bb       	out	0x11, r24	; 17
	//brzeczyk
	DDRB = 0xff;
 1dc:	87 bb       	out	0x17, r24	; 23
	PORTB=0xff;
 1de:	88 bb       	out	0x18, r24	; 24
	//wgm daje tryb a CS daje prescaler
	TCCR1B |= (1<<WGM12)|(1<<CS10);
 1e0:	8e b5       	in	r24, 0x2e	; 46
 1e2:	89 60       	ori	r24, 0x09	; 9
 1e4:	8e bd       	out	0x2e, r24	; 46
	//bit porownawczy
	OCR1A = 16000; //skok o sekunde
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	9e e3       	ldi	r25, 0x3E	; 62
 1ea:	9b bd       	out	0x2b, r25	; 43
 1ec:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1<< OCIE1A);
 1ee:	89 b7       	in	r24, 0x39	; 57
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	89 bf       	out	0x39, r24	; 57
	
	//drugi interrupt
	OCR0 = 39; //200 razy na sekunde
 1f4:	87 e2       	ldi	r24, 0x27	; 39
 1f6:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00); //CTC i prescaler
 1f8:	83 b7       	in	r24, 0x33	; 51
 1fa:	8d 60       	ori	r24, 0x0D	; 13
 1fc:	83 bf       	out	0x33, r24	; 51
	TIMSK |=(1<<OCIE0);
 1fe:	89 b7       	in	r24, 0x39	; 57
 200:	82 60       	ori	r24, 0x02	; 2
 202:	89 bf       	out	0x39, r24	; 57
	
	sei();
 204:	78 94       	sei
 206:	ff cf       	rjmp	.-2      	; 0x206 <main+0x3c>

00000208 <__udivmodhi4>:
 208:	aa 1b       	sub	r26, r26
 20a:	bb 1b       	sub	r27, r27
 20c:	51 e1       	ldi	r21, 0x11	; 17
 20e:	07 c0       	rjmp	.+14     	; 0x21e <__udivmodhi4_ep>

00000210 <__udivmodhi4_loop>:
 210:	aa 1f       	adc	r26, r26
 212:	bb 1f       	adc	r27, r27
 214:	a6 17       	cp	r26, r22
 216:	b7 07       	cpc	r27, r23
 218:	10 f0       	brcs	.+4      	; 0x21e <__udivmodhi4_ep>
 21a:	a6 1b       	sub	r26, r22
 21c:	b7 0b       	sbc	r27, r23

0000021e <__udivmodhi4_ep>:
 21e:	88 1f       	adc	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	5a 95       	dec	r21
 224:	a9 f7       	brne	.-22     	; 0x210 <__udivmodhi4_loop>
 226:	80 95       	com	r24
 228:	90 95       	com	r25
 22a:	bc 01       	movw	r22, r24
 22c:	cd 01       	movw	r24, r26
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
