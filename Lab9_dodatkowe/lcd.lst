   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	lcd_write_instr
  12               	lcd_write_instr:
  13               	.LFB7:
  14               		.file 1 "lcd.c"
   1:lcd.c         **** #include "lcd.h"
   2:lcd.c         **** 
   3:lcd.c         **** void lcd_write_instr(uint8_t data) //funkcja wysyÅ‚ajÄ…ca pojedynczÄ… instrukcjÄ™ do wyÅ›wietlaczaâ
   4:lcd.c         **** {
  15               		.loc 1 4 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
   5:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_RS); // zrobilismy zapis 
  22               		.loc 1 5 0
  23 0000 DA98      		cbi 0x1b,2
   6:lcd.c         **** 	
   7:lcd.c         **** 	//wysylamy starsza
   8:lcd.c         **** 	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
  24               		.loc 1 8 0
  25 0002 DB9A      		sbi 0x1b,3
   9:lcd.c         **** 	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
  26               		.loc 1 9 0
  27 0004 9BB3      		in r25,0x1b
  28 0006 282F      		mov r18,r24
  29 0008 207F      		andi r18,lo8(-16)
  30 000a 9F70      		andi r25,lo8(15)
  31 000c 922B      		or r25,r18
  32 000e 9BBB      		out 0x1b,r25
  33               	.LVL1:
  34               	.LBB20:
  35               	.LBB21:
  36               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  37               		.loc 2 187 0
  38 0010 EFE9      		ldi r30,lo8(3999)
  39 0012 FFE0      		ldi r31,hi8(3999)
  40 0014 3197      	1:	sbiw r30,1
  41 0016 01F4      		brne 1b
  42 0018 00C0      		rjmp .
  43 001a 0000      		nop
  44               	.LVL2:
  45               	.LBE21:
  46               	.LBE20:
  10:lcd.c         **** 	_delay_ms(1);
  11:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_E);
  47               		.loc 1 11 0
  48 001c DB98      		cbi 0x1b,3
  49               	.LVL3:
  50               	.LBB22:
  51               	.LBB23:
  52               		.loc 2 187 0
  53 001e EFE9      		ldi r30,lo8(3999)
  54 0020 FFE0      		ldi r31,hi8(3999)
  55 0022 3197      	1:	sbiw r30,1
  56 0024 01F4      		brne 1b
  57 0026 00C0      		rjmp .
  58 0028 0000      		nop
  59               	.LVL4:
  60               	.LBE23:
  61               	.LBE22:
  12:lcd.c         **** 	_delay_ms(1);
  13:lcd.c         **** 	
  14:lcd.c         **** 	//wysylamy mlodsza
  15:lcd.c         **** 	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
  62               		.loc 1 15 0
  63 002a DB9A      		sbi 0x1b,3
  16:lcd.c         **** 	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
  64               		.loc 1 16 0
  65 002c 2BB3      		in r18,0x1b
  66 002e F0E1      		ldi r31,lo8(16)
  67 0030 8F9F      		mul r24,r31
  68 0032 C001      		movw r24,r0
  69 0034 1124      		clr __zero_reg__
  70               	.LVL5:
  71 0036 922F      		mov r25,r18
  72 0038 9F70      		andi r25,lo8(15)
  73 003a 892B      		or r24,r25
  74 003c 8BBB      		out 0x1b,r24
  75               	.LVL6:
  76               	.LBB24:
  77               	.LBB25:
  78               		.loc 2 187 0
  79 003e 8FE9      		ldi r24,lo8(3999)
  80 0040 9FE0      		ldi r25,hi8(3999)
  81 0042 0197      	1:	sbiw r24,1
  82 0044 01F4      		brne 1b
  83 0046 00C0      		rjmp .
  84 0048 0000      		nop
  85               	.LVL7:
  86               	.LBE25:
  87               	.LBE24:
  17:lcd.c         **** 	_delay_ms(1);
  18:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_E);
  88               		.loc 1 18 0
  89 004a DB98      		cbi 0x1b,3
  90               	.LVL8:
  91               	.LBB26:
  92               	.LBB27:
  93               		.loc 2 187 0
  94 004c EFE9      		ldi r30,lo8(3999)
  95 004e FFE0      		ldi r31,hi8(3999)
  96 0050 3197      	1:	sbiw r30,1
  97 0052 01F4      		brne 1b
  98 0054 00C0      		rjmp .
  99 0056 0000      		nop
 100               	.LVL9:
 101 0058 0895      		ret
 102               	.LBE27:
 103               	.LBE26:
 104               		.cfi_endproc
 105               	.LFE7:
 107               	.global	lcd_write_data
 109               	lcd_write_data:
 110               	.LFB8:
  19:lcd.c         **** 	_delay_ms(1);
  20:lcd.c         **** 	
  21:lcd.c         **** 	
  22:lcd.c         **** }
  23:lcd.c         **** 
  24:lcd.c         **** 
  25:lcd.c         **** void lcd_write_data(uint8_t data) //funkcja wysyÅ‚ajÄ…ca pojedynczÄ… danÄ… do wyÅ›wietlaczaâ†ªâ†’
  26:lcd.c         **** {
 111               		.loc 1 26 0
 112               		.cfi_startproc
 113               	.LVL10:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
  27:lcd.c         **** 	LCD_PORT |= (1<<LCD_RS); // ustawiamy 1 
 118               		.loc 1 27 0
 119 005a DA9A      		sbi 0x1b,2
  28:lcd.c         **** 	
  29:lcd.c         **** 	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 120               		.loc 1 29 0
 121 005c DB9A      		sbi 0x1b,3
  30:lcd.c         **** 	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
 122               		.loc 1 30 0
 123 005e 9BB3      		in r25,0x1b
 124 0060 282F      		mov r18,r24
 125 0062 207F      		andi r18,lo8(-16)
 126 0064 9F70      		andi r25,lo8(15)
 127 0066 922B      		or r25,r18
 128 0068 9BBB      		out 0x1b,r25
 129               	.LVL11:
 130               	.LBB28:
 131               	.LBB29:
 132               		.loc 2 187 0
 133 006a EFE9      		ldi r30,lo8(3999)
 134 006c FFE0      		ldi r31,hi8(3999)
 135 006e 3197      	1:	sbiw r30,1
 136 0070 01F4      		brne 1b
 137 0072 00C0      		rjmp .
 138 0074 0000      		nop
 139               	.LVL12:
 140               	.LBE29:
 141               	.LBE28:
  31:lcd.c         **** 	_delay_ms(1);
  32:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_E);
 142               		.loc 1 32 0
 143 0076 DB98      		cbi 0x1b,3
 144               	.LVL13:
 145               	.LBB30:
 146               	.LBB31:
 147               		.loc 2 187 0
 148 0078 EFE9      		ldi r30,lo8(3999)
 149 007a FFE0      		ldi r31,hi8(3999)
 150 007c 3197      	1:	sbiw r30,1
 151 007e 01F4      		brne 1b
 152 0080 00C0      		rjmp .
 153 0082 0000      		nop
 154               	.LVL14:
 155               	.LBE31:
 156               	.LBE30:
  33:lcd.c         **** 	_delay_ms(1);
  34:lcd.c         **** 	
  35:lcd.c         **** 	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 157               		.loc 1 35 0
 158 0084 DB9A      		sbi 0x1b,3
  36:lcd.c         **** 	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
 159               		.loc 1 36 0
 160 0086 2BB3      		in r18,0x1b
 161 0088 F0E1      		ldi r31,lo8(16)
 162 008a 8F9F      		mul r24,r31
 163 008c C001      		movw r24,r0
 164 008e 1124      		clr __zero_reg__
 165               	.LVL15:
 166 0090 922F      		mov r25,r18
 167 0092 9F70      		andi r25,lo8(15)
 168 0094 892B      		or r24,r25
 169 0096 8BBB      		out 0x1b,r24
 170               	.LVL16:
 171               	.LBB32:
 172               	.LBB33:
 173               		.loc 2 187 0
 174 0098 8FE9      		ldi r24,lo8(3999)
 175 009a 9FE0      		ldi r25,hi8(3999)
 176 009c 0197      	1:	sbiw r24,1
 177 009e 01F4      		brne 1b
 178 00a0 00C0      		rjmp .
 179 00a2 0000      		nop
 180               	.LVL17:
 181               	.LBE33:
 182               	.LBE32:
  37:lcd.c         **** 	_delay_ms(1);
  38:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_E);
 183               		.loc 1 38 0
 184 00a4 DB98      		cbi 0x1b,3
 185               	.LVL18:
 186               	.LBB34:
 187               	.LBB35:
 188               		.loc 2 187 0
 189 00a6 EFE9      		ldi r30,lo8(3999)
 190 00a8 FFE0      		ldi r31,hi8(3999)
 191 00aa 3197      	1:	sbiw r30,1
 192 00ac 01F4      		brne 1b
 193 00ae 00C0      		rjmp .
 194 00b0 0000      		nop
 195               	.LVL19:
 196 00b2 0895      		ret
 197               	.LBE35:
 198               	.LBE34:
 199               		.cfi_endproc
 200               	.LFE8:
 202               	.global	lcdinit
 204               	lcdinit:
 205               	.LFB9:
  39:lcd.c         **** 	_delay_ms(1);
  40:lcd.c         **** }
  41:lcd.c         **** 
  42:lcd.c         **** void lcdinit(void) //inicjalizacja wyswietlacza
  43:lcd.c         **** {	
 206               		.loc 1 43 0
 207               		.cfi_startproc
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
  44:lcd.c         **** 	LCD_DDR = 0xff; //ca;y port wyjsciowy
 212               		.loc 1 44 0
 213 00b4 8FEF      		ldi r24,lo8(-1)
 214 00b6 8ABB      		out 0x1a,r24
 215               	.LVL20:
 216               	.LBB36:
 217               	.LBB37:
 218               		.loc 2 187 0
 219 00b8 2FE7      		ldi r18,lo8(143999)
 220 00ba 82E3      		ldi r24,hi8(143999)
 221 00bc 92E0      		ldi r25,hlo8(143999)
 222 00be 2150      	1:	subi r18,1
 223 00c0 8040      		sbci r24,0
 224 00c2 9040      		sbci r25,0
 225 00c4 01F4      		brne 1b
 226 00c6 00C0      		rjmp .
 227 00c8 0000      		nop
 228               	.LVL21:
 229               	.LBE37:
 230               	.LBE36:
  45:lcd.c         **** 	_delay_ms(45);
  46:lcd.c         **** 	lcd_write_instr(0x33);
 231               		.loc 1 46 0
 232 00ca 83E3      		ldi r24,lo8(51)
 233 00cc 0E94 0000 		call lcd_write_instr
 234               	.LVL22:
  47:lcd.c         **** 	lcd_write_instr(0x32);
 235               		.loc 1 47 0
 236 00d0 82E3      		ldi r24,lo8(50)
 237 00d2 0E94 0000 		call lcd_write_instr
 238               	.LVL23:
  48:lcd.c         **** 	
  49:lcd.c         **** 	lcd_write_instr(0x28); //konfiguruje wyswietlacz
 239               		.loc 1 49 0
 240 00d6 88E2      		ldi r24,lo8(40)
 241 00d8 0E94 0000 		call lcd_write_instr
 242               	.LVL24:
  50:lcd.c         **** 	lcd_write_instr(0x08);
 243               		.loc 1 50 0
 244 00dc 88E0      		ldi r24,lo8(8)
 245 00de 0E94 0000 		call lcd_write_instr
 246               	.LVL25:
  51:lcd.c         **** 	lcd_write_instr(0x01); //czysci
 247               		.loc 1 51 0
 248 00e2 81E0      		ldi r24,lo8(1)
 249 00e4 0E94 0000 		call lcd_write_instr
 250               	.LVL26:
  52:lcd.c         **** 	lcd_write_instr(0x06);
 251               		.loc 1 52 0
 252 00e8 86E0      		ldi r24,lo8(6)
 253 00ea 0E94 0000 		call lcd_write_instr
 254               	.LVL27:
  53:lcd.c         **** 	lcd_write_instr(0x0f);
 255               		.loc 1 53 0
 256 00ee 8FE0      		ldi r24,lo8(15)
 257 00f0 0C94 0000 		jmp lcd_write_instr
 258               	.LVL28:
 259               		.cfi_endproc
 260               	.LFE9:
 262               	.global	lcd_clear
 264               	lcd_clear:
 265               	.LFB10:
  54:lcd.c         **** 	
  55:lcd.c         **** }
  56:lcd.c         **** 
  57:lcd.c         **** void lcd_clear(void)
  58:lcd.c         **** {
 266               		.loc 1 58 0
 267               		.cfi_startproc
 268               	/* prologue: function */
 269               	/* frame size = 0 */
 270               	/* stack size = 0 */
 271               	.L__stack_usage = 0
  59:lcd.c         **** 	lcd_write_instr(0x01);
 272               		.loc 1 59 0
 273 00f4 81E0      		ldi r24,lo8(1)
 274 00f6 0C94 0000 		jmp lcd_write_instr
 275               	.LVL29:
 276               		.cfi_endproc
 277               	.LFE10:
 279               	.global	lcd_set_xy
 281               	lcd_set_xy:
 282               	.LFB11:
  60:lcd.c         **** }
  61:lcd.c         **** 
  62:lcd.c         **** void lcd_set_xy(uint8_t x, uint8_t y)
  63:lcd.c         **** {
 283               		.loc 1 63 0
 284               		.cfi_startproc
 285               	.LVL30:
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
  64:lcd.c         **** 	lcd_write_instr(0x80 + x + y * 0x40);
 290               		.loc 1 64 0
 291 00fa 8058      		subi r24,lo8(-(-128))
 292               	.LVL31:
 293 00fc 90E4      		ldi r25,lo8(64)
 294 00fe 699F      		mul r22,r25
 295 0100 800D      		add r24,r0
 296 0102 1124      		clr __zero_reg__
 297               	.LVL32:
 298 0104 0C94 0000 		jmp lcd_write_instr
 299               	.LVL33:
 300               		.cfi_endproc
 301               	.LFE11:
 303               	.global	lcd_write_text_xy
 305               	lcd_write_text_xy:
 306               	.LFB12:
  65:lcd.c         **** }
  66:lcd.c         **** 
  67:lcd.c         **** void lcd_write_text_xy(uint8_t x, uint8_t y, char *text)
  68:lcd.c         **** {
 307               		.loc 1 68 0
 308               		.cfi_startproc
 309               	.LVL34:
 310 0108 0F93      		push r16
 311               	.LCFI0:
 312               		.cfi_def_cfa_offset 3
 313               		.cfi_offset 16, -2
 314 010a 1F93      		push r17
 315               	.LCFI1:
 316               		.cfi_def_cfa_offset 4
 317               		.cfi_offset 17, -3
 318 010c CF93      		push r28
 319               	.LCFI2:
 320               		.cfi_def_cfa_offset 5
 321               		.cfi_offset 28, -4
 322 010e DF93      		push r29
 323               	.LCFI3:
 324               		.cfi_def_cfa_offset 6
 325               		.cfi_offset 29, -5
 326               	/* prologue: function */
 327               	/* frame size = 0 */
 328               	/* stack size = 4 */
 329               	.L__stack_usage = 4
 330 0110 8A01      		movw r16,r20
  69:lcd.c         **** 	lcd_set_xy(x,y);
 331               		.loc 1 69 0
 332 0112 0E94 0000 		call lcd_set_xy
 333               	.LVL35:
 334 0116 E801      		movw r28,r16
 335               	.LVL36:
 336               	.L7:
  70:lcd.c         **** 	while(*text){
 337               		.loc 1 70 0
 338 0118 8991      		ld r24,Y+
 339               	.LVL37:
 340 011a 8823      		tst r24
 341 011c 01F0      		breq .L10
  71:lcd.c         **** 		lcd_write_data(*text);
 342               		.loc 1 71 0
 343 011e 0E94 0000 		call lcd_write_data
 344               	.LVL38:
 345 0122 00C0      		rjmp .L7
 346               	.LVL39:
 347               	.L10:
 348               	/* epilogue start */
  72:lcd.c         **** 		text++;
  73:lcd.c         **** 	}
  74:lcd.c         **** }
 349               		.loc 1 74 0
 350 0124 DF91      		pop r29
 351 0126 CF91      		pop r28
 352               	.LVL40:
 353 0128 1F91      		pop r17
 354 012a 0F91      		pop r16
 355 012c 0895      		ret
 356               		.cfi_endproc
 357               	.LFE12:
 359               	.global	lcd_puts
 361               	lcd_puts:
 362               	.LFB13:
  75:lcd.c         **** 
  76:lcd.c         **** int lcd_puts(char c, FILE *unused)
  77:lcd.c         **** {
 363               		.loc 1 77 0
 364               		.cfi_startproc
 365               	.LVL41:
 366               	/* prologue: function */
 367               	/* frame size = 0 */
 368               	/* stack size = 0 */
 369               	.L__stack_usage = 0
  78:lcd.c         **** 	lcd_write_data(c);
 370               		.loc 1 78 0
 371 012e 0E94 0000 		call lcd_write_data
 372               	.LVL42:
  79:lcd.c         **** 	return 0;
  80:lcd.c         **** }
 373               		.loc 1 80 0
 374 0132 80E0      		ldi r24,0
 375 0134 90E0      		ldi r25,0
 376 0136 0895      		ret
 377               		.cfi_endproc
 378               	.LFE13:
 380               	.global	blinking
 382               	blinking:
 383               	.LFB14:
  81:lcd.c         **** 
  82:lcd.c         **** void blinking(uint8_t t){
 384               		.loc 1 82 0
 385               		.cfi_startproc
 386               	.LVL43:
 387               	/* prologue: function */
 388               	/* frame size = 0 */
 389               	/* stack size = 0 */
 390               	.L__stack_usage = 0
  83:lcd.c         **** 	if(t == 0 )
 391               		.loc 1 83 0
 392 0138 8111      		cpse r24,__zero_reg__
 393 013a 00C0      		rjmp .L13
  84:lcd.c         **** 		lcd_write_instr(0b1100);
 394               		.loc 1 84 0
 395 013c 8CE0      		ldi r24,lo8(12)
 396               	.LVL44:
 397 013e 00C0      		rjmp .L15
 398               	.LVL45:
 399               	.L13:
  85:lcd.c         **** 	if(t == 1)
 400               		.loc 1 85 0
 401 0140 8130      		cpi r24,lo8(1)
 402 0142 01F4      		brne .L12
  86:lcd.c         **** 		lcd_write_instr(0b1111);
 403               		.loc 1 86 0
 404 0144 8FE0      		ldi r24,lo8(15)
 405               	.LVL46:
 406               	.L15:
 407 0146 0C94 0000 		jmp lcd_write_instr
 408               	.LVL47:
 409               	.L12:
 410 014a 0895      		ret
 411               		.cfi_endproc
 412               	.LFE14:
 414               	.Letext0:
 415               		.file 3 "/usr/lib/avr/include/stdint.h"
 416               		.file 4 "/usr/lib/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccD7e6xM.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccD7e6xM.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccD7e6xM.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccD7e6xM.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccD7e6xM.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccD7e6xM.s:12     .text:0000000000000000 lcd_write_instr
     /tmp/ccD7e6xM.s:109    .text:000000000000005a lcd_write_data
     /tmp/ccD7e6xM.s:204    .text:00000000000000b4 lcdinit
     /tmp/ccD7e6xM.s:264    .text:00000000000000f4 lcd_clear
     /tmp/ccD7e6xM.s:281    .text:00000000000000fa lcd_set_xy
     /tmp/ccD7e6xM.s:305    .text:0000000000000108 lcd_write_text_xy
     /tmp/ccD7e6xM.s:361    .text:000000000000012e lcd_puts
     /tmp/ccD7e6xM.s:382    .text:0000000000000138 blinking

NO UNDEFINED SYMBOLS
