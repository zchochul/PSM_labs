
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000a30  00000ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000a0  008000a0  00000b04  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e6  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afb  00000000  00000000  00001fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ec  00000000  00000000  00002abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b53  00000000  00000000  00003756  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000042a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_13>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	41 6c       	ori	r20, 0xC1	; 193
  56:	61 20       	and	r6, r1
  58:	6d 61       	ori	r22, 0x1D	; 29
  5a:	20 6b       	ori	r18, 0xB0	; 176
  5c:	6f 74       	andi	r22, 0x4F	; 79
  5e:	61 00       	.word	0x0061	; ????

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	10 e0       	ldi	r17, 0x00	; 0
  6e:	a0 e6       	ldi	r26, 0x60	; 96
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	e0 e3       	ldi	r30, 0x30	; 48
  74:	fa e0       	ldi	r31, 0x0A	; 10
  76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	a0 3a       	cpi	r26, 0xA0	; 160
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	a0 ea       	ldi	r26, 0xA0	; 160
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a0 3b       	cpi	r26, 0xB0	; 176
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 c2 01 	call	0x384	; 0x384 <main>
  96:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <__vector_13>:
uint8_t bufor[10];
uint8_t i;
uint8_t star;;
uint16_t mlod;

ISR(USART_RXC_vect){
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	5f 93       	push	r21
  b0:	6f 93       	push	r22
  b2:	7f 93       	push	r23
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
	bufor[i]=UDR;
  c0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <i>
  c4:	9c b1       	in	r25, 0x0c	; 12
  c6:	e8 2f       	mov	r30, r24
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ec 55       	subi	r30, 0x5C	; 92
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	90 83       	st	Z, r25
	if(bufor[i] == '\n' || bufor[i] == '\r'){
  d0:	9a 30       	cpi	r25, 0x0A	; 10
  d2:	11 f0       	breq	.+4      	; 0xd8 <__vector_13+0x3a>
  d4:	9d 30       	cpi	r25, 0x0D	; 13
  d6:	49 f5       	brne	.+82     	; 0x12a <__vector_13+0x8c>
		if(!strncmp( (const char *) bufor, "on", 2 )){
  d8:	42 e0       	ldi	r20, 0x02	; 2
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	6c e7       	ldi	r22, 0x7C	; 124
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	84 ea       	ldi	r24, 0xA4	; 164
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 2e 02 	call	0x45c	; 0x45c <strncmp>
  e8:	89 2b       	or	r24, r25
  ea:	e1 f4       	brne	.+56     	; 0x124 <__vector_13+0x86>
			fprintf(&u_stream,"T = %d.%04d  C\n", star, mlod);
  ec:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <mlod+0x1>
  f0:	8f 93       	push	r24
  f2:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <mlod>
  f6:	8f 93       	push	r24
  f8:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <star>
  fc:	1f 92       	push	r1
  fe:	8f 93       	push	r24
 100:	8f e7       	ldi	r24, 0x7F	; 127
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	9f 93       	push	r25
 106:	8f 93       	push	r24
 108:	80 e6       	ldi	r24, 0x60	; 96
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	9f 93       	push	r25
 10e:	8f 93       	push	r24
 110:	0e 94 3c 02 	call	0x478	; 0x478 <fprintf>
 114:	8d b7       	in	r24, 0x3d	; 61
 116:	9e b7       	in	r25, 0x3e	; 62
 118:	08 96       	adiw	r24, 0x08	; 8
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	9e bf       	out	0x3e, r25	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	8d bf       	out	0x3d, r24	; 61
		}
		i=0;
 124:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <i>
 128:	03 c0       	rjmp	.+6      	; 0x130 <__vector_13+0x92>
	
	}
	else
		i++;
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <i>
	
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <lcd_write_instr>:
#include "lcd.h"

void lcd_write_instr(uint8_t data) //funkcja wysyłająca pojedynczą instrukcję do wyświetlacza↪→
{
	LCD_PORT &= ~(1<<LCD_RS); // zrobilismy zapis 
 152:	da 98       	cbi	0x1b, 2	; 27
	
	//wysylamy starsza
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 154:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
 156:	9b b3       	in	r25, 0x1b	; 27
 158:	28 2f       	mov	r18, r24
 15a:	20 7f       	andi	r18, 0xF0	; 240
 15c:	9f 70       	andi	r25, 0x0F	; 15
 15e:	92 2b       	or	r25, r18
 160:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	ef e9       	ldi	r30, 0x9F	; 159
 164:	ff e0       	ldi	r31, 0x0F	; 15
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_write_instr+0x14>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_write_instr+0x1a>
 16c:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 16e:	db 98       	cbi	0x1b, 3	; 27
 170:	ef e9       	ldi	r30, 0x9F	; 159
 172:	ff e0       	ldi	r31, 0x0F	; 15
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_write_instr+0x22>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_write_instr+0x28>
 17a:	00 00       	nop
	_delay_ms(1);
	
	//wysylamy mlodsza
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 17c:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	f0 e1       	ldi	r31, 0x10	; 16
 182:	8f 9f       	mul	r24, r31
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	92 2f       	mov	r25, r18
 18a:	9f 70       	andi	r25, 0x0F	; 15
 18c:	89 2b       	or	r24, r25
 18e:	8b bb       	out	0x1b, r24	; 27
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	9f e0       	ldi	r25, 0x0F	; 15
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_write_instr+0x42>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_write_instr+0x48>
 19a:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 19c:	db 98       	cbi	0x1b, 3	; 27
 19e:	ef e9       	ldi	r30, 0x9F	; 159
 1a0:	ff e0       	ldi	r31, 0x0F	; 15
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_write_instr+0x50>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_write_instr+0x56>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <lcd_write_data>:
}


void lcd_write_data(uint8_t data) //funkcja wysyłająca pojedynczą daną do wyświetlacza↪→
{
	LCD_PORT |= (1<<LCD_RS); // ustawiamy 1 
 1ac:	da 9a       	sbi	0x1b, 2	; 27
	
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 1ae:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
 1b0:	9b b3       	in	r25, 0x1b	; 27
 1b2:	28 2f       	mov	r18, r24
 1b4:	20 7f       	andi	r18, 0xF0	; 240
 1b6:	9f 70       	andi	r25, 0x0F	; 15
 1b8:	92 2b       	or	r25, r18
 1ba:	9b bb       	out	0x1b, r25	; 27
 1bc:	ef e9       	ldi	r30, 0x9F	; 159
 1be:	ff e0       	ldi	r31, 0x0F	; 15
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_write_data+0x14>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_write_data+0x1a>
 1c6:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 1c8:	db 98       	cbi	0x1b, 3	; 27
 1ca:	ef e9       	ldi	r30, 0x9F	; 159
 1cc:	ff e0       	ldi	r31, 0x0F	; 15
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_write_data+0x22>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_write_data+0x28>
 1d4:	00 00       	nop
	_delay_ms(1);
	
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
 1d6:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
 1d8:	2b b3       	in	r18, 0x1b	; 27
 1da:	f0 e1       	ldi	r31, 0x10	; 16
 1dc:	8f 9f       	mul	r24, r31
 1de:	c0 01       	movw	r24, r0
 1e0:	11 24       	eor	r1, r1
 1e2:	92 2f       	mov	r25, r18
 1e4:	9f 70       	andi	r25, 0x0F	; 15
 1e6:	89 2b       	or	r24, r25
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	8f e9       	ldi	r24, 0x9F	; 159
 1ec:	9f e0       	ldi	r25, 0x0F	; 15
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_write_data+0x42>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_write_data+0x48>
 1f4:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
 1f6:	db 98       	cbi	0x1b, 3	; 27
 1f8:	ef e9       	ldi	r30, 0x9F	; 159
 1fa:	ff e0       	ldi	r31, 0x0F	; 15
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_write_data+0x50>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_write_data+0x56>
 202:	00 00       	nop
 204:	08 95       	ret

00000206 <lcdinit>:
	_delay_ms(1);
}

void lcdinit(void) //inicjalizacja wyswietlacza
{	
	LCD_DDR = 0xff; //ca;y port wyjsciowy
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	8a bb       	out	0x1a, r24	; 26
 20a:	2f e7       	ldi	r18, 0x7F	; 127
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <lcdinit+0xa>
 218:	00 c0       	rjmp	.+0      	; 0x21a <lcdinit+0x14>
 21a:	00 00       	nop
	_delay_ms(45);
	lcd_write_instr(0x33);
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_write_instr>
	lcd_write_instr(0x32);
 222:	82 e3       	ldi	r24, 0x32	; 50
 224:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_write_instr>
	
	lcd_write_instr(0x28); //konfiguruje wyswietlacz
 228:	88 e2       	ldi	r24, 0x28	; 40
 22a:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_write_instr>
	lcd_write_instr(0x08);
 22e:	88 e0       	ldi	r24, 0x08	; 8
 230:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_write_instr>
	lcd_write_instr(0x01); //czysci
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_write_instr>
	lcd_write_instr(0x06);
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_write_instr>
	lcd_write_instr(0x0f);
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	0c 94 a9 00 	jmp	0x152	; 0x152 <lcd_write_instr>

00000246 <lcd_clear>:
	
}

void lcd_clear(void)
{
	lcd_write_instr(0x01);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0c 94 a9 00 	jmp	0x152	; 0x152 <lcd_write_instr>

0000024c <lcd_set_xy>:
}

void lcd_set_xy(uint8_t x, uint8_t y)
{
	lcd_write_instr(0x80 + x + y * 0x40);
 24c:	80 58       	subi	r24, 0x80	; 128
 24e:	90 e4       	ldi	r25, 0x40	; 64
 250:	69 9f       	mul	r22, r25
 252:	80 0d       	add	r24, r0
 254:	11 24       	eor	r1, r1
 256:	0c 94 a9 00 	jmp	0x152	; 0x152 <lcd_write_instr>

0000025a <lcd_write_text_xy>:
}

void lcd_write_text_xy(uint8_t x, uint8_t y, char *text)
{
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	8a 01       	movw	r16, r20
	lcd_set_xy(x,y);
 264:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_set_xy>
 268:	e8 01       	movw	r28, r16
	while(*text){
 26a:	89 91       	ld	r24, Y+
 26c:	88 23       	and	r24, r24
 26e:	19 f0       	breq	.+6      	; 0x276 <lcd_write_text_xy+0x1c>
		lcd_write_data(*text);
 270:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_write_data>
 274:	fa cf       	rjmp	.-12     	; 0x26a <lcd_write_text_xy+0x10>
		text++;
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <lcd_puts>:

int lcd_puts(char c, FILE *unused)
{
	lcd_write_data(c);
 280:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_write_data>
	return 0;
}
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	08 95       	ret

0000028a <blinking>:

void blinking(uint8_t t){
	if(t == 0 )
 28a:	81 11       	cpse	r24, r1
 28c:	02 c0       	rjmp	.+4      	; 0x292 <blinking+0x8>
		lcd_write_instr(0b1100);
 28e:	8c e0       	ldi	r24, 0x0C	; 12
 290:	03 c0       	rjmp	.+6      	; 0x298 <blinking+0xe>
	if(t == 1)
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	19 f4       	brne	.+6      	; 0x29c <blinking+0x12>
		lcd_write_instr(0b1111);
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	0c 94 a9 00 	jmp	0x152	; 0x152 <lcd_write_instr>
 29c:	08 95       	ret

0000029e <OW_reset>:

uint8_t OW_reset(void){ //przywitanie 
	uint8_t result;
	_delay_us(0);
	//outp(PORTADDRESS,0x00); // Drives DQ low <- sprowadza magistrale w stan niski, odpowiednikiem jest nasze makro OWLoW
	OW_low;
 29e:	bb 9a       	sbi	0x17, 3	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	8f e7       	ldi	r24, 0x7F	; 127
 2a2:	97 e0       	ldi	r25, 0x07	; 7
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <OW_reset+0x6>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <OW_reset+0xc>
 2aa:	00 00       	nop
	_delay_us(480);
	//outp(PORTADDRESS,0x01); // Releases the bus <-OWHigh robi to samo
	OW_high;
 2ac:	bb 98       	cbi	0x17, 3	; 23
 2ae:	e7 e1       	ldi	r30, 0x17	; 23
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <OW_reset+0x14>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <OW_reset+0x1a>
 2b8:	00 00       	nop
	_delay_us(70);
	//result = inp(PORTADDRESS) ^ 0x01; // Sample for presence pulse from slave <- owcheck
	result = OW_check;
 2ba:	86 b3       	in	r24, 0x16	; 22
 2bc:	e7 e6       	ldi	r30, 0x67	; 103
 2be:	f6 e0       	ldi	r31, 0x06	; 6
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <OW_reset+0x22>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <OW_reset+0x28>
 2c6:	00 00       	nop
	_delay_us(410); // Complete the reset sequence recovery
	return result; // Return sample presence pulse result
}
 2c8:	88 70       	andi	r24, 0x08	; 8
 2ca:	08 95       	ret

000002cc <OWWriteBit>:
void OWWriteBit(uint8_t byte){ //wysylanie bit
	if(byte)
	{
		// Write '1' bit
		//outp(PORTADDRESS,0x00); // Drives DQ low
		OW_low;
 2cc:	bb 9a       	sbi	0x17, 3	; 23
	_delay_us(410); // Complete the reset sequence recovery
	return result; // Return sample presence pulse result
}

void OWWriteBit(uint8_t byte){ //wysylanie bit
	if(byte)
 2ce:	88 23       	and	r24, r24
 2d0:	51 f0       	breq	.+20     	; 0x2e6 <OWWriteBit+0x1a>
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <OWWriteBit+0x8>
		// Write '1' bit
		//outp(PORTADDRESS,0x00); // Drives DQ low
		OW_low;
		_delay_us(6);
		//outp(PORTADDRESS,0x01); // Releases the bus
		OW_high;
 2d8:	bb 98       	cbi	0x17, 3	; 23
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <OWWriteBit+0x12>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <OWWriteBit+0x18>
 2e4:	0a c0       	rjmp	.+20     	; 0x2fa <OWWriteBit+0x2e>
 2e6:	8f ee       	ldi	r24, 0xEF	; 239
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <OWWriteBit+0x1e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <OWWriteBit+0x24>
 2f0:	00 00       	nop
		// Write '0' bit
		//outp(PORTADDRESS,0x00); // Drives DQ low
		OW_low;
		_delay_us(60);
		//outp(PORTADDRESS,0x01); // Releases the bus
		OW_high;
 2f2:	bb 98       	cbi	0x17, 3	; 23
 2f4:	95 e3       	ldi	r25, 0x35	; 53
 2f6:	9a 95       	dec	r25
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <OWWriteBit+0x2a>
 2fa:	00 00       	nop
 2fc:	08 95       	ret

000002fe <OWReadBit>:
	}
}
uint8_t OWReadBit(void){ //otrzymywanie bit
	uint8_t result;
	//outp(PORTADDRESS,0x00); // Drives DQ low
	OW_low;
 2fe:	bb 9a       	sbi	0x17, 3	; 23
 300:	80 e2       	ldi	r24, 0x20	; 32
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <OWReadBit+0x4>
	_delay_us(6);
	//outp(PORTADDRESS,0x01); // Releases the bus
	OW_high;
 306:	bb 98       	cbi	0x17, 3	; 23
 308:	e0 e3       	ldi	r30, 0x30	; 48
 30a:	ea 95       	dec	r30
 30c:	f1 f7       	brne	.-4      	; 0x30a <OWReadBit+0xc>
	_delay_us(9);
	//result = inp(PORTADDRESS) & 0x01; // Sample the bit value from the slave
	result = OW_check;
 30e:	86 b3       	in	r24, 0x16	; 22
 310:	eb ed       	ldi	r30, 0xDB	; 219
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <OWReadBit+0x16>
 318:	00 c0       	rjmp	.+0      	; 0x31a <OWReadBit+0x1c>
 31a:	00 00       	nop
	_delay_us(55); // Complete the time slot and 10us recovery
	return result;
}
 31c:	88 70       	andi	r24, 0x08	; 8
 31e:	08 95       	ret

00000320 <OW_send>:

void OW_send(uint8_t byte){ //wysylanie bajt
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	d8 2f       	mov	r29, r24
 326:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t loop;
	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
	{
		OWWriteBit(byte & 0x01);
 328:	8d 2f       	mov	r24, r29
 32a:	81 70       	andi	r24, 0x01	; 1
 32c:	0e 94 66 01 	call	0x2cc	; 0x2cc <OWWriteBit>
		// shift the data byte for the next bit
		byte >>= 1;
 330:	d6 95       	lsr	r29
 332:	c1 50       	subi	r28, 0x01	; 1
}

void OW_send(uint8_t byte){ //wysylanie bajt
	uint8_t loop;
	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
 334:	c9 f7       	brne	.-14     	; 0x328 <OW_send+0x8>
	{
		OWWriteBit(byte & 0x01);
		// shift the data byte for the next bit
		byte >>= 1;
	}
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <OW_recv>:
uint8_t OW_recv(void){ //otrzymywanie bajt
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t loop, result=0;
 342:	c0 e0       	ldi	r28, 0x00	; 0
	for (loop = 0; loop < 8; loop++)
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
 344:	c6 95       	lsr	r28
		// if result is one, then set MS bit
		if (OWReadBit())
 346:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OWReadBit>
 34a:	81 11       	cpse	r24, r1
			result |= 0x80; //wstawienie 1 do najstarszego bitu
 34c:	c0 68       	ori	r28, 0x80	; 128
 34e:	d1 50       	subi	r29, 0x01	; 1
		byte >>= 1;
	}
}
uint8_t OW_recv(void){ //otrzymywanie bajt
	uint8_t loop, result=0;
	for (loop = 0; loop < 8; loop++)
 350:	c9 f7       	brne	.-14     	; 0x344 <OW_recv+0x8>
		// if result is one, then set MS bit
		if (OWReadBit())
			result |= 0x80; //wstawienie 1 do najstarszego bitu
	}
	return result;
}
 352:	8c 2f       	mov	r24, r28
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <USART_Init>:
#include "usart.h"
void USART_Init( unsigned int baud )
{
/* prę dkoś ć transmisji */
UBRRH = (unsigned char)(baud>>8);
 35a:	90 bd       	out	0x20, r25	; 32
UBRRL = (unsigned char)baud;
 35c:	89 b9       	out	0x09, r24	; 9
/* Format ramki: słowo=8bitów, 2 bity stopu */
UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 35e:	8e e8       	ldi	r24, 0x8E	; 142
 360:	80 bd       	out	0x20, r24	; 32
/* Włą czenie odbiornika i nadajnika */
UCSRB = (1<<RXEN)|(1<<TXEN);
 362:	88 e1       	ldi	r24, 0x18	; 24
 364:	8a b9       	out	0x0a, r24	; 10
/* Włą czenie przerwania, gdy przyszła dana */
UCSRB |= (1<<RXCIE);
 366:	57 9a       	sbi	0x0a, 7	; 10
 368:	08 95       	ret

0000036a <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
/* Czekaj, aż zwolni się bufor nadajnika */
while ( !( UCSRA & (1<<UDRE)) );
 36a:	5d 9b       	sbis	0x0b, 5	; 11
 36c:	fe cf       	rjmp	.-4      	; 0x36a <USART_Transmit>
/* Umieś ć daną w buforze i ją wyś lij */
UDR = data;
 36e:	8c b9       	out	0x0c, r24	; 12
 370:	08 95       	ret

00000372 <USART_Receive>:

//Wysyłanie i odbiór danej (pooling)
unsigned char USART_Receive( void )
{
/* Czekaj, aż pojawi się dana do odbioru */
while ( !(UCSRA & (1<<RXC)) ) ;
 372:	5f 9b       	sbis	0x0b, 7	; 11
 374:	fe cf       	rjmp	.-4      	; 0x372 <USART_Receive>
/* Odbierz daną */
return UDR;
 376:	8c b1       	in	r24, 0x0c	; 12

}
 378:	08 95       	ret

0000037a <u_putc>:

int u_putc(char c, FILE *unused)
{
	USART_Transmit(c);
 37a:	0e 94 b5 01 	call	0x36a	; 0x36a <USART_Transmit>
	return 0;
}
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	08 95       	ret

00000384 <main>:

int main(void){
	//Filozofia trochę inna niż zazwyczaj, bo zmieniamy kierunek DDR
	lcdinit();
 384:	0e 94 03 01 	call	0x206	; 0x206 <lcdinit>
	blinking(0);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 45 01 	call	0x28a	; 0x28a <blinking>
	
	//USART //czesc dodatkowa
	USART_Init(1); //500 000 baud
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 ad 01 	call	0x35a	; 0x35a <USART_Init>
	sei(); 
 396:	78 94       	sei
		uint8_t mlodsze = OW_recv();
		uint8_t starsze = OW_recv();
		uint16_t temperatura = (starsze<<8)|(mlodsze);
		
		star = temperatura >> 4;
		 mlod = (temperatura & (0x0f))*625;
 398:	51 e7       	ldi	r21, 0x71	; 113
 39a:	e5 2e       	mov	r14, r21
 39c:	52 e0       	ldi	r21, 0x02	; 2
 39e:	f5 2e       	mov	r15, r21
		
		lcd_set_xy(0,0);
		fprintf(&lcd_stream, "T = %d.%04d %c C", star, mlod, 0b11011111);
 3a0:	6f ed       	ldi	r22, 0xDF	; 223
 3a2:	c6 2e       	mov	r12, r22
 3a4:	0f e8       	ldi	r16, 0x8F	; 143
 3a6:	10 e0       	ldi	r17, 0x00	; 0
 3a8:	ce e6       	ldi	r28, 0x6E	; 110
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
	sei(); 
	
	
	while(1)
	{
		OW_reset();
 3ac:	0e 94 4f 01 	call	0x29e	; 0x29e <OW_reset>
		//skip rom to jest hej wy termometry
		OW_send(0xCC); //SKIP ROM
 3b0:	8c ec       	ldi	r24, 0xCC	; 204
 3b2:	0e 94 90 01 	call	0x320	; 0x320 <OW_send>
		OW_send(0x44); //CONVERT T mierzcie temperature
 3b6:	84 e4       	ldi	r24, 0x44	; 68
 3b8:	0e 94 90 01 	call	0x320	; 0x320 <OW_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	4e e9       	ldi	r20, 0x9E	; 158
 3c0:	54 e2       	ldi	r21, 0x24	; 36
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	40 40       	sbci	r20, 0x00	; 0
 3c6:	50 40       	sbci	r21, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x3e>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x48>
 3cc:	00 00       	nop
		_delay_ms(750);
		
		OW_reset();
 3ce:	0e 94 4f 01 	call	0x29e	; 0x29e <OW_reset>
		OW_send(0xCC);//hej wy
 3d2:	8c ec       	ldi	r24, 0xCC	; 204
 3d4:	0e 94 90 01 	call	0x320	; 0x320 <OW_send>
		OW_send(0xBE); //dajta temperature
 3d8:	8e eb       	ldi	r24, 0xBE	; 190
 3da:	0e 94 90 01 	call	0x320	; 0x320 <OW_send>
		uint8_t mlodsze = OW_recv();
 3de:	0e 94 9e 01 	call	0x33c	; 0x33c <OW_recv>
 3e2:	d8 2e       	mov	r13, r24
		uint8_t starsze = OW_recv();
 3e4:	0e 94 9e 01 	call	0x33c	; 0x33c <OW_recv>
		uint16_t temperatura = (starsze<<8)|(mlodsze);
 3e8:	2d 2d       	mov	r18, r13
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	58 2b       	or	r21, r24
 3f0:	ca 01       	movw	r24, r20
		
		star = temperatura >> 4;
 3f2:	9a 01       	movw	r18, r20
 3f4:	44 e0       	ldi	r20, 0x04	; 4
 3f6:	36 95       	lsr	r19
 3f8:	27 95       	ror	r18
 3fa:	4a 95       	dec	r20
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x72>
 3fe:	20 93 a1 00 	sts	0x00A1, r18	; 0x8000a1 <star>
		 mlod = (temperatura & (0x0f))*625;
 402:	8f 70       	andi	r24, 0x0F	; 15
 404:	99 27       	eor	r25, r25
 406:	8e 9d       	mul	r24, r14
 408:	90 01       	movw	r18, r0
 40a:	8f 9d       	mul	r24, r15
 40c:	30 0d       	add	r19, r0
 40e:	9e 9d       	mul	r25, r14
 410:	30 0d       	add	r19, r0
 412:	11 24       	eor	r1, r1
 414:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <mlod+0x1>
 418:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <mlod>
		
		lcd_set_xy(0,0);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_set_xy>
		fprintf(&lcd_stream, "T = %d.%04d %c C", star, mlod, 0b11011111);
 424:	1f 92       	push	r1
 426:	cf 92       	push	r12
 428:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <mlod+0x1>
 42c:	8f 93       	push	r24
 42e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <mlod>
 432:	8f 93       	push	r24
 434:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <star>
 438:	1f 92       	push	r1
 43a:	8f 93       	push	r24
 43c:	1f 93       	push	r17
 43e:	0f 93       	push	r16
 440:	df 93       	push	r29
 442:	cf 93       	push	r28
 444:	0e 94 3c 02 	call	0x478	; 0x478 <fprintf>
 448:	4d b7       	in	r20, 0x3d	; 61
 44a:	5e b7       	in	r21, 0x3e	; 62
 44c:	46 5f       	subi	r20, 0xF6	; 246
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	5e bf       	out	0x3e, r21	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	4d bf       	out	0x3d, r20	; 61
 45a:	a8 cf       	rjmp	.-176    	; 0x3ac <main+0x28>

0000045c <strncmp>:
 45c:	fb 01       	movw	r30, r22
 45e:	dc 01       	movw	r26, r24
 460:	41 50       	subi	r20, 0x01	; 1
 462:	50 40       	sbci	r21, 0x00	; 0
 464:	30 f0       	brcs	.+12     	; 0x472 <strncmp+0x16>
 466:	8d 91       	ld	r24, X+
 468:	01 90       	ld	r0, Z+
 46a:	80 19       	sub	r24, r0
 46c:	19 f4       	brne	.+6      	; 0x474 <strncmp+0x18>
 46e:	00 20       	and	r0, r0
 470:	b9 f7       	brne	.-18     	; 0x460 <strncmp+0x4>
 472:	88 1b       	sub	r24, r24
 474:	99 0b       	sbc	r25, r25
 476:	08 95       	ret

00000478 <fprintf>:
 478:	a0 e0       	ldi	r26, 0x00	; 0
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e2 e4       	ldi	r30, 0x42	; 66
 47e:	f2 e0       	ldi	r31, 0x02	; 2
 480:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__prologue_saves__+0x20>
 484:	ae 01       	movw	r20, r28
 486:	47 5f       	subi	r20, 0xF7	; 247
 488:	5f 4f       	sbci	r21, 0xFF	; 255
 48a:	6f 81       	ldd	r22, Y+7	; 0x07
 48c:	78 85       	ldd	r23, Y+8	; 0x08
 48e:	8d 81       	ldd	r24, Y+5	; 0x05
 490:	9e 81       	ldd	r25, Y+6	; 0x06
 492:	0e 94 4e 02 	call	0x49c	; 0x49c <vfprintf>
 496:	e2 e0       	ldi	r30, 0x02	; 2
 498:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__epilogue_restores__+0x20>

0000049c <vfprintf>:
 49c:	ab e0       	ldi	r26, 0x0B	; 11
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	e4 e5       	ldi	r30, 0x54	; 84
 4a2:	f2 e0       	ldi	r31, 0x02	; 2
 4a4:	0c 94 df 04 	jmp	0x9be	; 0x9be <__prologue_saves__>
 4a8:	6c 01       	movw	r12, r24
 4aa:	7b 01       	movw	r14, r22
 4ac:	8a 01       	movw	r16, r20
 4ae:	fc 01       	movw	r30, r24
 4b0:	17 82       	std	Z+7, r1	; 0x07
 4b2:	16 82       	std	Z+6, r1	; 0x06
 4b4:	83 81       	ldd	r24, Z+3	; 0x03
 4b6:	81 ff       	sbrs	r24, 1
 4b8:	cc c1       	rjmp	.+920    	; 0x852 <vfprintf+0x3b6>
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	3c 01       	movw	r6, r24
 4c0:	f6 01       	movw	r30, r12
 4c2:	93 81       	ldd	r25, Z+3	; 0x03
 4c4:	f7 01       	movw	r30, r14
 4c6:	93 fd       	sbrc	r25, 3
 4c8:	85 91       	lpm	r24, Z+
 4ca:	93 ff       	sbrs	r25, 3
 4cc:	81 91       	ld	r24, Z+
 4ce:	7f 01       	movw	r14, r30
 4d0:	88 23       	and	r24, r24
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <vfprintf+0x3a>
 4d4:	ba c1       	rjmp	.+884    	; 0x84a <vfprintf+0x3ae>
 4d6:	85 32       	cpi	r24, 0x25	; 37
 4d8:	39 f4       	brne	.+14     	; 0x4e8 <vfprintf+0x4c>
 4da:	93 fd       	sbrc	r25, 3
 4dc:	85 91       	lpm	r24, Z+
 4de:	93 ff       	sbrs	r25, 3
 4e0:	81 91       	ld	r24, Z+
 4e2:	7f 01       	movw	r14, r30
 4e4:	85 32       	cpi	r24, 0x25	; 37
 4e6:	29 f4       	brne	.+10     	; 0x4f2 <vfprintf+0x56>
 4e8:	b6 01       	movw	r22, r12
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 45 04 	call	0x88a	; 0x88a <fputc>
 4f0:	e7 cf       	rjmp	.-50     	; 0x4c0 <vfprintf+0x24>
 4f2:	91 2c       	mov	r9, r1
 4f4:	21 2c       	mov	r2, r1
 4f6:	31 2c       	mov	r3, r1
 4f8:	ff e1       	ldi	r31, 0x1F	; 31
 4fa:	f3 15       	cp	r31, r3
 4fc:	d8 f0       	brcs	.+54     	; 0x534 <vfprintf+0x98>
 4fe:	8b 32       	cpi	r24, 0x2B	; 43
 500:	79 f0       	breq	.+30     	; 0x520 <vfprintf+0x84>
 502:	38 f4       	brcc	.+14     	; 0x512 <vfprintf+0x76>
 504:	80 32       	cpi	r24, 0x20	; 32
 506:	79 f0       	breq	.+30     	; 0x526 <vfprintf+0x8a>
 508:	83 32       	cpi	r24, 0x23	; 35
 50a:	a1 f4       	brne	.+40     	; 0x534 <vfprintf+0x98>
 50c:	23 2d       	mov	r18, r3
 50e:	20 61       	ori	r18, 0x10	; 16
 510:	1d c0       	rjmp	.+58     	; 0x54c <vfprintf+0xb0>
 512:	8d 32       	cpi	r24, 0x2D	; 45
 514:	61 f0       	breq	.+24     	; 0x52e <vfprintf+0x92>
 516:	80 33       	cpi	r24, 0x30	; 48
 518:	69 f4       	brne	.+26     	; 0x534 <vfprintf+0x98>
 51a:	23 2d       	mov	r18, r3
 51c:	21 60       	ori	r18, 0x01	; 1
 51e:	16 c0       	rjmp	.+44     	; 0x54c <vfprintf+0xb0>
 520:	83 2d       	mov	r24, r3
 522:	82 60       	ori	r24, 0x02	; 2
 524:	38 2e       	mov	r3, r24
 526:	e3 2d       	mov	r30, r3
 528:	e4 60       	ori	r30, 0x04	; 4
 52a:	3e 2e       	mov	r3, r30
 52c:	2a c0       	rjmp	.+84     	; 0x582 <vfprintf+0xe6>
 52e:	f3 2d       	mov	r31, r3
 530:	f8 60       	ori	r31, 0x08	; 8
 532:	1d c0       	rjmp	.+58     	; 0x56e <vfprintf+0xd2>
 534:	37 fc       	sbrc	r3, 7
 536:	2d c0       	rjmp	.+90     	; 0x592 <vfprintf+0xf6>
 538:	20 ed       	ldi	r18, 0xD0	; 208
 53a:	28 0f       	add	r18, r24
 53c:	2a 30       	cpi	r18, 0x0A	; 10
 53e:	40 f0       	brcs	.+16     	; 0x550 <vfprintf+0xb4>
 540:	8e 32       	cpi	r24, 0x2E	; 46
 542:	b9 f4       	brne	.+46     	; 0x572 <vfprintf+0xd6>
 544:	36 fc       	sbrc	r3, 6
 546:	81 c1       	rjmp	.+770    	; 0x84a <vfprintf+0x3ae>
 548:	23 2d       	mov	r18, r3
 54a:	20 64       	ori	r18, 0x40	; 64
 54c:	32 2e       	mov	r3, r18
 54e:	19 c0       	rjmp	.+50     	; 0x582 <vfprintf+0xe6>
 550:	36 fe       	sbrs	r3, 6
 552:	06 c0       	rjmp	.+12     	; 0x560 <vfprintf+0xc4>
 554:	8a e0       	ldi	r24, 0x0A	; 10
 556:	98 9e       	mul	r9, r24
 558:	20 0d       	add	r18, r0
 55a:	11 24       	eor	r1, r1
 55c:	92 2e       	mov	r9, r18
 55e:	11 c0       	rjmp	.+34     	; 0x582 <vfprintf+0xe6>
 560:	ea e0       	ldi	r30, 0x0A	; 10
 562:	2e 9e       	mul	r2, r30
 564:	20 0d       	add	r18, r0
 566:	11 24       	eor	r1, r1
 568:	22 2e       	mov	r2, r18
 56a:	f3 2d       	mov	r31, r3
 56c:	f0 62       	ori	r31, 0x20	; 32
 56e:	3f 2e       	mov	r3, r31
 570:	08 c0       	rjmp	.+16     	; 0x582 <vfprintf+0xe6>
 572:	8c 36       	cpi	r24, 0x6C	; 108
 574:	21 f4       	brne	.+8      	; 0x57e <vfprintf+0xe2>
 576:	83 2d       	mov	r24, r3
 578:	80 68       	ori	r24, 0x80	; 128
 57a:	38 2e       	mov	r3, r24
 57c:	02 c0       	rjmp	.+4      	; 0x582 <vfprintf+0xe6>
 57e:	88 36       	cpi	r24, 0x68	; 104
 580:	41 f4       	brne	.+16     	; 0x592 <vfprintf+0xf6>
 582:	f7 01       	movw	r30, r14
 584:	93 fd       	sbrc	r25, 3
 586:	85 91       	lpm	r24, Z+
 588:	93 ff       	sbrs	r25, 3
 58a:	81 91       	ld	r24, Z+
 58c:	7f 01       	movw	r14, r30
 58e:	81 11       	cpse	r24, r1
 590:	b3 cf       	rjmp	.-154    	; 0x4f8 <vfprintf+0x5c>
 592:	98 2f       	mov	r25, r24
 594:	9f 7d       	andi	r25, 0xDF	; 223
 596:	95 54       	subi	r25, 0x45	; 69
 598:	93 30       	cpi	r25, 0x03	; 3
 59a:	28 f4       	brcc	.+10     	; 0x5a6 <vfprintf+0x10a>
 59c:	0c 5f       	subi	r16, 0xFC	; 252
 59e:	1f 4f       	sbci	r17, 0xFF	; 255
 5a0:	9f e3       	ldi	r25, 0x3F	; 63
 5a2:	99 83       	std	Y+1, r25	; 0x01
 5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <vfprintf+0x124>
 5a6:	83 36       	cpi	r24, 0x63	; 99
 5a8:	31 f0       	breq	.+12     	; 0x5b6 <vfprintf+0x11a>
 5aa:	83 37       	cpi	r24, 0x73	; 115
 5ac:	71 f0       	breq	.+28     	; 0x5ca <vfprintf+0x12e>
 5ae:	83 35       	cpi	r24, 0x53	; 83
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <vfprintf+0x118>
 5b2:	59 c0       	rjmp	.+178    	; 0x666 <vfprintf+0x1ca>
 5b4:	21 c0       	rjmp	.+66     	; 0x5f8 <vfprintf+0x15c>
 5b6:	f8 01       	movw	r30, r16
 5b8:	80 81       	ld	r24, Z
 5ba:	89 83       	std	Y+1, r24	; 0x01
 5bc:	0e 5f       	subi	r16, 0xFE	; 254
 5be:	1f 4f       	sbci	r17, 0xFF	; 255
 5c0:	88 24       	eor	r8, r8
 5c2:	83 94       	inc	r8
 5c4:	91 2c       	mov	r9, r1
 5c6:	53 01       	movw	r10, r6
 5c8:	13 c0       	rjmp	.+38     	; 0x5f0 <vfprintf+0x154>
 5ca:	28 01       	movw	r4, r16
 5cc:	f2 e0       	ldi	r31, 0x02	; 2
 5ce:	4f 0e       	add	r4, r31
 5d0:	51 1c       	adc	r5, r1
 5d2:	f8 01       	movw	r30, r16
 5d4:	a0 80       	ld	r10, Z
 5d6:	b1 80       	ldd	r11, Z+1	; 0x01
 5d8:	36 fe       	sbrs	r3, 6
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <vfprintf+0x146>
 5dc:	69 2d       	mov	r22, r9
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <vfprintf+0x14a>
 5e2:	6f ef       	ldi	r22, 0xFF	; 255
 5e4:	7f ef       	ldi	r23, 0xFF	; 255
 5e6:	c5 01       	movw	r24, r10
 5e8:	0e 94 3a 04 	call	0x874	; 0x874 <strnlen>
 5ec:	4c 01       	movw	r8, r24
 5ee:	82 01       	movw	r16, r4
 5f0:	f3 2d       	mov	r31, r3
 5f2:	ff 77       	andi	r31, 0x7F	; 127
 5f4:	3f 2e       	mov	r3, r31
 5f6:	16 c0       	rjmp	.+44     	; 0x624 <vfprintf+0x188>
 5f8:	28 01       	movw	r4, r16
 5fa:	22 e0       	ldi	r18, 0x02	; 2
 5fc:	42 0e       	add	r4, r18
 5fe:	51 1c       	adc	r5, r1
 600:	f8 01       	movw	r30, r16
 602:	a0 80       	ld	r10, Z
 604:	b1 80       	ldd	r11, Z+1	; 0x01
 606:	36 fe       	sbrs	r3, 6
 608:	03 c0       	rjmp	.+6      	; 0x610 <vfprintf+0x174>
 60a:	69 2d       	mov	r22, r9
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <vfprintf+0x178>
 610:	6f ef       	ldi	r22, 0xFF	; 255
 612:	7f ef       	ldi	r23, 0xFF	; 255
 614:	c5 01       	movw	r24, r10
 616:	0e 94 2f 04 	call	0x85e	; 0x85e <strnlen_P>
 61a:	4c 01       	movw	r8, r24
 61c:	f3 2d       	mov	r31, r3
 61e:	f0 68       	ori	r31, 0x80	; 128
 620:	3f 2e       	mov	r3, r31
 622:	82 01       	movw	r16, r4
 624:	33 fc       	sbrc	r3, 3
 626:	1b c0       	rjmp	.+54     	; 0x65e <vfprintf+0x1c2>
 628:	82 2d       	mov	r24, r2
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	88 16       	cp	r8, r24
 62e:	99 06       	cpc	r9, r25
 630:	b0 f4       	brcc	.+44     	; 0x65e <vfprintf+0x1c2>
 632:	b6 01       	movw	r22, r12
 634:	80 e2       	ldi	r24, 0x20	; 32
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 45 04 	call	0x88a	; 0x88a <fputc>
 63c:	2a 94       	dec	r2
 63e:	f4 cf       	rjmp	.-24     	; 0x628 <vfprintf+0x18c>
 640:	f5 01       	movw	r30, r10
 642:	37 fc       	sbrc	r3, 7
 644:	85 91       	lpm	r24, Z+
 646:	37 fe       	sbrs	r3, 7
 648:	81 91       	ld	r24, Z+
 64a:	5f 01       	movw	r10, r30
 64c:	b6 01       	movw	r22, r12
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 45 04 	call	0x88a	; 0x88a <fputc>
 654:	21 10       	cpse	r2, r1
 656:	2a 94       	dec	r2
 658:	21 e0       	ldi	r18, 0x01	; 1
 65a:	82 1a       	sub	r8, r18
 65c:	91 08       	sbc	r9, r1
 65e:	81 14       	cp	r8, r1
 660:	91 04       	cpc	r9, r1
 662:	71 f7       	brne	.-36     	; 0x640 <vfprintf+0x1a4>
 664:	e8 c0       	rjmp	.+464    	; 0x836 <vfprintf+0x39a>
 666:	84 36       	cpi	r24, 0x64	; 100
 668:	11 f0       	breq	.+4      	; 0x66e <vfprintf+0x1d2>
 66a:	89 36       	cpi	r24, 0x69	; 105
 66c:	41 f5       	brne	.+80     	; 0x6be <vfprintf+0x222>
 66e:	f8 01       	movw	r30, r16
 670:	37 fe       	sbrs	r3, 7
 672:	07 c0       	rjmp	.+14     	; 0x682 <vfprintf+0x1e6>
 674:	60 81       	ld	r22, Z
 676:	71 81       	ldd	r23, Z+1	; 0x01
 678:	82 81       	ldd	r24, Z+2	; 0x02
 67a:	93 81       	ldd	r25, Z+3	; 0x03
 67c:	0c 5f       	subi	r16, 0xFC	; 252
 67e:	1f 4f       	sbci	r17, 0xFF	; 255
 680:	08 c0       	rjmp	.+16     	; 0x692 <vfprintf+0x1f6>
 682:	60 81       	ld	r22, Z
 684:	71 81       	ldd	r23, Z+1	; 0x01
 686:	07 2e       	mov	r0, r23
 688:	00 0c       	add	r0, r0
 68a:	88 0b       	sbc	r24, r24
 68c:	99 0b       	sbc	r25, r25
 68e:	0e 5f       	subi	r16, 0xFE	; 254
 690:	1f 4f       	sbci	r17, 0xFF	; 255
 692:	f3 2d       	mov	r31, r3
 694:	ff 76       	andi	r31, 0x6F	; 111
 696:	3f 2e       	mov	r3, r31
 698:	97 ff       	sbrs	r25, 7
 69a:	09 c0       	rjmp	.+18     	; 0x6ae <vfprintf+0x212>
 69c:	90 95       	com	r25
 69e:	80 95       	com	r24
 6a0:	70 95       	com	r23
 6a2:	61 95       	neg	r22
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	8f 4f       	sbci	r24, 0xFF	; 255
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	f0 68       	ori	r31, 0x80	; 128
 6ac:	3f 2e       	mov	r3, r31
 6ae:	2a e0       	ldi	r18, 0x0A	; 10
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	a3 01       	movw	r20, r6
 6b4:	0e 94 81 04 	call	0x902	; 0x902 <__ultoa_invert>
 6b8:	88 2e       	mov	r8, r24
 6ba:	86 18       	sub	r8, r6
 6bc:	45 c0       	rjmp	.+138    	; 0x748 <vfprintf+0x2ac>
 6be:	85 37       	cpi	r24, 0x75	; 117
 6c0:	31 f4       	brne	.+12     	; 0x6ce <vfprintf+0x232>
 6c2:	23 2d       	mov	r18, r3
 6c4:	2f 7e       	andi	r18, 0xEF	; 239
 6c6:	b2 2e       	mov	r11, r18
 6c8:	2a e0       	ldi	r18, 0x0A	; 10
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	25 c0       	rjmp	.+74     	; 0x718 <vfprintf+0x27c>
 6ce:	93 2d       	mov	r25, r3
 6d0:	99 7f       	andi	r25, 0xF9	; 249
 6d2:	b9 2e       	mov	r11, r25
 6d4:	8f 36       	cpi	r24, 0x6F	; 111
 6d6:	c1 f0       	breq	.+48     	; 0x708 <vfprintf+0x26c>
 6d8:	18 f4       	brcc	.+6      	; 0x6e0 <vfprintf+0x244>
 6da:	88 35       	cpi	r24, 0x58	; 88
 6dc:	79 f0       	breq	.+30     	; 0x6fc <vfprintf+0x260>
 6de:	b5 c0       	rjmp	.+362    	; 0x84a <vfprintf+0x3ae>
 6e0:	80 37       	cpi	r24, 0x70	; 112
 6e2:	19 f0       	breq	.+6      	; 0x6ea <vfprintf+0x24e>
 6e4:	88 37       	cpi	r24, 0x78	; 120
 6e6:	21 f0       	breq	.+8      	; 0x6f0 <vfprintf+0x254>
 6e8:	b0 c0       	rjmp	.+352    	; 0x84a <vfprintf+0x3ae>
 6ea:	e9 2f       	mov	r30, r25
 6ec:	e0 61       	ori	r30, 0x10	; 16
 6ee:	be 2e       	mov	r11, r30
 6f0:	b4 fe       	sbrs	r11, 4
 6f2:	0d c0       	rjmp	.+26     	; 0x70e <vfprintf+0x272>
 6f4:	fb 2d       	mov	r31, r11
 6f6:	f4 60       	ori	r31, 0x04	; 4
 6f8:	bf 2e       	mov	r11, r31
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <vfprintf+0x272>
 6fc:	34 fe       	sbrs	r3, 4
 6fe:	0a c0       	rjmp	.+20     	; 0x714 <vfprintf+0x278>
 700:	29 2f       	mov	r18, r25
 702:	26 60       	ori	r18, 0x06	; 6
 704:	b2 2e       	mov	r11, r18
 706:	06 c0       	rjmp	.+12     	; 0x714 <vfprintf+0x278>
 708:	28 e0       	ldi	r18, 0x08	; 8
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	05 c0       	rjmp	.+10     	; 0x718 <vfprintf+0x27c>
 70e:	20 e1       	ldi	r18, 0x10	; 16
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <vfprintf+0x27c>
 714:	20 e1       	ldi	r18, 0x10	; 16
 716:	32 e0       	ldi	r19, 0x02	; 2
 718:	f8 01       	movw	r30, r16
 71a:	b7 fe       	sbrs	r11, 7
 71c:	07 c0       	rjmp	.+14     	; 0x72c <vfprintf+0x290>
 71e:	60 81       	ld	r22, Z
 720:	71 81       	ldd	r23, Z+1	; 0x01
 722:	82 81       	ldd	r24, Z+2	; 0x02
 724:	93 81       	ldd	r25, Z+3	; 0x03
 726:	0c 5f       	subi	r16, 0xFC	; 252
 728:	1f 4f       	sbci	r17, 0xFF	; 255
 72a:	06 c0       	rjmp	.+12     	; 0x738 <vfprintf+0x29c>
 72c:	60 81       	ld	r22, Z
 72e:	71 81       	ldd	r23, Z+1	; 0x01
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 5f       	subi	r16, 0xFE	; 254
 736:	1f 4f       	sbci	r17, 0xFF	; 255
 738:	a3 01       	movw	r20, r6
 73a:	0e 94 81 04 	call	0x902	; 0x902 <__ultoa_invert>
 73e:	88 2e       	mov	r8, r24
 740:	86 18       	sub	r8, r6
 742:	fb 2d       	mov	r31, r11
 744:	ff 77       	andi	r31, 0x7F	; 127
 746:	3f 2e       	mov	r3, r31
 748:	36 fe       	sbrs	r3, 6
 74a:	0d c0       	rjmp	.+26     	; 0x766 <vfprintf+0x2ca>
 74c:	23 2d       	mov	r18, r3
 74e:	2e 7f       	andi	r18, 0xFE	; 254
 750:	a2 2e       	mov	r10, r18
 752:	89 14       	cp	r8, r9
 754:	58 f4       	brcc	.+22     	; 0x76c <vfprintf+0x2d0>
 756:	34 fe       	sbrs	r3, 4
 758:	0b c0       	rjmp	.+22     	; 0x770 <vfprintf+0x2d4>
 75a:	32 fc       	sbrc	r3, 2
 75c:	09 c0       	rjmp	.+18     	; 0x770 <vfprintf+0x2d4>
 75e:	83 2d       	mov	r24, r3
 760:	8e 7e       	andi	r24, 0xEE	; 238
 762:	a8 2e       	mov	r10, r24
 764:	05 c0       	rjmp	.+10     	; 0x770 <vfprintf+0x2d4>
 766:	b8 2c       	mov	r11, r8
 768:	a3 2c       	mov	r10, r3
 76a:	03 c0       	rjmp	.+6      	; 0x772 <vfprintf+0x2d6>
 76c:	b8 2c       	mov	r11, r8
 76e:	01 c0       	rjmp	.+2      	; 0x772 <vfprintf+0x2d6>
 770:	b9 2c       	mov	r11, r9
 772:	a4 fe       	sbrs	r10, 4
 774:	0f c0       	rjmp	.+30     	; 0x794 <vfprintf+0x2f8>
 776:	fe 01       	movw	r30, r28
 778:	e8 0d       	add	r30, r8
 77a:	f1 1d       	adc	r31, r1
 77c:	80 81       	ld	r24, Z
 77e:	80 33       	cpi	r24, 0x30	; 48
 780:	21 f4       	brne	.+8      	; 0x78a <vfprintf+0x2ee>
 782:	9a 2d       	mov	r25, r10
 784:	99 7e       	andi	r25, 0xE9	; 233
 786:	a9 2e       	mov	r10, r25
 788:	09 c0       	rjmp	.+18     	; 0x79c <vfprintf+0x300>
 78a:	a2 fe       	sbrs	r10, 2
 78c:	06 c0       	rjmp	.+12     	; 0x79a <vfprintf+0x2fe>
 78e:	b3 94       	inc	r11
 790:	b3 94       	inc	r11
 792:	04 c0       	rjmp	.+8      	; 0x79c <vfprintf+0x300>
 794:	8a 2d       	mov	r24, r10
 796:	86 78       	andi	r24, 0x86	; 134
 798:	09 f0       	breq	.+2      	; 0x79c <vfprintf+0x300>
 79a:	b3 94       	inc	r11
 79c:	a3 fc       	sbrc	r10, 3
 79e:	11 c0       	rjmp	.+34     	; 0x7c2 <vfprintf+0x326>
 7a0:	a0 fe       	sbrs	r10, 0
 7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <vfprintf+0x314>
 7a4:	b2 14       	cp	r11, r2
 7a6:	88 f4       	brcc	.+34     	; 0x7ca <vfprintf+0x32e>
 7a8:	28 0c       	add	r2, r8
 7aa:	92 2c       	mov	r9, r2
 7ac:	9b 18       	sub	r9, r11
 7ae:	0e c0       	rjmp	.+28     	; 0x7cc <vfprintf+0x330>
 7b0:	b2 14       	cp	r11, r2
 7b2:	60 f4       	brcc	.+24     	; 0x7cc <vfprintf+0x330>
 7b4:	b6 01       	movw	r22, r12
 7b6:	80 e2       	ldi	r24, 0x20	; 32
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 45 04 	call	0x88a	; 0x88a <fputc>
 7be:	b3 94       	inc	r11
 7c0:	f7 cf       	rjmp	.-18     	; 0x7b0 <vfprintf+0x314>
 7c2:	b2 14       	cp	r11, r2
 7c4:	18 f4       	brcc	.+6      	; 0x7cc <vfprintf+0x330>
 7c6:	2b 18       	sub	r2, r11
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x332>
 7ca:	98 2c       	mov	r9, r8
 7cc:	21 2c       	mov	r2, r1
 7ce:	a4 fe       	sbrs	r10, 4
 7d0:	10 c0       	rjmp	.+32     	; 0x7f2 <vfprintf+0x356>
 7d2:	b6 01       	movw	r22, r12
 7d4:	80 e3       	ldi	r24, 0x30	; 48
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 45 04 	call	0x88a	; 0x88a <fputc>
 7dc:	a2 fe       	sbrs	r10, 2
 7de:	17 c0       	rjmp	.+46     	; 0x80e <vfprintf+0x372>
 7e0:	a1 fc       	sbrc	r10, 1
 7e2:	03 c0       	rjmp	.+6      	; 0x7ea <vfprintf+0x34e>
 7e4:	88 e7       	ldi	r24, 0x78	; 120
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <vfprintf+0x352>
 7ea:	88 e5       	ldi	r24, 0x58	; 88
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	b6 01       	movw	r22, r12
 7f0:	0c c0       	rjmp	.+24     	; 0x80a <vfprintf+0x36e>
 7f2:	8a 2d       	mov	r24, r10
 7f4:	86 78       	andi	r24, 0x86	; 134
 7f6:	59 f0       	breq	.+22     	; 0x80e <vfprintf+0x372>
 7f8:	a1 fe       	sbrs	r10, 1
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <vfprintf+0x364>
 7fc:	8b e2       	ldi	r24, 0x2B	; 43
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <vfprintf+0x366>
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	a7 fc       	sbrc	r10, 7
 804:	8d e2       	ldi	r24, 0x2D	; 45
 806:	b6 01       	movw	r22, r12
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 45 04 	call	0x88a	; 0x88a <fputc>
 80e:	89 14       	cp	r8, r9
 810:	38 f4       	brcc	.+14     	; 0x820 <vfprintf+0x384>
 812:	b6 01       	movw	r22, r12
 814:	80 e3       	ldi	r24, 0x30	; 48
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 45 04 	call	0x88a	; 0x88a <fputc>
 81c:	9a 94       	dec	r9
 81e:	f7 cf       	rjmp	.-18     	; 0x80e <vfprintf+0x372>
 820:	8a 94       	dec	r8
 822:	f3 01       	movw	r30, r6
 824:	e8 0d       	add	r30, r8
 826:	f1 1d       	adc	r31, r1
 828:	80 81       	ld	r24, Z
 82a:	b6 01       	movw	r22, r12
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 45 04 	call	0x88a	; 0x88a <fputc>
 832:	81 10       	cpse	r8, r1
 834:	f5 cf       	rjmp	.-22     	; 0x820 <vfprintf+0x384>
 836:	22 20       	and	r2, r2
 838:	09 f4       	brne	.+2      	; 0x83c <vfprintf+0x3a0>
 83a:	42 ce       	rjmp	.-892    	; 0x4c0 <vfprintf+0x24>
 83c:	b6 01       	movw	r22, r12
 83e:	80 e2       	ldi	r24, 0x20	; 32
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 45 04 	call	0x88a	; 0x88a <fputc>
 846:	2a 94       	dec	r2
 848:	f6 cf       	rjmp	.-20     	; 0x836 <vfprintf+0x39a>
 84a:	f6 01       	movw	r30, r12
 84c:	86 81       	ldd	r24, Z+6	; 0x06
 84e:	97 81       	ldd	r25, Z+7	; 0x07
 850:	02 c0       	rjmp	.+4      	; 0x856 <vfprintf+0x3ba>
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	9f ef       	ldi	r25, 0xFF	; 255
 856:	2b 96       	adiw	r28, 0x0b	; 11
 858:	e2 e1       	ldi	r30, 0x12	; 18
 85a:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__epilogue_restores__>

0000085e <strnlen_P>:
 85e:	fc 01       	movw	r30, r24
 860:	05 90       	lpm	r0, Z+
 862:	61 50       	subi	r22, 0x01	; 1
 864:	70 40       	sbci	r23, 0x00	; 0
 866:	01 10       	cpse	r0, r1
 868:	d8 f7       	brcc	.-10     	; 0x860 <__stack+0x1>
 86a:	80 95       	com	r24
 86c:	90 95       	com	r25
 86e:	8e 0f       	add	r24, r30
 870:	9f 1f       	adc	r25, r31
 872:	08 95       	ret

00000874 <strnlen>:
 874:	fc 01       	movw	r30, r24
 876:	61 50       	subi	r22, 0x01	; 1
 878:	70 40       	sbci	r23, 0x00	; 0
 87a:	01 90       	ld	r0, Z+
 87c:	01 10       	cpse	r0, r1
 87e:	d8 f7       	brcc	.-10     	; 0x876 <strnlen+0x2>
 880:	80 95       	com	r24
 882:	90 95       	com	r25
 884:	8e 0f       	add	r24, r30
 886:	9f 1f       	adc	r25, r31
 888:	08 95       	ret

0000088a <fputc>:
 88a:	0f 93       	push	r16
 88c:	1f 93       	push	r17
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
 892:	fb 01       	movw	r30, r22
 894:	23 81       	ldd	r18, Z+3	; 0x03
 896:	21 fd       	sbrc	r18, 1
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <fputc+0x16>
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	9f ef       	ldi	r25, 0xFF	; 255
 89e:	2c c0       	rjmp	.+88     	; 0x8f8 <fputc+0x6e>
 8a0:	22 ff       	sbrs	r18, 2
 8a2:	16 c0       	rjmp	.+44     	; 0x8d0 <fputc+0x46>
 8a4:	46 81       	ldd	r20, Z+6	; 0x06
 8a6:	57 81       	ldd	r21, Z+7	; 0x07
 8a8:	24 81       	ldd	r18, Z+4	; 0x04
 8aa:	35 81       	ldd	r19, Z+5	; 0x05
 8ac:	42 17       	cp	r20, r18
 8ae:	53 07       	cpc	r21, r19
 8b0:	44 f4       	brge	.+16     	; 0x8c2 <fputc+0x38>
 8b2:	a0 81       	ld	r26, Z
 8b4:	b1 81       	ldd	r27, Z+1	; 0x01
 8b6:	9d 01       	movw	r18, r26
 8b8:	2f 5f       	subi	r18, 0xFF	; 255
 8ba:	3f 4f       	sbci	r19, 0xFF	; 255
 8bc:	31 83       	std	Z+1, r19	; 0x01
 8be:	20 83       	st	Z, r18
 8c0:	8c 93       	st	X, r24
 8c2:	26 81       	ldd	r18, Z+6	; 0x06
 8c4:	37 81       	ldd	r19, Z+7	; 0x07
 8c6:	2f 5f       	subi	r18, 0xFF	; 255
 8c8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ca:	37 83       	std	Z+7, r19	; 0x07
 8cc:	26 83       	std	Z+6, r18	; 0x06
 8ce:	14 c0       	rjmp	.+40     	; 0x8f8 <fputc+0x6e>
 8d0:	8b 01       	movw	r16, r22
 8d2:	ec 01       	movw	r28, r24
 8d4:	fb 01       	movw	r30, r22
 8d6:	00 84       	ldd	r0, Z+8	; 0x08
 8d8:	f1 85       	ldd	r31, Z+9	; 0x09
 8da:	e0 2d       	mov	r30, r0
 8dc:	09 95       	icall
 8de:	89 2b       	or	r24, r25
 8e0:	e1 f6       	brne	.-72     	; 0x89a <fputc+0x10>
 8e2:	d8 01       	movw	r26, r16
 8e4:	16 96       	adiw	r26, 0x06	; 6
 8e6:	8d 91       	ld	r24, X+
 8e8:	9c 91       	ld	r25, X
 8ea:	17 97       	sbiw	r26, 0x07	; 7
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	17 96       	adiw	r26, 0x07	; 7
 8f0:	9c 93       	st	X, r25
 8f2:	8e 93       	st	-X, r24
 8f4:	16 97       	sbiw	r26, 0x06	; 6
 8f6:	ce 01       	movw	r24, r28
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	1f 91       	pop	r17
 8fe:	0f 91       	pop	r16
 900:	08 95       	ret

00000902 <__ultoa_invert>:
 902:	fa 01       	movw	r30, r20
 904:	aa 27       	eor	r26, r26
 906:	28 30       	cpi	r18, 0x08	; 8
 908:	51 f1       	breq	.+84     	; 0x95e <__ultoa_invert+0x5c>
 90a:	20 31       	cpi	r18, 0x10	; 16
 90c:	81 f1       	breq	.+96     	; 0x96e <__ultoa_invert+0x6c>
 90e:	e8 94       	clt
 910:	6f 93       	push	r22
 912:	6e 7f       	andi	r22, 0xFE	; 254
 914:	6e 5f       	subi	r22, 0xFE	; 254
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	8f 4f       	sbci	r24, 0xFF	; 255
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	af 4f       	sbci	r26, 0xFF	; 255
 91e:	b1 e0       	ldi	r27, 0x01	; 1
 920:	3e d0       	rcall	.+124    	; 0x99e <__ultoa_invert+0x9c>
 922:	b4 e0       	ldi	r27, 0x04	; 4
 924:	3c d0       	rcall	.+120    	; 0x99e <__ultoa_invert+0x9c>
 926:	67 0f       	add	r22, r23
 928:	78 1f       	adc	r23, r24
 92a:	89 1f       	adc	r24, r25
 92c:	9a 1f       	adc	r25, r26
 92e:	a1 1d       	adc	r26, r1
 930:	68 0f       	add	r22, r24
 932:	79 1f       	adc	r23, r25
 934:	8a 1f       	adc	r24, r26
 936:	91 1d       	adc	r25, r1
 938:	a1 1d       	adc	r26, r1
 93a:	6a 0f       	add	r22, r26
 93c:	71 1d       	adc	r23, r1
 93e:	81 1d       	adc	r24, r1
 940:	91 1d       	adc	r25, r1
 942:	a1 1d       	adc	r26, r1
 944:	20 d0       	rcall	.+64     	; 0x986 <__ultoa_invert+0x84>
 946:	09 f4       	brne	.+2      	; 0x94a <__ultoa_invert+0x48>
 948:	68 94       	set
 94a:	3f 91       	pop	r19
 94c:	2a e0       	ldi	r18, 0x0A	; 10
 94e:	26 9f       	mul	r18, r22
 950:	11 24       	eor	r1, r1
 952:	30 19       	sub	r19, r0
 954:	30 5d       	subi	r19, 0xD0	; 208
 956:	31 93       	st	Z+, r19
 958:	de f6       	brtc	.-74     	; 0x910 <__ultoa_invert+0xe>
 95a:	cf 01       	movw	r24, r30
 95c:	08 95       	ret
 95e:	46 2f       	mov	r20, r22
 960:	47 70       	andi	r20, 0x07	; 7
 962:	40 5d       	subi	r20, 0xD0	; 208
 964:	41 93       	st	Z+, r20
 966:	b3 e0       	ldi	r27, 0x03	; 3
 968:	0f d0       	rcall	.+30     	; 0x988 <__ultoa_invert+0x86>
 96a:	c9 f7       	brne	.-14     	; 0x95e <__ultoa_invert+0x5c>
 96c:	f6 cf       	rjmp	.-20     	; 0x95a <__ultoa_invert+0x58>
 96e:	46 2f       	mov	r20, r22
 970:	4f 70       	andi	r20, 0x0F	; 15
 972:	40 5d       	subi	r20, 0xD0	; 208
 974:	4a 33       	cpi	r20, 0x3A	; 58
 976:	18 f0       	brcs	.+6      	; 0x97e <__ultoa_invert+0x7c>
 978:	49 5d       	subi	r20, 0xD9	; 217
 97a:	31 fd       	sbrc	r19, 1
 97c:	40 52       	subi	r20, 0x20	; 32
 97e:	41 93       	st	Z+, r20
 980:	02 d0       	rcall	.+4      	; 0x986 <__ultoa_invert+0x84>
 982:	a9 f7       	brne	.-22     	; 0x96e <__ultoa_invert+0x6c>
 984:	ea cf       	rjmp	.-44     	; 0x95a <__ultoa_invert+0x58>
 986:	b4 e0       	ldi	r27, 0x04	; 4
 988:	a6 95       	lsr	r26
 98a:	97 95       	ror	r25
 98c:	87 95       	ror	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	ba 95       	dec	r27
 994:	c9 f7       	brne	.-14     	; 0x988 <__ultoa_invert+0x86>
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	61 05       	cpc	r22, r1
 99a:	71 05       	cpc	r23, r1
 99c:	08 95       	ret
 99e:	9b 01       	movw	r18, r22
 9a0:	ac 01       	movw	r20, r24
 9a2:	0a 2e       	mov	r0, r26
 9a4:	06 94       	lsr	r0
 9a6:	57 95       	ror	r21
 9a8:	47 95       	ror	r20
 9aa:	37 95       	ror	r19
 9ac:	27 95       	ror	r18
 9ae:	ba 95       	dec	r27
 9b0:	c9 f7       	brne	.-14     	; 0x9a4 <__ultoa_invert+0xa2>
 9b2:	62 0f       	add	r22, r18
 9b4:	73 1f       	adc	r23, r19
 9b6:	84 1f       	adc	r24, r20
 9b8:	95 1f       	adc	r25, r21
 9ba:	a0 1d       	adc	r26, r0
 9bc:	08 95       	ret

000009be <__prologue_saves__>:
 9be:	2f 92       	push	r2
 9c0:	3f 92       	push	r3
 9c2:	4f 92       	push	r4
 9c4:	5f 92       	push	r5
 9c6:	6f 92       	push	r6
 9c8:	7f 92       	push	r7
 9ca:	8f 92       	push	r8
 9cc:	9f 92       	push	r9
 9ce:	af 92       	push	r10
 9d0:	bf 92       	push	r11
 9d2:	cf 92       	push	r12
 9d4:	df 92       	push	r13
 9d6:	ef 92       	push	r14
 9d8:	ff 92       	push	r15
 9da:	0f 93       	push	r16
 9dc:	1f 93       	push	r17
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
 9e2:	cd b7       	in	r28, 0x3d	; 61
 9e4:	de b7       	in	r29, 0x3e	; 62
 9e6:	ca 1b       	sub	r28, r26
 9e8:	db 0b       	sbc	r29, r27
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	f8 94       	cli
 9ee:	de bf       	out	0x3e, r29	; 62
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	cd bf       	out	0x3d, r28	; 61
 9f4:	09 94       	ijmp

000009f6 <__epilogue_restores__>:
 9f6:	2a 88       	ldd	r2, Y+18	; 0x12
 9f8:	39 88       	ldd	r3, Y+17	; 0x11
 9fa:	48 88       	ldd	r4, Y+16	; 0x10
 9fc:	5f 84       	ldd	r5, Y+15	; 0x0f
 9fe:	6e 84       	ldd	r6, Y+14	; 0x0e
 a00:	7d 84       	ldd	r7, Y+13	; 0x0d
 a02:	8c 84       	ldd	r8, Y+12	; 0x0c
 a04:	9b 84       	ldd	r9, Y+11	; 0x0b
 a06:	aa 84       	ldd	r10, Y+10	; 0x0a
 a08:	b9 84       	ldd	r11, Y+9	; 0x09
 a0a:	c8 84       	ldd	r12, Y+8	; 0x08
 a0c:	df 80       	ldd	r13, Y+7	; 0x07
 a0e:	ee 80       	ldd	r14, Y+6	; 0x06
 a10:	fd 80       	ldd	r15, Y+5	; 0x05
 a12:	0c 81       	ldd	r16, Y+4	; 0x04
 a14:	1b 81       	ldd	r17, Y+3	; 0x03
 a16:	aa 81       	ldd	r26, Y+2	; 0x02
 a18:	b9 81       	ldd	r27, Y+1	; 0x01
 a1a:	ce 0f       	add	r28, r30
 a1c:	d1 1d       	adc	r29, r1
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	f8 94       	cli
 a22:	de bf       	out	0x3e, r29	; 62
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	cd bf       	out	0x3d, r28	; 61
 a28:	ed 01       	movw	r28, r26
 a2a:	08 95       	ret

00000a2c <_exit>:
 a2c:	f8 94       	cli

00000a2e <__stop_program>:
 a2e:	ff cf       	rjmp	.-2      	; 0xa2e <__stop_program>
