   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 6F6E 00   		.string	"on"
  13               	.LC1:
  14 0003 5420 3D20 		.string	"T = %d.%04d  C\n"
  14      2564 2E25 
  14      3034 6420 
  14      2043 0A00 
  15               		.text
  16               	.global	__vector_13
  18               	__vector_13:
  19               	.LFB8:
  20               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h> 
   2:main.c        **** #include "lcd.h"
   3:main.c        **** #include "i1wire.h"
   4:main.c        **** #include "usart.h"
   5:main.c        **** #include <avr/interrupt.h>
   6:main.c        **** #include <avr/pgmspace.h> //zeby byl progmem
   7:main.c        **** FILE lcd_stream = FDEV_SETUP_STREAM(lcd_puts, NULL, _FDEV_SETUP_WRITE);
   8:main.c        **** FILE u_stream = FDEV_SETUP_STREAM(u_putc, NULL, _FDEV_SETUP_WRITE);
   9:main.c        **** const char tekst[] PROGMEM = "Ala ma kota"; //progmem kluczowy zeby byl we flashu
  10:main.c        **** 
  11:main.c        **** uint8_t x, y;
  12:main.c        **** uint8_t bufor[10];
  13:main.c        **** uint8_t i;
  14:main.c        **** uint8_t star;;
  15:main.c        **** uint16_t mlod;
  16:main.c        **** 
  17:main.c        **** ISR(USART_RXC_vect){
  21               		.loc 1 17 0
  22               		.cfi_startproc
  23 0000 1F92      		push r1
  24               	.LCFI0:
  25               		.cfi_def_cfa_offset 3
  26               		.cfi_offset 1, -2
  27 0002 0F92      		push r0
  28               	.LCFI1:
  29               		.cfi_def_cfa_offset 4
  30               		.cfi_offset 0, -3
  31 0004 0FB6      		in r0,__SREG__
  32 0006 0F92      		push r0
  33 0008 1124      		clr __zero_reg__
  34 000a 2F93      		push r18
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37               		.cfi_offset 18, -4
  38 000c 3F93      		push r19
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41               		.cfi_offset 19, -5
  42 000e 4F93      		push r20
  43               	.LCFI4:
  44               		.cfi_def_cfa_offset 7
  45               		.cfi_offset 20, -6
  46 0010 5F93      		push r21
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49               		.cfi_offset 21, -7
  50 0012 6F93      		push r22
  51               	.LCFI6:
  52               		.cfi_def_cfa_offset 9
  53               		.cfi_offset 22, -8
  54 0014 7F93      		push r23
  55               	.LCFI7:
  56               		.cfi_def_cfa_offset 10
  57               		.cfi_offset 23, -9
  58 0016 8F93      		push r24
  59               	.LCFI8:
  60               		.cfi_def_cfa_offset 11
  61               		.cfi_offset 24, -10
  62 0018 9F93      		push r25
  63               	.LCFI9:
  64               		.cfi_def_cfa_offset 12
  65               		.cfi_offset 25, -11
  66 001a AF93      		push r26
  67               	.LCFI10:
  68               		.cfi_def_cfa_offset 13
  69               		.cfi_offset 26, -12
  70 001c BF93      		push r27
  71               	.LCFI11:
  72               		.cfi_def_cfa_offset 14
  73               		.cfi_offset 27, -13
  74 001e EF93      		push r30
  75               	.LCFI12:
  76               		.cfi_def_cfa_offset 15
  77               		.cfi_offset 30, -14
  78 0020 FF93      		push r31
  79               	.LCFI13:
  80               		.cfi_def_cfa_offset 16
  81               		.cfi_offset 31, -15
  82               	/* prologue: Signal */
  83               	/* frame size = 0 */
  84               	/* stack size = 15 */
  85               	.L__stack_usage = 15
  18:main.c        **** 	bufor[i]=UDR;
  86               		.loc 1 18 0
  87 0022 8091 0000 		lds r24,i
  88 0026 9CB1      		in r25,0xc
  89 0028 E82F      		mov r30,r24
  90 002a F0E0      		ldi r31,0
  91 002c E050      		subi r30,lo8(-(bufor))
  92 002e F040      		sbci r31,hi8(-(bufor))
  93 0030 9083      		st Z,r25
  19:main.c        **** 	if(bufor[i] == '\n' || bufor[i] == '\r'){
  94               		.loc 1 19 0
  95 0032 9A30      		cpi r25,lo8(10)
  96 0034 01F0      		breq .L2
  97               		.loc 1 19 0 is_stmt 0 discriminator 1
  98 0036 9D30      		cpi r25,lo8(13)
  99 0038 01F4      		brne .L3
 100               	.L2:
 101               	.LBB5:
  20:main.c        **** 		if(!strncmp( (const char *) bufor, "on", 2 )){
 102               		.loc 1 20 0 is_stmt 1
 103 003a 42E0      		ldi r20,lo8(2)
 104 003c 50E0      		ldi r21,0
 105 003e 60E0      		ldi r22,lo8(.LC0)
 106 0040 70E0      		ldi r23,hi8(.LC0)
 107 0042 80E0      		ldi r24,lo8(bufor)
 108 0044 90E0      		ldi r25,hi8(bufor)
 109 0046 0E94 0000 		call strncmp
 110 004a 892B      		or r24,r25
 111 004c 01F4      		brne .L4
  21:main.c        **** 			fprintf(&u_stream,"T = %d.%04d  C\n", star, mlod);
 112               		.loc 1 21 0
 113 004e 8091 0000 		lds r24,mlod+1
 114 0052 8F93      		push r24
 115               	.LCFI14:
 116               		.cfi_def_cfa_offset 17
 117 0054 8091 0000 		lds r24,mlod
 118 0058 8F93      		push r24
 119               	.LCFI15:
 120               		.cfi_def_cfa_offset 18
 121 005a 8091 0000 		lds r24,star
 122 005e 1F92      		push __zero_reg__
 123               	.LCFI16:
 124               		.cfi_def_cfa_offset 19
 125 0060 8F93      		push r24
 126               	.LCFI17:
 127               		.cfi_def_cfa_offset 20
 128 0062 80E0      		ldi r24,lo8(.LC1)
 129 0064 90E0      		ldi r25,hi8(.LC1)
 130 0066 9F93      		push r25
 131               	.LCFI18:
 132               		.cfi_def_cfa_offset 21
 133 0068 8F93      		push r24
 134               	.LCFI19:
 135               		.cfi_def_cfa_offset 22
 136 006a 80E0      		ldi r24,lo8(u_stream)
 137 006c 90E0      		ldi r25,hi8(u_stream)
 138 006e 9F93      		push r25
 139               	.LCFI20:
 140               		.cfi_def_cfa_offset 23
 141 0070 8F93      		push r24
 142               	.LCFI21:
 143               		.cfi_def_cfa_offset 24
 144 0072 0E94 0000 		call fprintf
 145 0076 8DB7      		in r24,__SP_L__
 146 0078 9EB7      		in r25,__SP_H__
 147 007a 0896      		adiw r24,8
 148 007c 0FB6      		in __tmp_reg__,__SREG__
 149 007e F894      		cli
 150 0080 9EBF      		out __SP_H__,r25
 151 0082 0FBE      		out __SREG__,__tmp_reg__
 152 0084 8DBF      		out __SP_L__,r24
 153               	.LCFI22:
 154               		.cfi_def_cfa_offset 16
 155               	.L4:
 156               	.LBE5:
  22:main.c        **** 		}
  23:main.c        **** 		i=0;
 157               		.loc 1 23 0
 158 0086 1092 0000 		sts i,__zero_reg__
 159 008a 00C0      		rjmp .L1
 160               	.L3:
  24:main.c        **** 	
  25:main.c        **** 	}
  26:main.c        **** 	else
  27:main.c        **** 		i++;
 161               		.loc 1 27 0
 162 008c 8F5F      		subi r24,lo8(-(1))
 163 008e 8093 0000 		sts i,r24
 164               	.L1:
 165               	/* epilogue start */
  28:main.c        **** 	
  29:main.c        **** }
 166               		.loc 1 29 0
 167 0092 FF91      		pop r31
 168 0094 EF91      		pop r30
 169 0096 BF91      		pop r27
 170 0098 AF91      		pop r26
 171 009a 9F91      		pop r25
 172 009c 8F91      		pop r24
 173 009e 7F91      		pop r23
 174 00a0 6F91      		pop r22
 175 00a2 5F91      		pop r21
 176 00a4 4F91      		pop r20
 177 00a6 3F91      		pop r19
 178 00a8 2F91      		pop r18
 179 00aa 0F90      		pop r0
 180 00ac 0FBE      		out __SREG__,r0
 181 00ae 0F90      		pop r0
 182 00b0 1F90      		pop r1
 183 00b2 1895      		reti
 184               		.cfi_endproc
 185               	.LFE8:
 187               		.section	.rodata.str1.1
 188               	.LC2:
 189 0013 5420 3D20 		.string	"T = %d.%04d %c C"
 189      2564 2E25 
 189      3034 6420 
 189      2563 2043 
 189      00
 190               		.section	.text.startup,"ax",@progbits
 191               	.global	main
 193               	main:
 194               	.LFB9:
  30:main.c        **** 
  31:main.c        **** int main(void){
 195               		.loc 1 31 0
 196               		.cfi_startproc
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
  32:main.c        **** 	//Filozofia trochę inna niż zazwyczaj, bo zmieniamy kierunek DDR
  33:main.c        **** 	lcdinit();
 201               		.loc 1 33 0
 202 0000 0E94 0000 		call lcdinit
  34:main.c        **** 	blinking(0);
 203               		.loc 1 34 0
 204 0004 80E0      		ldi r24,0
 205 0006 0E94 0000 		call blinking
  35:main.c        **** 	
  36:main.c        **** 	//USART //czesc dodatkowa
  37:main.c        **** 	USART_Init(1); //500 000 baud
 206               		.loc 1 37 0
 207 000a 81E0      		ldi r24,lo8(1)
 208 000c 90E0      		ldi r25,0
 209 000e 0E94 0000 		call USART_Init
  38:main.c        **** 	sei(); 
 210               		.loc 1 38 0
 211               	/* #APP */
 212               	 ;  38 "main.c" 1
 213 0012 7894      		sei
 214               	 ;  0 "" 2
 215               	/* #NOAPP */
 216               	.LBB6:
  39:main.c        **** 	
  40:main.c        **** 	
  41:main.c        **** 	while(1)
  42:main.c        **** 	{
  43:main.c        **** 		OW_reset();
  44:main.c        **** 		//skip rom to jest hej wy termometry
  45:main.c        **** 		OW_send(0xCC); //SKIP ROM
  46:main.c        **** 		OW_send(0x44); //CONVERT T mierzcie temperature
  47:main.c        **** 		_delay_ms(750);
  48:main.c        **** 		
  49:main.c        **** 		OW_reset();
  50:main.c        **** 		OW_send(0xCC);//hej wy
  51:main.c        **** 		OW_send(0xBE); //dajta temperature
  52:main.c        **** 		uint8_t mlodsze = OW_recv();
  53:main.c        **** 		uint8_t starsze = OW_recv();
  54:main.c        **** 		uint16_t temperatura = (starsze<<8)|(mlodsze);
  55:main.c        **** 		
  56:main.c        **** 		star = temperatura >> 4;
  57:main.c        **** 		 mlod = (temperatura & (0x0f))*625;
 217               		.loc 1 57 0
 218 0014 51E7      		ldi r21,lo8(113)
 219 0016 E52E      		mov r14,r21
 220 0018 52E0      		ldi r21,lo8(2)
 221 001a F52E      		mov r15,r21
  58:main.c        **** 		
  59:main.c        **** 		lcd_set_xy(0,0);
  60:main.c        **** 		fprintf(&lcd_stream, "T = %d.%04d %c C", star, mlod, 0b11011111);
 222               		.loc 1 60 0
 223 001c 6FED      		ldi r22,lo8(-33)
 224 001e C62E      		mov r12,r22
 225 0020 00E0      		ldi r16,lo8(.LC2)
 226 0022 10E0      		ldi r17,hi8(.LC2)
 227 0024 C0E0      		ldi r28,lo8(lcd_stream)
 228 0026 D0E0      		ldi r29,hi8(lcd_stream)
 229               	.L11:
  43:main.c        **** 		//skip rom to jest hej wy termometry
 230               		.loc 1 43 0 discriminator 1
 231 0028 0E94 0000 		call OW_reset
  45:main.c        **** 		OW_send(0x44); //CONVERT T mierzcie temperature
 232               		.loc 1 45 0 discriminator 1
 233 002c 8CEC      		ldi r24,lo8(-52)
 234 002e 0E94 0000 		call OW_send
  46:main.c        **** 		_delay_ms(750);
 235               		.loc 1 46 0 discriminator 1
 236 0032 84E4      		ldi r24,lo8(68)
 237 0034 0E94 0000 		call OW_send
 238               	.LBB7:
 239               	.LBB8:
 240               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 241               		.loc 2 187 0 discriminator 1
 242 0038 2FEF      		ldi r18,lo8(2399999)
 243 003a 4EE9      		ldi r20,hi8(2399999)
 244 003c 54E2      		ldi r21,hlo8(2399999)
 245 003e 2150      	1:	subi r18,1
 246 0040 4040      		sbci r20,0
 247 0042 5040      		sbci r21,0
 248 0044 01F4      		brne 1b
 249 0046 00C0      		rjmp .
 250 0048 0000      		nop
 251               	.LBE8:
 252               	.LBE7:
  49:main.c        **** 		OW_send(0xCC);//hej wy
 253               		.loc 1 49 0 discriminator 1
 254 004a 0E94 0000 		call OW_reset
  50:main.c        **** 		OW_send(0xBE); //dajta temperature
 255               		.loc 1 50 0 discriminator 1
 256 004e 8CEC      		ldi r24,lo8(-52)
 257 0050 0E94 0000 		call OW_send
  51:main.c        **** 		uint8_t mlodsze = OW_recv();
 258               		.loc 1 51 0 discriminator 1
 259 0054 8EEB      		ldi r24,lo8(-66)
 260 0056 0E94 0000 		call OW_send
  52:main.c        **** 		uint8_t starsze = OW_recv();
 261               		.loc 1 52 0 discriminator 1
 262 005a 0E94 0000 		call OW_recv
 263 005e D82E      		mov r13,r24
  53:main.c        **** 		uint16_t temperatura = (starsze<<8)|(mlodsze);
 264               		.loc 1 53 0 discriminator 1
 265 0060 0E94 0000 		call OW_recv
  54:main.c        **** 		
 266               		.loc 1 54 0 discriminator 1
 267 0064 2D2D      		mov r18,r13
 268 0066 30E0      		ldi r19,0
 269 0068 A901      		movw r20,r18
 270 006a 582B      		or r21,r24
 271 006c CA01      		movw r24,r20
  56:main.c        **** 		 mlod = (temperatura & (0x0f))*625;
 272               		.loc 1 56 0 discriminator 1
 273 006e 9A01      		movw r18,r20
 274 0070 44E0      		ldi r20,4
 275               		1:
 276 0072 3695      		lsr r19
 277 0074 2795      		ror r18
 278 0076 4A95      		dec r20
 279 0078 01F4      		brne 1b
 280 007a 2093 0000 		sts star,r18
  57:main.c        **** 		
 281               		.loc 1 57 0 discriminator 1
 282 007e 8F70      		andi r24,15
 283 0080 9927      		clr r25
 284 0082 8E9D      		mul r24,r14
 285 0084 9001      		movw r18,r0
 286 0086 8F9D      		mul r24,r15
 287 0088 300D      		add r19,r0
 288 008a 9E9D      		mul r25,r14
 289 008c 300D      		add r19,r0
 290 008e 1124      		clr r1
 291 0090 3093 0000 		sts mlod+1,r19
 292 0094 2093 0000 		sts mlod,r18
  59:main.c        **** 		fprintf(&lcd_stream, "T = %d.%04d %c C", star, mlod, 0b11011111);
 293               		.loc 1 59 0 discriminator 1
 294 0098 60E0      		ldi r22,0
 295 009a 80E0      		ldi r24,0
 296 009c 0E94 0000 		call lcd_set_xy
 297               		.loc 1 60 0 discriminator 1
 298 00a0 1F92      		push __zero_reg__
 299               	.LCFI23:
 300               		.cfi_def_cfa_offset 3
 301 00a2 CF92      		push r12
 302               	.LCFI24:
 303               		.cfi_def_cfa_offset 4
 304 00a4 8091 0000 		lds r24,mlod+1
 305 00a8 8F93      		push r24
 306               	.LCFI25:
 307               		.cfi_def_cfa_offset 5
 308 00aa 8091 0000 		lds r24,mlod
 309 00ae 8F93      		push r24
 310               	.LCFI26:
 311               		.cfi_def_cfa_offset 6
 312 00b0 8091 0000 		lds r24,star
 313 00b4 1F92      		push __zero_reg__
 314               	.LCFI27:
 315               		.cfi_def_cfa_offset 7
 316 00b6 8F93      		push r24
 317               	.LCFI28:
 318               		.cfi_def_cfa_offset 8
 319 00b8 1F93      		push r17
 320               	.LCFI29:
 321               		.cfi_def_cfa_offset 9
 322 00ba 0F93      		push r16
 323               	.LCFI30:
 324               		.cfi_def_cfa_offset 10
 325 00bc DF93      		push r29
 326               	.LCFI31:
 327               		.cfi_def_cfa_offset 11
 328 00be CF93      		push r28
 329               	.LCFI32:
 330               		.cfi_def_cfa_offset 12
 331 00c0 0E94 0000 		call fprintf
 332 00c4 4DB7      		in r20,__SP_L__
 333 00c6 5EB7      		in r21,__SP_H__
 334 00c8 465F      		subi r20,-10
 335 00ca 5F4F      		sbci r21,-1
 336 00cc 0FB6      		in __tmp_reg__,__SREG__
 337 00ce F894      		cli
 338 00d0 5EBF      		out __SP_H__,r21
 339 00d2 0FBE      		out __SREG__,__tmp_reg__
 340 00d4 4DBF      		out __SP_L__,r20
 341               	.LCFI33:
 342               		.cfi_def_cfa_offset 2
 343 00d6 00C0      		rjmp .L11
 344               	.LBE6:
 345               		.cfi_endproc
 346               	.LFE9:
 348               		.comm	mlod,2,1
 349               		.comm	star,1,1
 350               		.comm	i,1,1
 351               		.comm	bufor,10,1
 352               		.comm	y,1,1
 353               		.comm	x,1,1
 354               	.global	tekst
 355               		.section	.progmem.data,"a",@progbits
 358               	tekst:
 359 0000 416C 6120 		.string	"Ala ma kota"
 359      6D61 206B 
 359      6F74 6100 
 360               	.global	u_stream
 361               		.data
 364               	u_stream:
 365 0000 0000 00   		.zero	3
 366 0003 02        		.byte	2
 367 0004 0000 0000 		.zero	4
 368 0008 0000      		.word	gs(u_putc)
 369 000a 0000      		.word	0
 370 000c 0000      		.word	0
 371               	.global	lcd_stream
 374               	lcd_stream:
 375 000e 0000 00   		.zero	3
 376 0011 02        		.byte	2
 377 0012 0000 0000 		.zero	4
 378 0016 0000      		.word	gs(lcd_puts)
 379 0018 0000      		.word	0
 380 001a 0000      		.word	0
 381               		.text
 382               	.Letext0:
 383               		.file 3 "/usr/lib/avr/include/stdint.h"
 384               		.file 4 "/usr/lib/avr/include/stdio.h"
 385               		.file 5 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccWjWVBm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccWjWVBm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccWjWVBm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccWjWVBm.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccWjWVBm.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccWjWVBm.s:18     .text:0000000000000000 __vector_13
                            *COM*:0000000000000001 i
                            *COM*:000000000000000a bufor
                            *COM*:0000000000000002 mlod
                            *COM*:0000000000000001 star
     /tmp/ccWjWVBm.s:364    .data:0000000000000000 u_stream
     /tmp/ccWjWVBm.s:193    .text.startup:0000000000000000 main
     /tmp/ccWjWVBm.s:374    .data:000000000000000e lcd_stream
                            *COM*:0000000000000001 y
                            *COM*:0000000000000001 x
     /tmp/ccWjWVBm.s:358    .progmem.data:0000000000000000 tekst

UNDEFINED SYMBOLS
strncmp
fprintf
lcdinit
blinking
USART_Init
OW_reset
OW_send
OW_recv
lcd_set_xy
u_putc
lcd_puts
__do_copy_data
__do_clear_bss
