
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000e0  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075e  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000184  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f1  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <longdelay>:
#include "longdelay.h"
#include <avr/io.h> 

void longdelay(uint16_t x){
		for(int i = 0; i < x; i++){
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	28 17       	cp	r18, r24
  72:	39 07       	cpc	r19, r25
  74:	61 f0       	breq	.+24     	; 0x8e <longdelay+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	4f ef       	ldi	r20, 0xFF	; 255
  78:	53 ed       	ldi	r21, 0xD3	; 211
  7a:	60 e3       	ldi	r22, 0x30	; 48
  7c:	41 50       	subi	r20, 0x01	; 1
  7e:	50 40       	sbci	r21, 0x00	; 0
  80:	60 40       	sbci	r22, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <longdelay+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <longdelay+0x1a>
  86:	00 00       	nop
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	3f 4f       	sbci	r19, 0xFF	; 255
  8c:	f1 cf       	rjmp	.-30     	; 0x70 <longdelay+0x4>
			_delay_ms(1000);
		}
}
  8e:	08 95       	ret

00000090 <main>:

#include <avr/io.h> 
#include "longdelay.h"
int main(void){
	DDRC = 0xff; // wszystkie na wyjscie
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 bb       	out	0x14, r24	; 20
	//PORTC = ~(0b11001110);
	DDRD = 0x00; //mocno opcjonalne, bo wszystkie z miejsca sa wejsciowe
  94:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff;
  96:	82 bb       	out	0x12, r24	; 18
	PORTC = 0b0001;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	85 bb       	out	0x15, r24	; 21
	int x=0;
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
		PORTC = 0b0100;
		_delay_ms(5);
		PORTC = 0b1000;
		_delay_ms(5);
	*/
	if(!(PIND&(1<<0))){
  a0:	80 99       	sbic	0x10, 0	; 16
  a2:	0a c0       	rjmp	.+20     	; 0xb8 <main+0x28>
		x^= 0xff;
  a4:	20 95       	com	r18
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	83 ec       	ldi	r24, 0xC3	; 195
  aa:	99 e0       	ldi	r25, 0x09	; 9
  ac:	41 50       	subi	r20, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x1c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x26>
  b6:	00 00       	nop
		_delay_ms(200);
	}
		
	
	if(x==0){
  b8:	21 15       	cp	r18, r1
  ba:	31 05       	cpc	r19, r1
  bc:	89 f7       	brne	.-30     	; 0xa0 <main+0x10>
		PORTC = (PORTC <<1) | (PORTC>>3);
  be:	95 b3       	in	r25, 0x15	; 21
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	99 0f       	add	r25, r25
  c4:	86 95       	lsr	r24
  c6:	86 95       	lsr	r24
  c8:	86 95       	lsr	r24
  ca:	89 2b       	or	r24, r25
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	9e e4       	ldi	r25, 0x4E	; 78
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x42>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x48>
  d8:	00 00       	nop
  da:	e2 cf       	rjmp	.-60     	; 0xa0 <main+0x10>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
