   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 00        		.string	""
  13               	.LC1:
  14 0001 5A61 6D6F 		.string	"Zamontowano"
  14      6E74 6F77 
  14      616E 6F00 
  15               	.LC2:
  16 000d 4B6C 6F70 		.string	"Klopoty"
  16      6F74 7900 
  17               	.LC3:
  18 0015 6461 7461 		.string	"data%d.txt"
  18      2564 2E74 
  18      7874 00
  19               	.LC4:
  20 0020 577A 6965 		.string	"Wzieto otwarto plik c:"
  20      746F 206F 
  20      7477 6172 
  20      746F 2070 
  20      6C69 6B20 
  21               	.LC5:
  22 0037 4E69 6520 		.string	"Nie otwarto pliku :c"
  22      6F74 7761 
  22      7274 6F20 
  22      706C 696B 
  22      7520 3A63 
  23               	.LC6:
  24 004c 5420 3D20 		.string	"T = %d.%04d %c C"
  24      2564 2E25 
  24      3034 6420 
  24      2563 2043 
  24      00
  25               	.LC7:
  26 005d 2564 2009 		.string	"%d \t %d.%04d\n"
  26      2025 642E 
  26      2530 3464 
  26      0A00 
  27               	.LC8:
  28 006b 5A65 676E 		.string	"Zegnaj.... :c"
  28      616A 2E2E 
  28      2E2E 203A 
  28      6300 
  29               		.section	.text.startup,"ax",@progbits
  30               	.global	main
  32               	main:
  33               	.LFB8:
  34               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h> 
   2:main.c        **** #include "lcd.h"
   3:main.c        **** #include "i1wire.h"
   4:main.c        **** #include "ff.h"
   5:main.c        **** #include "diskio.h"
   6:main.c        **** #include "ffconf.h"
   7:main.c        **** #include <string.h> // do f_write
   8:main.c        **** #include <avr/pgmspace.h> //zeby byl progmem
   9:main.c        **** 
  10:main.c        **** FILE lcd_stream = FDEV_SETUP_STREAM(lcd_puts, NULL, _FDEV_SETUP_WRITE);
  11:main.c        **** const char tekst[] PROGMEM = "Ala ma kota"; //progmem kluczowy zeby byl we flashu
  12:main.c        **** FATFS FatFs;	/* Work area (filesystem object) for logical drive */
  13:main.c        **** FRESULT fr;		/* FatFs return code */
  14:main.c        **** FIL fil;        /* File object */
  15:main.c        **** char buffer[20];   /* File copy buffer */
  16:main.c        **** UINT bw;         /* File read/write count */
  17:main.c        **** FILINFO fno; //not used but argument wanted for a function
  18:main.c        **** uint8_t count;
  19:main.c        **** int main(void){
  35               		.loc 1 19 0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  20:main.c        **** 	//Filozofia trochę inna niż zazwyczaj, bo zmieniamy kierunek DDR
  21:main.c        **** 	lcdinit();
  41               		.loc 1 21 0
  42 0000 0E94 0000 		call lcdinit
  22:main.c        **** 	blinking(0);
  43               		.loc 1 22 0
  44 0004 80E0      		ldi r24,0
  45 0006 0E94 0000 		call blinking
  23:main.c        **** 	
  24:main.c        **** 	//KARTA SD SECTION
  25:main.c        **** 			/* Give a work area to the default drive */
  26:main.c        **** 			fr = f_mount(&FatFs, "", 1);
  46               		.loc 1 26 0
  47 000a 41E0      		ldi r20,lo8(1)
  48 000c 60E0      		ldi r22,lo8(.LC0)
  49 000e 70E0      		ldi r23,hi8(.LC0)
  50 0010 80E0      		ldi r24,lo8(FatFs)
  51 0012 90E0      		ldi r25,hi8(FatFs)
  52 0014 0E94 0000 		call f_mount
  53 0018 8093 0000 		sts fr,r24
  27:main.c        **** 			if (fr == 0){
  28:main.c        **** 				lcd_set_xy(0,0);
  54               		.loc 1 28 0
  55 001c 60E0      		ldi r22,0
  27:main.c        **** 			if (fr == 0){
  56               		.loc 1 27 0
  57 001e 8111      		cpse r24,__zero_reg__
  58 0020 00C0      		rjmp .L2
  59               		.loc 1 28 0
  60 0022 0E94 0000 		call lcd_set_xy
  29:main.c        **** 				fprintf(&lcd_stream, "Zamontowano");
  61               		.loc 1 29 0
  62 0026 60E0      		ldi r22,lo8(lcd_stream)
  63 0028 70E0      		ldi r23,hi8(lcd_stream)
  64 002a 80E0      		ldi r24,lo8(.LC1)
  65 002c 90E0      		ldi r25,hi8(.LC1)
  66 002e 00C0      		rjmp .L11
  67               	.L2:
  30:main.c        **** 			}
  31:main.c        **** 				
  32:main.c        **** 			else{
  33:main.c        **** 				lcd_set_xy(0,0);
  68               		.loc 1 33 0
  69 0030 80E0      		ldi r24,0
  70 0032 0E94 0000 		call lcd_set_xy
  34:main.c        **** 				fprintf(&lcd_stream, "Klopoty");
  71               		.loc 1 34 0
  72 0036 60E0      		ldi r22,lo8(lcd_stream)
  73 0038 70E0      		ldi r23,hi8(lcd_stream)
  74 003a 80E0      		ldi r24,lo8(.LC2)
  75 003c 90E0      		ldi r25,hi8(.LC2)
  76               	.L11:
  77 003e 0E94 0000 		call fputs
  78               	.LBB7:
  79               	.LBB8:
  80               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  81               		.loc 2 187 0
  82 0042 2FEF      		ldi r18,lo8(6399999)
  83 0044 87EA      		ldi r24,hi8(6399999)
  84 0046 91E6      		ldi r25,hlo8(6399999)
  85 0048 2150      	1:	subi r18,1
  86 004a 8040      		sbci r24,0
  87 004c 9040      		sbci r25,0
  88 004e 01F4      		brne 1b
  89 0050 00C0      		rjmp .
  90 0052 0000      		nop
  91               	.LBE8:
  92               	.LBE7:
  35:main.c        **** 			}
  36:main.c        **** 			_delay_ms(2000);
  37:main.c        **** 			
  38:main.c        **** 			//Checking if file exists
  39:main.c        **** 			sprintf(buffer, "data%d.txt", count);
  93               		.loc 1 39 0
  94 0054 8091 0000 		lds r24,count
  95 0058 1F92      		push __zero_reg__
  96               	.LCFI0:
  97               		.cfi_def_cfa_offset 3
  98 005a 8F93      		push r24
  99               	.LCFI1:
 100               		.cfi_def_cfa_offset 4
 101 005c 80E0      		ldi r24,lo8(.LC3)
 102 005e 90E0      		ldi r25,hi8(.LC3)
 103 0060 9F93      		push r25
 104               	.LCFI2:
 105               		.cfi_def_cfa_offset 5
 106 0062 8F93      		push r24
 107               	.LCFI3:
 108               		.cfi_def_cfa_offset 6
 109 0064 80E0      		ldi r24,lo8(buffer)
 110 0066 90E0      		ldi r25,hi8(buffer)
 111 0068 9F93      		push r25
 112               	.LCFI4:
 113               		.cfi_def_cfa_offset 7
 114 006a 8F93      		push r24
 115               	.LCFI5:
 116               		.cfi_def_cfa_offset 8
 117 006c 0E94 0000 		call sprintf
  40:main.c        **** 			fr = f_stat(buffer, &fno);
 118               		.loc 1 40 0
 119 0070 60E0      		ldi r22,lo8(fno)
 120 0072 70E0      		ldi r23,hi8(fno)
 121 0074 80E0      		ldi r24,lo8(buffer)
 122 0076 90E0      		ldi r25,hi8(buffer)
 123 0078 0E94 0000 		call f_stat
 124 007c 8093 0000 		sts fr,r24
  41:main.c        **** 			while(!fr){
 125               		.loc 1 41 0
 126 0080 0F90      		pop __tmp_reg__
 127 0082 0F90      		pop __tmp_reg__
 128 0084 0F90      		pop __tmp_reg__
 129 0086 0F90      		pop __tmp_reg__
 130 0088 0F90      		pop __tmp_reg__
 131 008a 0F90      		pop __tmp_reg__
 132               	.LCFI6:
 133               		.cfi_def_cfa_offset 2
  42:main.c        **** 				count++;
  43:main.c        **** 				sprintf(buffer, "data%d.txt", count);
 134               		.loc 1 43 0
 135 008c C0E0      		ldi r28,lo8(.LC3)
 136 008e D0E0      		ldi r29,hi8(.LC3)
 137 0090 00E0      		ldi r16,lo8(buffer)
 138 0092 10E0      		ldi r17,hi8(buffer)
 139               	.L4:
  41:main.c        **** 			while(!fr){
 140               		.loc 1 41 0
 141 0094 8091 0000 		lds r24,fr
 142 0098 8111      		cpse r24,__zero_reg__
 143 009a 00C0      		rjmp .L14
  42:main.c        **** 				count++;
 144               		.loc 1 42 0
 145 009c 8091 0000 		lds r24,count
 146 00a0 8F5F      		subi r24,lo8(-(1))
 147 00a2 8093 0000 		sts count,r24
 148               		.loc 1 43 0
 149 00a6 1F92      		push __zero_reg__
 150               	.LCFI7:
 151               		.cfi_def_cfa_offset 3
 152 00a8 8F93      		push r24
 153               	.LCFI8:
 154               		.cfi_def_cfa_offset 4
 155 00aa DF93      		push r29
 156               	.LCFI9:
 157               		.cfi_def_cfa_offset 5
 158 00ac CF93      		push r28
 159               	.LCFI10:
 160               		.cfi_def_cfa_offset 6
 161 00ae 1F93      		push r17
 162               	.LCFI11:
 163               		.cfi_def_cfa_offset 7
 164 00b0 0F93      		push r16
 165               	.LCFI12:
 166               		.cfi_def_cfa_offset 8
 167 00b2 0E94 0000 		call sprintf
  44:main.c        **** 				fr = f_stat(buffer, &fno);
 168               		.loc 1 44 0
 169 00b6 60E0      		ldi r22,lo8(fno)
 170 00b8 70E0      		ldi r23,hi8(fno)
 171 00ba 80E0      		ldi r24,lo8(buffer)
 172 00bc 90E0      		ldi r25,hi8(buffer)
 173 00be 0E94 0000 		call f_stat
 174 00c2 8093 0000 		sts fr,r24
 175 00c6 0F90      		pop __tmp_reg__
 176 00c8 0F90      		pop __tmp_reg__
 177 00ca 0F90      		pop __tmp_reg__
 178 00cc 0F90      		pop __tmp_reg__
 179 00ce 0F90      		pop __tmp_reg__
 180 00d0 0F90      		pop __tmp_reg__
 181               	.LCFI13:
 182               		.cfi_def_cfa_offset 2
 183 00d2 00C0      		rjmp .L4
 184               	.L14:
  45:main.c        **** 			}
  46:main.c        **** 			
  47:main.c        **** 			/* Open a text file */
  48:main.c        **** 			fr = f_open(&fil, buffer, FA_CREATE_ALWAYS | FA_WRITE); 
 185               		.loc 1 48 0
 186 00d4 4AE0      		ldi r20,lo8(10)
 187 00d6 60E0      		ldi r22,lo8(buffer)
 188 00d8 70E0      		ldi r23,hi8(buffer)
 189 00da 80E0      		ldi r24,lo8(fil)
 190 00dc 90E0      		ldi r25,hi8(fil)
 191 00de 0E94 0000 		call f_open
 192 00e2 8093 0000 		sts fr,r24
  49:main.c        **** 			if (fr == 0){
  50:main.c        **** 				lcd_set_xy(0,0);
 193               		.loc 1 50 0
 194 00e6 60E0      		ldi r22,0
  49:main.c        **** 			if (fr == 0){
 195               		.loc 1 49 0
 196 00e8 8111      		cpse r24,__zero_reg__
 197 00ea 00C0      		rjmp .L6
 198               		.loc 1 50 0
 199 00ec 0E94 0000 		call lcd_set_xy
  51:main.c        **** 				fprintf(&lcd_stream, "Wzieto otwarto plik c:");
 200               		.loc 1 51 0
 201 00f0 60E0      		ldi r22,lo8(lcd_stream)
 202 00f2 70E0      		ldi r23,hi8(lcd_stream)
 203 00f4 80E0      		ldi r24,lo8(.LC4)
 204 00f6 90E0      		ldi r25,hi8(.LC4)
 205 00f8 00C0      		rjmp .L12
 206               	.L6:
  52:main.c        **** 			}
  53:main.c        **** 				
  54:main.c        **** 			else{
  55:main.c        **** 				lcd_set_xy(0,0);
 207               		.loc 1 55 0
 208 00fa 80E0      		ldi r24,0
 209 00fc 0E94 0000 		call lcd_set_xy
  56:main.c        **** 				fprintf(&lcd_stream, "Nie otwarto pliku :c");
 210               		.loc 1 56 0
 211 0100 60E0      		ldi r22,lo8(lcd_stream)
 212 0102 70E0      		ldi r23,hi8(lcd_stream)
 213 0104 80E0      		ldi r24,lo8(.LC5)
 214 0106 90E0      		ldi r25,hi8(.LC5)
 215               	.L12:
 216 0108 0E94 0000 		call fputs
  57:main.c        **** 			}
  58:main.c        **** 			
  59:main.c        **** 			PORTD |= (1<<7);
 217               		.loc 1 59 0
 218 010c 979A      		sbi 0x12,7
  60:main.c        **** 			count = 0;	
 219               		.loc 1 60 0
 220 010e 1092 0000 		sts count,__zero_reg__
 221               	.LBB9:
  61:main.c        **** 	//END SECTION SD
  62:main.c        **** 		
  63:main.c        **** 	while(1)
  64:main.c        **** 	{
  65:main.c        **** 		OW_reset();
  66:main.c        **** 		//skip rom to jest hej wy termometry
  67:main.c        **** 		OW_send(0xCC); //SKIP ROM
  68:main.c        **** 		OW_send(0x44); //CONVERT T mierzcie temperature
  69:main.c        **** 		_delay_ms(1000); //co sekunde pomiar temperatury
  70:main.c        **** 		
  71:main.c        **** 		
  72:main.c        **** 		
  73:main.c        **** 		OW_reset();
  74:main.c        **** 		OW_send(0xCC);//hej wy
  75:main.c        **** 		OW_send(0xBE); //dajta temperature
  76:main.c        **** 		uint8_t mlodsze = OW_recv();
  77:main.c        **** 		uint8_t starsze = OW_recv();
  78:main.c        **** 		uint16_t temperatura = (starsze<<8)|(mlodsze);
  79:main.c        **** 		
  80:main.c        **** 		uint8_t star = temperatura >> 4;
  81:main.c        **** 		uint16_t mlod = (temperatura & (0x0f))*625;
 222               		.loc 1 81 0
 223 0112 91E7      		ldi r25,lo8(113)
 224 0114 892E      		mov r8,r25
 225 0116 92E0      		ldi r25,lo8(2)
 226 0118 992E      		mov r9,r25
  82:main.c        **** 		
  83:main.c        **** 		lcd_set_xy(0,1);
  84:main.c        **** 		fprintf(&lcd_stream, "T = %d.%04d %c C", star, mlod, 0b11011111);
 227               		.loc 1 84 0
 228 011a 2FED      		ldi r18,lo8(-33)
 229 011c 522E      		mov r5,r18
 230 011e 30E0      		ldi r19,lo8(.LC6)
 231 0120 A32E      		mov r10,r19
 232 0122 30E0      		ldi r19,hi8(.LC6)
 233 0124 B32E      		mov r11,r19
 234 0126 40E0      		ldi r20,lo8(lcd_stream)
 235 0128 C42E      		mov r12,r20
 236 012a 40E0      		ldi r20,hi8(lcd_stream)
 237 012c D42E      		mov r13,r20
  85:main.c        **** 		sprintf(buffer, "%d \t %d.%04d\n", count, star, mlod);
 238               		.loc 1 85 0
 239 012e 50E0      		ldi r21,lo8(.LC7)
 240 0130 652E      		mov r6,r21
 241 0132 50E0      		ldi r21,hi8(.LC7)
 242 0134 752E      		mov r7,r21
 243 0136 60E0      		ldi r22,lo8(buffer)
 244 0138 E62E      		mov r14,r22
 245 013a 60E0      		ldi r22,hi8(buffer)
 246 013c F62E      		mov r15,r22
 247               	.L8:
  65:main.c        **** 		//skip rom to jest hej wy termometry
 248               		.loc 1 65 0
 249 013e 0E94 0000 		call OW_reset
  67:main.c        **** 		OW_send(0x44); //CONVERT T mierzcie temperature
 250               		.loc 1 67 0
 251 0142 8CEC      		ldi r24,lo8(-52)
 252 0144 0E94 0000 		call OW_send
  68:main.c        **** 		_delay_ms(1000); //co sekunde pomiar temperatury
 253               		.loc 1 68 0
 254 0148 84E4      		ldi r24,lo8(68)
 255 014a 0E94 0000 		call OW_send
 256               	.LBB10:
 257               	.LBB11:
 258               		.loc 2 187 0
 259 014e 9FEF      		ldi r25,lo8(3199999)
 260 0150 23ED      		ldi r18,hi8(3199999)
 261 0152 80E3      		ldi r24,hlo8(3199999)
 262 0154 9150      	1:	subi r25,1
 263 0156 2040      		sbci r18,0
 264 0158 8040      		sbci r24,0
 265 015a 01F4      		brne 1b
 266 015c 00C0      		rjmp .
 267 015e 0000      		nop
 268               	.LBE11:
 269               	.LBE10:
  73:main.c        **** 		OW_send(0xCC);//hej wy
 270               		.loc 1 73 0
 271 0160 0E94 0000 		call OW_reset
  74:main.c        **** 		OW_send(0xBE); //dajta temperature
 272               		.loc 1 74 0
 273 0164 8CEC      		ldi r24,lo8(-52)
 274 0166 0E94 0000 		call OW_send
  75:main.c        **** 		uint8_t mlodsze = OW_recv();
 275               		.loc 1 75 0
 276 016a 8EEB      		ldi r24,lo8(-66)
 277 016c 0E94 0000 		call OW_send
  76:main.c        **** 		uint8_t starsze = OW_recv();
 278               		.loc 1 76 0
 279 0170 0E94 0000 		call OW_recv
 280 0174 C82F      		mov r28,r24
  77:main.c        **** 		uint16_t temperatura = (starsze<<8)|(mlodsze);
 281               		.loc 1 77 0
 282 0176 0E94 0000 		call OW_recv
  78:main.c        **** 		
 283               		.loc 1 78 0
 284 017a D0E0      		ldi r29,0
 285 017c D82B      		or r29,r24
  81:main.c        **** 		
 286               		.loc 1 81 0
 287 017e CE01      		movw r24,r28
 288 0180 8F70      		andi r24,15
 289 0182 9927      		clr r25
 290 0184 889D      		mul r24,r8
 291 0186 8001      		movw r16,r0
 292 0188 899D      		mul r24,r9
 293 018a 100D      		add r17,r0
 294 018c 989D      		mul r25,r8
 295 018e 100D      		add r17,r0
 296 0190 1124      		clr r1
  83:main.c        **** 		fprintf(&lcd_stream, "T = %d.%04d %c C", star, mlod, 0b11011111);
 297               		.loc 1 83 0
 298 0192 61E0      		ldi r22,lo8(1)
 299 0194 80E0      		ldi r24,0
 300 0196 0E94 0000 		call lcd_set_xy
  84:main.c        **** 		sprintf(buffer, "%d \t %d.%04d\n", count, star, mlod);
 301               		.loc 1 84 0
 302 019a 84E0      		ldi r24,4
 303               		1:
 304 019c D695      		lsr r29
 305 019e C795      		ror r28
 306 01a0 8A95      		dec r24
 307 01a2 01F4      		brne 1b
 308 01a4 DD27      		clr r29
 309 01a6 1F92      		push __zero_reg__
 310               	.LCFI14:
 311               		.cfi_def_cfa_offset 3
 312 01a8 5F92      		push r5
 313               	.LCFI15:
 314               		.cfi_def_cfa_offset 4
 315 01aa 1F93      		push r17
 316               	.LCFI16:
 317               		.cfi_def_cfa_offset 5
 318 01ac 0F93      		push r16
 319               	.LCFI17:
 320               		.cfi_def_cfa_offset 6
 321 01ae DF93      		push r29
 322               	.LCFI18:
 323               		.cfi_def_cfa_offset 7
 324 01b0 CF93      		push r28
 325               	.LCFI19:
 326               		.cfi_def_cfa_offset 8
 327 01b2 BF92      		push r11
 328               	.LCFI20:
 329               		.cfi_def_cfa_offset 9
 330 01b4 AF92      		push r10
 331               	.LCFI21:
 332               		.cfi_def_cfa_offset 10
 333 01b6 DF92      		push r13
 334               	.LCFI22:
 335               		.cfi_def_cfa_offset 11
 336 01b8 CF92      		push r12
 337               	.LCFI23:
 338               		.cfi_def_cfa_offset 12
 339 01ba 0E94 0000 		call fprintf
 340               		.loc 1 85 0
 341 01be 1F93      		push r17
 342               	.LCFI24:
 343               		.cfi_def_cfa_offset 13
 344 01c0 0F93      		push r16
 345               	.LCFI25:
 346               		.cfi_def_cfa_offset 14
 347 01c2 DF93      		push r29
 348               	.LCFI26:
 349               		.cfi_def_cfa_offset 15
 350 01c4 CF93      		push r28
 351               	.LCFI27:
 352               		.cfi_def_cfa_offset 16
 353 01c6 8091 0000 		lds r24,count
 354 01ca 1F92      		push __zero_reg__
 355               	.LCFI28:
 356               		.cfi_def_cfa_offset 17
 357 01cc 8F93      		push r24
 358               	.LCFI29:
 359               		.cfi_def_cfa_offset 18
 360 01ce 7F92      		push r7
 361               	.LCFI30:
 362               		.cfi_def_cfa_offset 19
 363 01d0 6F92      		push r6
 364               	.LCFI31:
 365               		.cfi_def_cfa_offset 20
 366 01d2 FF92      		push r15
 367               	.LCFI32:
 368               		.cfi_def_cfa_offset 21
 369 01d4 EF92      		push r14
 370               	.LCFI33:
 371               		.cfi_def_cfa_offset 22
 372 01d6 0E94 0000 		call sprintf
  86:main.c        **** 		f_write(&fil, buffer, strlen(buffer), &bw);
 373               		.loc 1 86 0
 374 01da F701      		movw r30,r14
 375               		0:
 376 01dc 0190      		ld __tmp_reg__,Z+
 377 01de 0020      		tst __tmp_reg__
 378 01e0 01F4      		brne 0b
 379 01e2 3197      		sbiw r30,1
 380 01e4 AF01      		movw r20,r30
 381 01e6 4050      		subi r20,lo8(buffer)
 382 01e8 5040      		sbci r21,hi8(buffer)
 383 01ea 20E0      		ldi r18,lo8(bw)
 384 01ec 30E0      		ldi r19,hi8(bw)
 385 01ee 60E0      		ldi r22,lo8(buffer)
 386 01f0 70E0      		ldi r23,hi8(buffer)
 387 01f2 80E0      		ldi r24,lo8(fil)
 388 01f4 90E0      		ldi r25,hi8(fil)
 389 01f6 0E94 0000 		call f_write
  87:main.c        **** 		count ++;
 390               		.loc 1 87 0
 391 01fa 8091 0000 		lds r24,count
 392 01fe 8F5F      		subi r24,lo8(-(1))
 393 0200 8093 0000 		sts count,r24
  88:main.c        **** 		if(!(PIND&(1<<7))){
 394               		.loc 1 88 0
 395 0204 8DB7      		in r24,__SP_L__
 396 0206 9EB7      		in r25,__SP_H__
 397 0208 4496      		adiw r24,20
 398 020a 0FB6      		in __tmp_reg__,__SREG__
 399 020c F894      		cli
 400 020e 9EBF      		out __SP_H__,r25
 401 0210 0FBE      		out __SREG__,__tmp_reg__
 402 0212 8DBF      		out __SP_L__,r24
 403               	.LCFI34:
 404               		.cfi_def_cfa_offset 2
 405 0214 8799      		sbic 0x10,7
 406 0216 00C0      		rjmp .L8
  89:main.c        **** 			f_close(&fil);
 407               		.loc 1 89 0
 408 0218 80E0      		ldi r24,lo8(fil)
 409 021a 90E0      		ldi r25,hi8(fil)
 410 021c 0E94 0000 		call f_close
  90:main.c        **** 			f_unmount("");
 411               		.loc 1 90 0
 412 0220 40E0      		ldi r20,0
 413 0222 60E0      		ldi r22,lo8(.LC0)
 414 0224 70E0      		ldi r23,hi8(.LC0)
 415 0226 80E0      		ldi r24,0
 416 0228 90E0      		ldi r25,0
 417 022a 0E94 0000 		call f_mount
  91:main.c        **** 			lcd_set_xy(0,0);
 418               		.loc 1 91 0
 419 022e 60E0      		ldi r22,0
 420 0230 80E0      		ldi r24,0
 421 0232 0E94 0000 		call lcd_set_xy
  92:main.c        **** 			fprintf(&lcd_stream, "Zegnaj.... :c");
 422               		.loc 1 92 0
 423 0236 60E0      		ldi r22,lo8(lcd_stream)
 424 0238 70E0      		ldi r23,hi8(lcd_stream)
 425 023a 80E0      		ldi r24,lo8(.LC8)
 426 023c 90E0      		ldi r25,hi8(.LC8)
 427 023e 0E94 0000 		call fputs
 428               	.L9:
 429 0242 00C0      		rjmp .L9
 430               	.LBE9:
 431               		.cfi_endproc
 432               	.LFE8:
 434               		.comm	count,1,1
 435               		.comm	fno,22,1
 436               		.comm	bw,2,1
 437               		.comm	buffer,20,1
 438               		.comm	fil,34,1
 439               		.comm	fr,1,1
 440               		.comm	FatFs,559,1
 441               	.global	tekst
 442               		.section	.progmem.data,"a",@progbits
 445               	tekst:
 446 0000 416C 6120 		.string	"Ala ma kota"
 446      6D61 206B 
 446      6F74 6100 
 447               	.global	lcd_stream
 448               		.data
 451               	lcd_stream:
 452 0000 0000 00   		.zero	3
 453 0003 02        		.byte	2
 454 0004 0000 0000 		.zero	4
 455 0008 0000      		.word	gs(lcd_puts)
 456 000a 0000      		.word	0
 457 000c 0000      		.word	0
 458               		.text
 459               	.Letext0:
 460               		.file 3 "/usr/lib/avr/include/stdint.h"
 461               		.file 4 "/usr/lib/avr/include/stdio.h"
 462               		.file 5 "ff.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccpLsW81.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccpLsW81.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccpLsW81.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccpLsW81.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccpLsW81.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccpLsW81.s:32     .text.startup:0000000000000000 main
                            *COM*:000000000000022f FatFs
                            *COM*:0000000000000001 fr
     /tmp/ccpLsW81.s:451    .data:0000000000000000 lcd_stream
                            *COM*:0000000000000001 count
                            *COM*:0000000000000014 buffer
                            *COM*:0000000000000016 fno
                            *COM*:0000000000000022 fil
                            *COM*:0000000000000002 bw
     /tmp/ccpLsW81.s:445    .progmem.data:0000000000000000 tekst

UNDEFINED SYMBOLS
lcdinit
blinking
f_mount
lcd_set_xy
fputs
sprintf
f_stat
f_open
OW_reset
OW_send
OW_recv
fprintf
f_write
f_close
lcd_puts
__do_copy_data
__do_clear_bss
