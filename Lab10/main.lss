
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00004444  000044d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000286  00800180  00800180  000045f8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000045f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000460c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e40  00000000  00000000  000046e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100e  00000000  00000000  0000a528  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025e8  00000000  00000000  0000b536  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000edc  00000000  00000000  0000db20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1d  00000000  00000000  0000e9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000073bf  00000000  00000000  0000f419  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000167d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      10:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__vector_4>
      14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	2a 1c       	adc	r2, r10
      56:	2d 1c       	adc	r2, r13
      58:	49 1d       	adc	r20, r9
      5a:	8e 1c       	adc	r8, r14
      5c:	49 1d       	adc	r20, r9
      5e:	49 1d       	adc	r20, r9
      60:	49 1d       	adc	r20, r9
      62:	49 1d       	adc	r20, r9
      64:	49 1d       	adc	r20, r9
      66:	49 1d       	adc	r20, r9
      68:	0a 1d       	adc	r16, r10
      6a:	0f 1d       	adc	r16, r15
      6c:	14 1d       	adc	r17, r4
      6e:	1f 1d       	adc	r17, r15
      70:	35 1d       	adc	r19, r5

00000072 <__trampolines_end>:
      72:	41 6c       	ori	r20, 0xC1	; 193
      74:	61 20       	and	r6, r1
      76:	6d 61       	ori	r22, 0x1D	; 29
      78:	20 6b       	ori	r18, 0xB0	; 176
      7a:	6f 74       	andi	r22, 0x4F	; 79
      7c:	61 00       	.word	0x0061	; ????

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf e5       	ldi	r28, 0x5F	; 95
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	e4 e4       	ldi	r30, 0x44	; 68
      92:	f4 e4       	ldi	r31, 0x44	; 68
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a0 38       	cpi	r26, 0x80	; 128
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	24 e0       	ldi	r18, 0x04	; 4
      a2:	a0 e8       	ldi	r26, 0x80	; 128
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a6 30       	cpi	r26, 0x06	; 6
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <main>
      b4:	0c 94 20 22 	jmp	0x4440	; 0x4440 <_exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <lcd_write_instr>:
#include "lcd.h"

void lcd_write_instr(uint8_t data) //funkcja wysyłająca pojedynczą instrukcję do wyświetlacza↪→
{
	LCD_PORT &= ~(1<<LCD_RS); // zrobilismy zapis 
      bc:	da 98       	cbi	0x1b, 2	; 27
	
	//wysylamy starsza
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
      be:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
      c0:	9b b3       	in	r25, 0x1b	; 27
      c2:	28 2f       	mov	r18, r24
      c4:	20 7f       	andi	r18, 0xF0	; 240
      c6:	9f 70       	andi	r25, 0x0F	; 15
      c8:	92 2b       	or	r25, r18
      ca:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      cc:	ef e9       	ldi	r30, 0x9F	; 159
      ce:	ff e0       	ldi	r31, 0x0F	; 15
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_write_instr+0x14>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_write_instr+0x1a>
      d6:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
      d8:	db 98       	cbi	0x1b, 3	; 27
      da:	ef e9       	ldi	r30, 0x9F	; 159
      dc:	ff e0       	ldi	r31, 0x0F	; 15
      de:	31 97       	sbiw	r30, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <lcd_write_instr+0x22>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_write_instr+0x28>
      e4:	00 00       	nop
	_delay_ms(1);
	
	//wysylamy mlodsza
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
      e6:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
      e8:	2b b3       	in	r18, 0x1b	; 27
      ea:	f0 e1       	ldi	r31, 0x10	; 16
      ec:	8f 9f       	mul	r24, r31
      ee:	c0 01       	movw	r24, r0
      f0:	11 24       	eor	r1, r1
      f2:	92 2f       	mov	r25, r18
      f4:	9f 70       	andi	r25, 0x0F	; 15
      f6:	89 2b       	or	r24, r25
      f8:	8b bb       	out	0x1b, r24	; 27
      fa:	8f e9       	ldi	r24, 0x9F	; 159
      fc:	9f e0       	ldi	r25, 0x0F	; 15
      fe:	01 97       	sbiw	r24, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <lcd_write_instr+0x42>
     102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_write_instr+0x48>
     104:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
     106:	db 98       	cbi	0x1b, 3	; 27
     108:	ef e9       	ldi	r30, 0x9F	; 159
     10a:	ff e0       	ldi	r31, 0x0F	; 15
     10c:	31 97       	sbiw	r30, 0x01	; 1
     10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_write_instr+0x50>
     110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_write_instr+0x56>
     112:	00 00       	nop
     114:	08 95       	ret

00000116 <lcd_write_data>:
}


void lcd_write_data(uint8_t data) //funkcja wysyłająca pojedynczą daną do wyświetlacza↪→
{
	LCD_PORT |= (1<<LCD_RS); // ustawiamy 1 
     116:	da 9a       	sbi	0x1b, 2	; 27
	
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
     118:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data & 0xF0) | (LCD_PORT & 0x0F);
     11a:	9b b3       	in	r25, 0x1b	; 27
     11c:	28 2f       	mov	r18, r24
     11e:	20 7f       	andi	r18, 0xF0	; 240
     120:	9f 70       	andi	r25, 0x0F	; 15
     122:	92 2b       	or	r25, r18
     124:	9b bb       	out	0x1b, r25	; 27
     126:	ef e9       	ldi	r30, 0x9F	; 159
     128:	ff e0       	ldi	r31, 0x0F	; 15
     12a:	31 97       	sbiw	r30, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_write_data+0x14>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_write_data+0x1a>
     130:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
     132:	db 98       	cbi	0x1b, 3	; 27
     134:	ef e9       	ldi	r30, 0x9F	; 159
     136:	ff e0       	ldi	r31, 0x0F	; 15
     138:	31 97       	sbiw	r30, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_write_data+0x22>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_write_data+0x28>
     13e:	00 00       	nop
	_delay_ms(1);
	
	LCD_PORT |= (1<<LCD_E); //ustawiamy 1 na E
     140:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (data << 4) | (LCD_PORT & 0x0F);
     142:	2b b3       	in	r18, 0x1b	; 27
     144:	f0 e1       	ldi	r31, 0x10	; 16
     146:	8f 9f       	mul	r24, r31
     148:	c0 01       	movw	r24, r0
     14a:	11 24       	eor	r1, r1
     14c:	92 2f       	mov	r25, r18
     14e:	9f 70       	andi	r25, 0x0F	; 15
     150:	89 2b       	or	r24, r25
     152:	8b bb       	out	0x1b, r24	; 27
     154:	8f e9       	ldi	r24, 0x9F	; 159
     156:	9f e0       	ldi	r25, 0x0F	; 15
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_write_data+0x42>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_write_data+0x48>
     15e:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1<<LCD_E);
     160:	db 98       	cbi	0x1b, 3	; 27
     162:	ef e9       	ldi	r30, 0x9F	; 159
     164:	ff e0       	ldi	r31, 0x0F	; 15
     166:	31 97       	sbiw	r30, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <lcd_write_data+0x50>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_write_data+0x56>
     16c:	00 00       	nop
     16e:	08 95       	ret

00000170 <lcdinit>:
	_delay_ms(1);
}

void lcdinit(void) //inicjalizacja wyswietlacza
{	
	LCD_DDR = 0xff; //ca;y port wyjsciowy
     170:	8f ef       	ldi	r24, 0xFF	; 255
     172:	8a bb       	out	0x1a, r24	; 26
     174:	2f e7       	ldi	r18, 0x7F	; 127
     176:	82 e3       	ldi	r24, 0x32	; 50
     178:	92 e0       	ldi	r25, 0x02	; 2
     17a:	21 50       	subi	r18, 0x01	; 1
     17c:	80 40       	sbci	r24, 0x00	; 0
     17e:	90 40       	sbci	r25, 0x00	; 0
     180:	e1 f7       	brne	.-8      	; 0x17a <lcdinit+0xa>
     182:	00 c0       	rjmp	.+0      	; 0x184 <lcdinit+0x14>
     184:	00 00       	nop
	_delay_ms(45);
	lcd_write_instr(0x33);
     186:	83 e3       	ldi	r24, 0x33	; 51
     188:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write_instr>
	lcd_write_instr(0x32);
     18c:	82 e3       	ldi	r24, 0x32	; 50
     18e:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write_instr>
	
	lcd_write_instr(0x28); //konfiguruje wyswietlacz
     192:	88 e2       	ldi	r24, 0x28	; 40
     194:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write_instr>
	lcd_write_instr(0x08);
     198:	88 e0       	ldi	r24, 0x08	; 8
     19a:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write_instr>
	lcd_write_instr(0x01); //czysci
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write_instr>
	lcd_write_instr(0x06);
     1a4:	86 e0       	ldi	r24, 0x06	; 6
     1a6:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write_instr>
	lcd_write_instr(0x0f);
     1aa:	8f e0       	ldi	r24, 0x0F	; 15
     1ac:	0c 94 5e 00 	jmp	0xbc	; 0xbc <lcd_write_instr>

000001b0 <lcd_clear>:
	
}

void lcd_clear(void)
{
	lcd_write_instr(0x01);
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0c 94 5e 00 	jmp	0xbc	; 0xbc <lcd_write_instr>

000001b6 <lcd_set_xy>:
}

void lcd_set_xy(uint8_t x, uint8_t y)
{
	lcd_write_instr(0x80 + x + y * 0x40);
     1b6:	80 58       	subi	r24, 0x80	; 128
     1b8:	90 e4       	ldi	r25, 0x40	; 64
     1ba:	69 9f       	mul	r22, r25
     1bc:	80 0d       	add	r24, r0
     1be:	11 24       	eor	r1, r1
     1c0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <lcd_write_instr>

000001c4 <lcd_write_text_xy>:
}

void lcd_write_text_xy(uint8_t x, uint8_t y, char *text)
{
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	8a 01       	movw	r16, r20
	lcd_set_xy(x,y);
     1ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_set_xy>
     1d2:	e8 01       	movw	r28, r16
	while(*text){
     1d4:	89 91       	ld	r24, Y+
     1d6:	88 23       	and	r24, r24
     1d8:	19 f0       	breq	.+6      	; 0x1e0 <lcd_write_text_xy+0x1c>
		lcd_write_data(*text);
     1da:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_data>
     1de:	fa cf       	rjmp	.-12     	; 0x1d4 <lcd_write_text_xy+0x10>
		text++;
	}
}
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	1f 91       	pop	r17
     1e6:	0f 91       	pop	r16
     1e8:	08 95       	ret

000001ea <lcd_puts>:

int lcd_puts(char c, FILE *unused)
{
	lcd_write_data(c);
     1ea:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_data>
	return 0;
}
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	08 95       	ret

000001f4 <blinking>:

void blinking(uint8_t t){
	if(t == 0 )
     1f4:	81 11       	cpse	r24, r1
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <blinking+0x8>
		lcd_write_instr(0b1100);
     1f8:	8c e0       	ldi	r24, 0x0C	; 12
     1fa:	03 c0       	rjmp	.+6      	; 0x202 <blinking+0xe>
	if(t == 1)
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	19 f4       	brne	.+6      	; 0x206 <blinking+0x12>
		lcd_write_instr(0b1111);
     200:	8f e0       	ldi	r24, 0x0F	; 15
     202:	0c 94 5e 00 	jmp	0xbc	; 0xbc <lcd_write_instr>
     206:	08 95       	ret

00000208 <OW_reset>:

uint8_t OW_reset(void){ //przywitanie 
	uint8_t result;
	_delay_us(0);
	//outp(PORTADDRESS,0x00); // Drives DQ low <- sprowadza magistrale w stan niski, odpowiednikiem jest nasze makro OWLoW
	OW_low;
     208:	bb 9a       	sbi	0x17, 3	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	8f e7       	ldi	r24, 0x7F	; 127
     20c:	97 e0       	ldi	r25, 0x07	; 7
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <OW_reset+0x6>
     212:	00 c0       	rjmp	.+0      	; 0x214 <OW_reset+0xc>
     214:	00 00       	nop
	_delay_us(480);
	//outp(PORTADDRESS,0x01); // Releases the bus <-OWHigh robi to samo
	OW_high;
     216:	bb 98       	cbi	0x17, 3	; 23
     218:	e7 e1       	ldi	r30, 0x17	; 23
     21a:	f1 e0       	ldi	r31, 0x01	; 1
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <OW_reset+0x14>
     220:	00 c0       	rjmp	.+0      	; 0x222 <OW_reset+0x1a>
     222:	00 00       	nop
	_delay_us(70);
	//result = inp(PORTADDRESS) ^ 0x01; // Sample for presence pulse from slave <- owcheck
	result = OW_check;
     224:	86 b3       	in	r24, 0x16	; 22
     226:	e7 e6       	ldi	r30, 0x67	; 103
     228:	f6 e0       	ldi	r31, 0x06	; 6
     22a:	31 97       	sbiw	r30, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <OW_reset+0x22>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <OW_reset+0x28>
     230:	00 00       	nop
	_delay_us(410); // Complete the reset sequence recovery
	return result; // Return sample presence pulse result
}
     232:	88 70       	andi	r24, 0x08	; 8
     234:	08 95       	ret

00000236 <OWWriteBit>:
void OWWriteBit(uint8_t byte){ //wysylanie bit
	if(byte)
	{
		// Write '1' bit
		//outp(PORTADDRESS,0x00); // Drives DQ low
		OW_low;
     236:	bb 9a       	sbi	0x17, 3	; 23
	_delay_us(410); // Complete the reset sequence recovery
	return result; // Return sample presence pulse result
}

void OWWriteBit(uint8_t byte){ //wysylanie bit
	if(byte)
     238:	88 23       	and	r24, r24
     23a:	51 f0       	breq	.+20     	; 0x250 <OWWriteBit+0x1a>
     23c:	80 e2       	ldi	r24, 0x20	; 32
     23e:	8a 95       	dec	r24
     240:	f1 f7       	brne	.-4      	; 0x23e <OWWriteBit+0x8>
		// Write '1' bit
		//outp(PORTADDRESS,0x00); // Drives DQ low
		OW_low;
		_delay_us(6);
		//outp(PORTADDRESS,0x01); // Releases the bus
		OW_high;
     242:	bb 98       	cbi	0x17, 3	; 23
     244:	8f ef       	ldi	r24, 0xFF	; 255
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	01 97       	sbiw	r24, 0x01	; 1
     24a:	f1 f7       	brne	.-4      	; 0x248 <OWWriteBit+0x12>
     24c:	00 c0       	rjmp	.+0      	; 0x24e <OWWriteBit+0x18>
     24e:	0a c0       	rjmp	.+20     	; 0x264 <OWWriteBit+0x2e>
     250:	8f ee       	ldi	r24, 0xEF	; 239
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <OWWriteBit+0x1e>
     258:	00 c0       	rjmp	.+0      	; 0x25a <OWWriteBit+0x24>
     25a:	00 00       	nop
		// Write '0' bit
		//outp(PORTADDRESS,0x00); // Drives DQ low
		OW_low;
		_delay_us(60);
		//outp(PORTADDRESS,0x01); // Releases the bus
		OW_high;
     25c:	bb 98       	cbi	0x17, 3	; 23
     25e:	95 e3       	ldi	r25, 0x35	; 53
     260:	9a 95       	dec	r25
     262:	f1 f7       	brne	.-4      	; 0x260 <OWWriteBit+0x2a>
     264:	00 00       	nop
     266:	08 95       	ret

00000268 <OWReadBit>:
	}
}
uint8_t OWReadBit(void){ //otrzymywanie bit
	uint8_t result;
	//outp(PORTADDRESS,0x00); // Drives DQ low
	OW_low;
     268:	bb 9a       	sbi	0x17, 3	; 23
     26a:	80 e2       	ldi	r24, 0x20	; 32
     26c:	8a 95       	dec	r24
     26e:	f1 f7       	brne	.-4      	; 0x26c <OWReadBit+0x4>
	_delay_us(6);
	//outp(PORTADDRESS,0x01); // Releases the bus
	OW_high;
     270:	bb 98       	cbi	0x17, 3	; 23
     272:	e0 e3       	ldi	r30, 0x30	; 48
     274:	ea 95       	dec	r30
     276:	f1 f7       	brne	.-4      	; 0x274 <OWReadBit+0xc>
	_delay_us(9);
	//result = inp(PORTADDRESS) & 0x01; // Sample the bit value from the slave
	result = OW_check;
     278:	86 b3       	in	r24, 0x16	; 22
     27a:	eb ed       	ldi	r30, 0xDB	; 219
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	31 97       	sbiw	r30, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <OWReadBit+0x16>
     282:	00 c0       	rjmp	.+0      	; 0x284 <OWReadBit+0x1c>
     284:	00 00       	nop
	_delay_us(55); // Complete the time slot and 10us recovery
	return result;
}
     286:	88 70       	andi	r24, 0x08	; 8
     288:	08 95       	ret

0000028a <OW_send>:

void OW_send(uint8_t byte){ //wysylanie bajt
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	d8 2f       	mov	r29, r24
     290:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t loop;
	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
	{
		OWWriteBit(byte & 0x01);
     292:	8d 2f       	mov	r24, r29
     294:	81 70       	andi	r24, 0x01	; 1
     296:	0e 94 1b 01 	call	0x236	; 0x236 <OWWriteBit>
		// shift the data byte for the next bit
		byte >>= 1;
     29a:	d6 95       	lsr	r29
     29c:	c1 50       	subi	r28, 0x01	; 1
}

void OW_send(uint8_t byte){ //wysylanie bajt
	uint8_t loop;
	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
     29e:	c9 f7       	brne	.-14     	; 0x292 <OW_send+0x8>
	{
		OWWriteBit(byte & 0x01);
		// shift the data byte for the next bit
		byte >>= 1;
	}
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <OW_recv>:
uint8_t OW_recv(void){ //otrzymywanie bajt
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t loop, result=0;
     2ac:	c0 e0       	ldi	r28, 0x00	; 0
	for (loop = 0; loop < 8; loop++)
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
     2ae:	c6 95       	lsr	r28
		// if result is one, then set MS bit
		if (OWReadBit())
     2b0:	0e 94 34 01 	call	0x268	; 0x268 <OWReadBit>
     2b4:	81 11       	cpse	r24, r1
			result |= 0x80; //wstawienie 1 do najstarszego bitu
     2b6:	c0 68       	ori	r28, 0x80	; 128
     2b8:	d1 50       	subi	r29, 0x01	; 1
		byte >>= 1;
	}
}
uint8_t OW_recv(void){ //otrzymywanie bajt
	uint8_t loop, result=0;
	for (loop = 0; loop < 8; loop++)
     2ba:	c9 f7       	brne	.-14     	; 0x2ae <OW_recv+0x8>
		// if result is one, then set MS bit
		if (OWReadBit())
			result |= 0x80; //wstawienie 1 do najstarszego bitu
	}
	return result;
}
     2bc:	8c 2f       	mov	r24, r28
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <ld_dword>:
	rv = rv << 8 | ptr[0];
	return rv;
}

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
     2c4:	fc 01       	movw	r30, r24
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
     2c6:	62 81       	ldd	r22, Z+2	; 0x02
     2c8:	73 81       	ldd	r23, Z+3	; 0x03
     2ca:	cb 01       	movw	r24, r22
     2cc:	a0 e0       	ldi	r26, 0x00	; 0
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	ba 2f       	mov	r27, r26
     2d2:	a9 2f       	mov	r26, r25
     2d4:	98 2f       	mov	r25, r24
     2d6:	88 27       	eor	r24, r24
	rv = rv << 8 | ptr[0];
     2d8:	21 81       	ldd	r18, Z+1	; 0x01
     2da:	82 2b       	or	r24, r18
     2dc:	ba 2f       	mov	r27, r26
     2de:	a9 2f       	mov	r26, r25
     2e0:	98 2f       	mov	r25, r24
     2e2:	88 27       	eor	r24, r24
	return rv;
     2e4:	20 81       	ld	r18, Z
     2e6:	bc 01       	movw	r22, r24
     2e8:	cd 01       	movw	r24, r26
     2ea:	62 2b       	or	r22, r18
}
     2ec:	08 95       	ret

000002ee <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	fc 01       	movw	r30, r24
	clst -= 2;		/* Cluster number is origin from 2 */
     2f4:	9a 01       	movw	r18, r20
     2f6:	ab 01       	movw	r20, r22
     2f8:	22 50       	subi	r18, 0x02	; 2
     2fa:	31 09       	sbc	r19, r1
     2fc:	41 09       	sbc	r20, r1
     2fe:	51 09       	sbc	r21, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
     300:	83 89       	ldd	r24, Z+19	; 0x13
     302:	94 89       	ldd	r25, Z+20	; 0x14
     304:	a5 89       	ldd	r26, Z+21	; 0x15
     306:	b6 89       	ldd	r27, Z+22	; 0x16
     308:	02 97       	sbiw	r24, 0x02	; 2
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	28 17       	cp	r18, r24
     310:	39 07       	cpc	r19, r25
     312:	4a 07       	cpc	r20, r26
     314:	5b 07       	cpc	r21, r27
     316:	68 f4       	brcc	.+26     	; 0x332 <clst2sect+0x44>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
     318:	a1 85       	ldd	r26, Z+9	; 0x09
     31a:	b2 85       	ldd	r27, Z+10	; 0x0a
     31c:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__muluhisi3>
     320:	07 a1       	ldd	r16, Z+39	; 0x27
     322:	10 a5       	ldd	r17, Z+40	; 0x28
     324:	21 a5       	ldd	r18, Z+41	; 0x29
     326:	32 a5       	ldd	r19, Z+42	; 0x2a
     328:	60 0f       	add	r22, r16
     32a:	71 1f       	adc	r23, r17
     32c:	82 1f       	adc	r24, r18
     32e:	93 1f       	adc	r25, r19
     330:	03 c0       	rjmp	.+6      	; 0x338 <clst2sect+0x4a>
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	cb 01       	movw	r24, r22
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
}
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	08 95       	ret

0000033e <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	dc 01       	movw	r26, r24
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
     344:	ed 91       	ld	r30, X+
     346:	fc 91       	ld	r31, X
     348:	11 97       	sbiw	r26, 0x01	; 1
	if (!tp) return vol;	/* Invalid path name? */
     34a:	30 97       	sbiw	r30, 0x00	; 0
     34c:	d1 f0       	breq	.+52     	; 0x382 <get_ldnumber+0x44>
     34e:	9f 01       	movw	r18, r30
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
     350:	2f 5f       	subi	r18, 0xFF	; 255
     352:	3f 4f       	sbci	r19, 0xFF	; 255
     354:	e9 01       	movw	r28, r18
     356:	21 97       	sbiw	r28, 0x01	; 1
     358:	88 81       	ld	r24, Y
     35a:	81 32       	cpi	r24, 0x21	; 33
     35c:	78 f0       	brcs	.+30     	; 0x37c <get_ldnumber+0x3e>
     35e:	8a 33       	cpi	r24, 0x3A	; 58
     360:	b9 f7       	brne	.-18     	; 0x350 <get_ldnumber+0x12>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
     362:	90 81       	ld	r25, Z
     364:	80 ed       	ldi	r24, 0xD0	; 208
     366:	89 0f       	add	r24, r25
     368:	8a 30       	cpi	r24, 0x0A	; 10
     36a:	58 f4       	brcc	.+22     	; 0x382 <get_ldnumber+0x44>
     36c:	32 96       	adiw	r30, 0x02	; 2
     36e:	2e 17       	cp	r18, r30
     370:	3f 07       	cpc	r19, r31
     372:	39 f4       	brne	.+14     	; 0x382 <get_ldnumber+0x44>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
     374:	90 33       	cpi	r25, 0x30	; 48
     376:	29 f4       	brne	.+10     	; 0x382 <get_ldnumber+0x44>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
     378:	2d 93       	st	X+, r18
     37a:	3c 93       	st	X, r19
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	02 c0       	rjmp	.+4      	; 0x386 <get_ldnumber+0x48>
	const char *sp;
	char c;
#endif

	tt = tp = *path;
	if (!tp) return vol;	/* Invalid path name? */
     382:	8f ef       	ldi	r24, 0xFF	; 255
     384:	9f ef       	ldi	r25, 0xFF	; 255
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	ec 01       	movw	r28, r24
     396:	8b 01       	movw	r16, r22
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
     398:	89 2b       	or	r24, r25
     39a:	f1 f0       	breq	.+60     	; 0x3d8 <validate+0x4c>
     39c:	e8 81       	ld	r30, Y
     39e:	f9 81       	ldd	r31, Y+1	; 0x01
     3a0:	30 97       	sbiw	r30, 0x00	; 0
     3a2:	d1 f0       	breq	.+52     	; 0x3d8 <validate+0x4c>
     3a4:	80 81       	ld	r24, Z
     3a6:	88 23       	and	r24, r24
     3a8:	b9 f0       	breq	.+46     	; 0x3d8 <validate+0x4c>
     3aa:	2a 81       	ldd	r18, Y+2	; 0x02
     3ac:	3b 81       	ldd	r19, Y+3	; 0x03
     3ae:	85 81       	ldd	r24, Z+5	; 0x05
     3b0:	96 81       	ldd	r25, Z+6	; 0x06
     3b2:	28 17       	cp	r18, r24
     3b4:	39 07       	cpc	r19, r25
     3b6:	81 f4       	brne	.+32     	; 0x3d8 <validate+0x4c>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
     3b8:	81 81       	ldd	r24, Z+1	; 0x01
     3ba:	0e 94 47 1b 	call	0x368e	; 0x368e <disk_status>
     3be:	80 fd       	sbrc	r24, 0
     3c0:	0b c0       	rjmp	.+22     	; 0x3d8 <validate+0x4c>
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     3c2:	28 81       	ld	r18, Y
     3c4:	39 81       	ldd	r19, Y+1	; 0x01
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
     3c6:	80 e0       	ldi	r24, 0x00	; 0
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     3c8:	f8 01       	movw	r30, r16
     3ca:	31 83       	std	Z+1, r19	; 0x01
     3cc:	20 83       	st	Z, r18
	return res;
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	08 95       	ret
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
     3d8:	89 e0       	ldi	r24, 0x09	; 9
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	f4 cf       	rjmp	.-24     	; 0x3c8 <validate+0x3c>

000003e0 <mem_cpy.part.0>:
/*-----------------------------------------------------------------------*/
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
     3e0:	fb 01       	movw	r30, r22
     3e2:	48 0f       	add	r20, r24
     3e4:	59 1f       	adc	r21, r25
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
		do {
			*d++ = *s++;
     3e6:	21 91       	ld	r18, Z+
     3e8:	dc 01       	movw	r26, r24
     3ea:	2d 93       	st	X+, r18
     3ec:	cd 01       	movw	r24, r26
		} while (--cnt);
     3ee:	a4 17       	cp	r26, r20
     3f0:	b5 07       	cpc	r27, r21
     3f2:	c9 f7       	brne	.-14     	; 0x3e6 <mem_cpy.part.0+0x6>
	}
}
     3f4:	08 95       	ret

000003f6 <ld_clust.isra.3>:

/*-----------------------------------------------------------------------*/
/* FAT: Directory handling - Load/Store start cluster number             */
/*-----------------------------------------------------------------------*/

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
     3f6:	fb 01       	movw	r30, r22
	const BYTE* dir		/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
     3f8:	42 8d       	ldd	r20, Z+26	; 0x1a
     3fa:	53 8d       	ldd	r21, Z+27	; 0x1b
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
     400:	83 30       	cpi	r24, 0x03	; 3
     402:	59 f4       	brne	.+22     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
     404:	84 89       	ldd	r24, Z+20	; 0x14
     406:	95 89       	ldd	r25, Z+21	; 0x15
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	dc 01       	movw	r26, r24
     40e:	99 27       	eor	r25, r25
     410:	88 27       	eor	r24, r24
     412:	48 2b       	or	r20, r24
     414:	59 2b       	or	r21, r25
     416:	6a 2b       	or	r22, r26
     418:	7b 2b       	or	r23, r27
	}

	return cl;
}
     41a:	cb 01       	movw	r24, r22
     41c:	ba 01       	movw	r22, r20
     41e:	08 95       	ret

00000420 <st_clust.isra.4>:


#if !FF_FS_READONLY
static void st_clust (
     420:	fb 01       	movw	r30, r22
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     422:	22 8f       	std	Z+26, r18	; 0x1a
	*ptr++ = (BYTE)val;
     424:	33 8f       	std	Z+27, r19	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
     426:	dc 01       	movw	r26, r24
     428:	8c 91       	ld	r24, X
     42a:	83 30       	cpi	r24, 0x03	; 3
     42c:	29 f4       	brne	.+10     	; 0x438 <st_clust.isra.4+0x18>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
     42e:	ca 01       	movw	r24, r20
     430:	aa 27       	eor	r26, r26
     432:	bb 27       	eor	r27, r27
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     434:	84 8b       	std	Z+20, r24	; 0x14
	*ptr++ = (BYTE)val;
     436:	95 8b       	std	Z+21, r25	; 0x15
     438:	08 95       	ret

0000043a <get_fileinfo.part.5>:
#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/

static void get_fileinfo (
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	fc 01       	movw	r30, r24
     444:	eb 01       	movw	r28, r22
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	50 e0       	ldi	r21, 0x00	; 0
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[si++];
		if (c == ' ') continue;		/* Skip padding spaces */
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
     44e:	8e e2       	ldi	r24, 0x2E	; 46
	}

#else	/* Non-LFN configuration */
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[si++];
     450:	ba 01       	movw	r22, r20
     452:	6f 5f       	subi	r22, 0xFF	; 255
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	a2 8d       	ldd	r26, Z+26	; 0x1a
     458:	b3 8d       	ldd	r27, Z+27	; 0x1b
     45a:	a4 0f       	add	r26, r20
     45c:	b5 1f       	adc	r27, r21
     45e:	9c 91       	ld	r25, X
		if (c == ' ') continue;		/* Skip padding spaces */
     460:	90 32       	cpi	r25, 0x20	; 32
     462:	a1 f0       	breq	.+40     	; 0x48c <get_fileinfo.part.5+0x52>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
     464:	95 30       	cpi	r25, 0x05	; 5
     466:	09 f4       	brne	.+2      	; 0x46a <get_fileinfo.part.5+0x30>
     468:	95 ee       	ldi	r25, 0xE5	; 229
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
     46a:	69 30       	cpi	r22, 0x09	; 9
     46c:	71 05       	cpc	r23, r1
     46e:	39 f4       	brne	.+14     	; 0x47e <get_fileinfo.part.5+0x44>
     470:	de 01       	movw	r26, r28
     472:	a2 0f       	add	r26, r18
     474:	b3 1f       	adc	r27, r19
     476:	19 96       	adiw	r26, 0x09	; 9
     478:	8c 93       	st	X, r24
     47a:	2f 5f       	subi	r18, 0xFF	; 255
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
		fno->fname[di++] = c;
     47e:	de 01       	movw	r26, r28
     480:	a2 0f       	add	r26, r18
     482:	b3 1f       	adc	r27, r19
     484:	19 96       	adiw	r26, 0x09	; 9
     486:	9c 93       	st	X, r25
     488:	2f 5f       	subi	r18, 0xFF	; 255
     48a:	3f 4f       	sbci	r19, 0xFF	; 255
     48c:	ab 01       	movw	r20, r22
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
     48e:	6b 30       	cpi	r22, 0x0B	; 11
     490:	71 05       	cpc	r23, r1
     492:	f1 f6       	brne	.-68     	; 0x450 <get_fileinfo.part.5+0x16>
		if (c == ' ') continue;		/* Skip padding spaces */
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;
     494:	de 01       	movw	r26, r28
     496:	a2 0f       	add	r26, r18
     498:	b3 1f       	adc	r27, r19
     49a:	19 96       	adiw	r26, 0x09	; 9
     49c:	1c 92       	st	X, r1
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
     49e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     4a0:	b3 8d       	ldd	r27, Z+27	; 0x1b
     4a2:	1b 96       	adiw	r26, 0x0b	; 11
     4a4:	8c 91       	ld	r24, X
     4a6:	88 87       	std	Y+8, r24	; 0x08
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
     4a8:	02 8d       	ldd	r16, Z+26	; 0x1a
     4aa:	13 8d       	ldd	r17, Z+27	; 0x1b
     4ac:	c8 01       	movw	r24, r16
     4ae:	4c 96       	adiw	r24, 0x1c	; 28
     4b0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
     4b4:	68 83       	st	Y, r22
     4b6:	79 83       	std	Y+1, r23	; 0x01
     4b8:	8a 83       	std	Y+2, r24	; 0x02
     4ba:	9b 83       	std	Y+3, r25	; 0x03
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     4bc:	f8 01       	movw	r30, r16
     4be:	86 89       	ldd	r24, Z+22	; 0x16
     4c0:	97 89       	ldd	r25, Z+23	; 0x17
	fno->fname[di] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
     4c2:	9f 83       	std	Y+7, r25	; 0x07
     4c4:	8e 83       	std	Y+6, r24	; 0x06
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     4c6:	80 8d       	ldd	r24, Z+24	; 0x18
     4c8:	91 8d       	ldd	r25, Z+25	; 0x19
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
     4ca:	9d 83       	std	Y+5, r25	; 0x05
     4cc:	8c 83       	std	Y+4, r24	; 0x04
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
     4d8:	8f 92       	push	r8
     4da:	9f 92       	push	r9
     4dc:	af 92       	push	r10
     4de:	bf 92       	push	r11
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Is the disk access window dirty? */
     4ec:	fc 01       	movw	r30, r24
     4ee:	23 81       	ldd	r18, Z+3	; 0x03
     4f0:	22 23       	and	r18, r18
     4f2:	c1 f1       	breq	.+112    	; 0x564 <sync_window+0x8c>
     4f4:	ec 01       	movw	r28, r24
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
     4f6:	7c 01       	movw	r14, r24
     4f8:	ff e2       	ldi	r31, 0x2F	; 47
     4fa:	ef 0e       	add	r14, r31
     4fc:	f1 1c       	adc	r15, r1
     4fe:	2b a5       	ldd	r18, Y+43	; 0x2b
     500:	3c a5       	ldd	r19, Y+44	; 0x2c
     502:	4d a5       	ldd	r20, Y+45	; 0x2d
     504:	5e a5       	ldd	r21, Y+46	; 0x2e
     506:	01 e0       	ldi	r16, 0x01	; 1
     508:	10 e0       	ldi	r17, 0x00	; 0
     50a:	b7 01       	movw	r22, r14
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	0e 94 99 1b 	call	0x3732	; 0x3732 <disk_write>
     512:	81 11       	cpse	r24, r1
     514:	29 c0       	rjmp	.+82     	; 0x568 <sync_window+0x90>
			fs->wflag = 0;	/* Clear window dirty flag */
     516:	1b 82       	std	Y+3, r1	; 0x03
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
     518:	0b a5       	ldd	r16, Y+43	; 0x2b
     51a:	1c a5       	ldd	r17, Y+44	; 0x2c
     51c:	2d a5       	ldd	r18, Y+45	; 0x2d
     51e:	3e a5       	ldd	r19, Y+46	; 0x2e
     520:	8f 89       	ldd	r24, Y+23	; 0x17
     522:	98 8d       	ldd	r25, Y+24	; 0x18
     524:	a9 8d       	ldd	r26, Y+25	; 0x19
     526:	ba 8d       	ldd	r27, Y+26	; 0x1a
     528:	8f 8c       	ldd	r8, Y+31	; 0x1f
     52a:	98 a0       	ldd	r9, Y+32	; 0x20
     52c:	a9 a0       	ldd	r10, Y+33	; 0x21
     52e:	ba a0       	ldd	r11, Y+34	; 0x22
     530:	b9 01       	movw	r22, r18
     532:	a8 01       	movw	r20, r16
     534:	48 19       	sub	r20, r8
     536:	59 09       	sbc	r21, r9
     538:	6a 09       	sbc	r22, r10
     53a:	7b 09       	sbc	r23, r11
     53c:	48 17       	cp	r20, r24
     53e:	59 07       	cpc	r21, r25
     540:	6a 07       	cpc	r22, r26
     542:	7b 07       	cpc	r23, r27
     544:	78 f4       	brcc	.+30     	; 0x564 <sync_window+0x8c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
     546:	6a 81       	ldd	r22, Y+2	; 0x02
     548:	62 30       	cpi	r22, 0x02	; 2
     54a:	61 f4       	brne	.+24     	; 0x564 <sync_window+0x8c>
     54c:	a9 01       	movw	r20, r18
     54e:	98 01       	movw	r18, r16
     550:	28 0f       	add	r18, r24
     552:	39 1f       	adc	r19, r25
     554:	4a 1f       	adc	r20, r26
     556:	5b 1f       	adc	r21, r27
     558:	01 e0       	ldi	r16, 0x01	; 1
     55a:	10 e0       	ldi	r17, 0x00	; 0
     55c:	b7 01       	movw	r22, r14
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	0e 94 99 1b 	call	0x3732	; 0x3732 <disk_write>
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
	FRESULT res = FR_OK;
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	01 c0       	rjmp	.+2      	; 0x56a <sync_window+0x92>
			fs->wflag = 0;	/* Clear window dirty flag */
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
			}
		} else {
			res = FR_DISK_ERR;
     568:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return res;
}
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
     57c:	8f 90       	pop	r8
     57e:	08 95       	ret

00000580 <move_window.part.7>:
#endif


static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
     580:	8f 92       	push	r8
     582:	9f 92       	push	r9
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	ec 01       	movw	r28, r24
     594:	4a 01       	movw	r8, r20
     596:	5b 01       	movw	r10, r22
	FRESULT res = FR_OK;


	if (sect != fs->winsect) {	/* Window offset changed? */
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
     598:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sync_window>
     59c:	f8 2e       	mov	r15, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
     59e:	81 11       	cpse	r24, r1
     5a0:	16 c0       	rjmp	.+44     	; 0x5ce <move_window.part.7+0x4e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
     5a2:	01 e0       	ldi	r16, 0x01	; 1
     5a4:	10 e0       	ldi	r17, 0x00	; 0
     5a6:	a5 01       	movw	r20, r10
     5a8:	94 01       	movw	r18, r8
     5aa:	be 01       	movw	r22, r28
     5ac:	61 5d       	subi	r22, 0xD1	; 209
     5ae:	7f 4f       	sbci	r23, 0xFF	; 255
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	0e 94 4e 1b 	call	0x369c	; 0x369c <disk_read>
     5b6:	88 23       	and	r24, r24
     5b8:	31 f0       	breq	.+12     	; 0x5c6 <move_window.part.7+0x46>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
				res = FR_DISK_ERR;
     5ba:	ff 24       	eor	r15, r15
     5bc:	f3 94       	inc	r15
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
     5be:	88 24       	eor	r8, r8
     5c0:	8a 94       	dec	r8
     5c2:	98 2c       	mov	r9, r8
     5c4:	54 01       	movw	r10, r8
				res = FR_DISK_ERR;
			}
			fs->winsect = sect;
     5c6:	8b a6       	std	Y+43, r8	; 0x2b
     5c8:	9c a6       	std	Y+44, r9	; 0x2c
     5ca:	ad a6       	std	Y+45, r10	; 0x2d
     5cc:	be a6       	std	Y+46, r11	; 0x2e
		}
	}
	return res;
}
     5ce:	8f 2d       	mov	r24, r15
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	bf 90       	pop	r11
     5dc:	af 90       	pop	r10
     5de:	9f 90       	pop	r9
     5e0:	8f 90       	pop	r8
     5e2:	08 95       	ret

000005e4 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
	FRESULT res = FR_OK;


	if (sect != fs->winsect) {	/* Window offset changed? */
     5e8:	fc 01       	movw	r30, r24
     5ea:	03 a5       	ldd	r16, Z+43	; 0x2b
     5ec:	14 a5       	ldd	r17, Z+44	; 0x2c
     5ee:	25 a5       	ldd	r18, Z+45	; 0x2d
     5f0:	36 a5       	ldd	r19, Z+46	; 0x2e
     5f2:	04 17       	cp	r16, r20
     5f4:	15 07       	cpc	r17, r21
     5f6:	26 07       	cpc	r18, r22
     5f8:	37 07       	cpc	r19, r23
     5fa:	21 f0       	breq	.+8      	; 0x604 <move_window+0x20>
			}
			fs->winsect = sect;
		}
	}
	return res;
}
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	0c 94 c0 02 	jmp	0x580	; 0x580 <move_window.part.7>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	08 95       	ret

0000060c <check_fs.part.8>:
/* Load a sector and check if it is an FAT VBR                           */
/*-----------------------------------------------------------------------*/

/* Check what the sector is */

static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	fc 01       	movw	r30, r24
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     612:	dc 01       	movw	r26, r24
     614:	a3 5d       	subi	r26, 0xD3	; 211
     616:	bd 4f       	sbci	r27, 0xFD	; 253
     618:	4d 91       	ld	r20, X+
     61a:	5c 91       	ld	r21, X
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
     61c:	87 a5       	ldd	r24, Z+47	; 0x2f
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
     61e:	8b 3e       	cpi	r24, 0xEB	; 235
     620:	21 f0       	breq	.+8      	; 0x62a <check_fs.part.8+0x1e>
     622:	88 5e       	subi	r24, 0xE8	; 232
     624:	82 30       	cpi	r24, 0x02	; 2
     626:	08 f0       	brcs	.+2      	; 0x62a <check_fs.part.8+0x1e>
     628:	40 c0       	rjmp	.+128    	; 0x6aa <check_fs.part.8+0x9e>
		if (sign == 0xAA55 && !mem_cmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) return 0;	/* It is an FAT32 VBR */
     62a:	45 35       	cpi	r20, 0x55	; 85
     62c:	6a ea       	ldi	r22, 0xAA	; 170
     62e:	56 07       	cpc	r21, r22
     630:	a9 f4       	brne	.+42     	; 0x65c <check_fs.part.8+0x50>
     632:	df 01       	movw	r26, r30
     634:	af 57       	subi	r26, 0x7F	; 127
     636:	bf 4f       	sbci	r27, 0xFF	; 255
     638:	c7 e6       	ldi	r28, 0x67	; 103
     63a:	d1 e0       	ldi	r29, 0x01	; 1
     63c:	9f 01       	movw	r18, r30
     63e:	27 57       	subi	r18, 0x77	; 119
     640:	3f 4f       	sbci	r19, 0xFF	; 255
{
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
     642:	8d 91       	ld	r24, X+
     644:	69 91       	ld	r22, Y+
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	86 1b       	sub	r24, r22
     64a:	91 09       	sbc	r25, r1
	} while (--cnt && r == 0);
     64c:	a2 17       	cp	r26, r18
     64e:	b3 07       	cpc	r27, r19
     650:	19 f0       	breq	.+6      	; 0x658 <check_fs.part.8+0x4c>
     652:	89 2b       	or	r24, r25
     654:	b1 f3       	breq	.-20     	; 0x642 <check_fs.part.8+0x36>
     656:	02 c0       	rjmp	.+4      	; 0x65c <check_fs.part.8+0x50>
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
		if (sign == 0xAA55 && !mem_cmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) return 0;	/* It is an FAT32 VBR */
     658:	89 2b       	or	r24, r25
     65a:	69 f1       	breq	.+90     	; 0x6b6 <check_fs.part.8+0xaa>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     65c:	22 ad       	ldd	r18, Z+58	; 0x3a
     65e:	33 ad       	ldd	r19, Z+59	; 0x3b
	b = fs->win[BS_JmpBoot];
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
		if (sign == 0xAA55 && !mem_cmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) return 0;	/* It is an FAT32 VBR */
		/* FAT volumes formatted with early MS-DOS lack boot signature and FAT string, so that we need to identify the FAT VBR without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS) {	/* Properness of sector size */
     660:	c9 01       	movw	r24, r18
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	82 23       	and	r24, r18
     666:	93 23       	and	r25, r19
     668:	00 97       	sbiw	r24, 0x00	; 0
     66a:	f9 f4       	brne	.+62     	; 0x6aa <check_fs.part.8+0x9e>
     66c:	21 15       	cp	r18, r1
     66e:	32 40       	sbci	r19, 0x02	; 2
     670:	e1 f4       	brne	.+56     	; 0x6aa <check_fs.part.8+0x9e>
			b = fs->win[BPB_SecPerClus];
     672:	24 ad       	ldd	r18, Z+60	; 0x3c
			if (b != 0 && (b & (b - 1)) == 0						/* Properness of cluster size */
     674:	22 23       	and	r18, r18
     676:	c9 f0       	breq	.+50     	; 0x6aa <check_fs.part.8+0x9e>
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	b9 01       	movw	r22, r18
     67c:	61 50       	subi	r22, 0x01	; 1
     67e:	71 09       	sbc	r23, r1
     680:	26 23       	and	r18, r22
     682:	37 23       	and	r19, r23
     684:	23 2b       	or	r18, r19
     686:	89 f4       	brne	.+34     	; 0x6aa <check_fs.part.8+0x9e>
			&& (fs->win[BPB_NumFATs] == 1 || fs->win[BPB_NumFATs] == 2)	/* Properness of number of FATs */
     688:	27 ad       	ldd	r18, Z+63	; 0x3f
     68a:	21 50       	subi	r18, 0x01	; 1
     68c:	22 30       	cpi	r18, 0x02	; 2
     68e:	68 f4       	brcc	.+26     	; 0x6aa <check_fs.part.8+0x9e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     690:	df 01       	movw	r26, r30
     692:	a0 5c       	subi	r26, 0xC0	; 192
     694:	bf 4f       	sbci	r27, 0xFF	; 255
		w = ld_word(fs->win + BPB_BytsPerSec);
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS) {	/* Properness of sector size */
			b = fs->win[BPB_SecPerClus];
			if (b != 0 && (b & (b - 1)) == 0						/* Properness of cluster size */
			&& (fs->win[BPB_NumFATs] == 1 || fs->win[BPB_NumFATs] == 2)	/* Properness of number of FATs */
			&& ld_word(fs->win + BPB_RootEntCnt) != 0				/* Properness of root entry count */
     696:	2d 91       	ld	r18, X+
     698:	3c 91       	ld	r19, X
     69a:	23 2b       	or	r18, r19
     69c:	31 f0       	breq	.+12     	; 0x6aa <check_fs.part.8+0x9e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     69e:	eb 5b       	subi	r30, 0xBB	; 187
     6a0:	ff 4f       	sbci	r31, 0xFF	; 255
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS) {	/* Properness of sector size */
			b = fs->win[BPB_SecPerClus];
			if (b != 0 && (b & (b - 1)) == 0						/* Properness of cluster size */
			&& (fs->win[BPB_NumFATs] == 1 || fs->win[BPB_NumFATs] == 2)	/* Properness of number of FATs */
			&& ld_word(fs->win + BPB_RootEntCnt) != 0				/* Properness of root entry count */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {				/* Properness of FAT size */
     6a2:	20 81       	ld	r18, Z
     6a4:	31 81       	ldd	r19, Z+1	; 0x01
     6a6:	23 2b       	or	r18, r19
     6a8:	59 f4       	brne	.+22     	; 0x6c0 <check_fs.part.8+0xb4>
				return 0;	/* Sector can be presumed an FAT VBR */
			}
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
     6aa:	45 35       	cpi	r20, 0x55	; 85
     6ac:	5a 4a       	sbci	r21, 0xAA	; 170
     6ae:	31 f0       	breq	.+12     	; 0x6bc <check_fs.part.8+0xb0>
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <check_fs.part.8+0xb4>
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
		if (sign == 0xAA55 && !mem_cmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) return 0;	/* It is an FAT32 VBR */
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <check_fs.part.8+0xb4>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {				/* Properness of FAT size */
				return 0;	/* Sector can be presumed an FAT VBR */
			}
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	90 e0       	ldi	r25, 0x00	; 0
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <get_fat.isra.10>:

/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
     6c6:	af 92       	push	r10
     6c8:	bf 92       	push	r11
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
     6da:	42 30       	cpi	r20, 0x02	; 2
     6dc:	51 05       	cpc	r21, r1
     6de:	61 05       	cpc	r22, r1
     6e0:	71 05       	cpc	r23, r1
     6e2:	08 f4       	brcc	.+2      	; 0x6e6 <get_fat.isra.10+0x20>
     6e4:	a1 c0       	rjmp	.+322    	; 0x828 <get_fat.isra.10+0x162>
     6e6:	fc 01       	movw	r30, r24
     6e8:	03 89       	ldd	r16, Z+19	; 0x13
     6ea:	14 89       	ldd	r17, Z+20	; 0x14
     6ec:	25 89       	ldd	r18, Z+21	; 0x15
     6ee:	36 89       	ldd	r19, Z+22	; 0x16
     6f0:	40 17       	cp	r20, r16
     6f2:	51 07       	cpc	r21, r17
     6f4:	62 07       	cpc	r22, r18
     6f6:	73 07       	cpc	r23, r19
     6f8:	08 f0       	brcs	.+2      	; 0x6fc <get_fat.isra.10+0x36>
     6fa:	96 c0       	rjmp	.+300    	; 0x828 <get_fat.isra.10+0x162>
     6fc:	6a 01       	movw	r12, r20
     6fe:	7b 01       	movw	r14, r22
     700:	8c 01       	movw	r16, r24
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
     702:	80 81       	ld	r24, Z
     704:	82 30       	cpi	r24, 0x02	; 2
     706:	09 f4       	brne	.+2      	; 0x70a <get_fat.isra.10+0x44>
     708:	4d c0       	rjmp	.+154    	; 0x7a4 <get_fat.isra.10+0xde>
     70a:	83 30       	cpi	r24, 0x03	; 3
     70c:	09 f4       	brne	.+2      	; 0x710 <get_fat.isra.10+0x4a>
     70e:	69 c0       	rjmp	.+210    	; 0x7e2 <get_fat.isra.10+0x11c>
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	09 f0       	breq	.+2      	; 0x716 <get_fat.isra.10+0x50>
     714:	89 c0       	rjmp	.+274    	; 0x828 <get_fat.isra.10+0x162>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
     716:	ea 01       	movw	r28, r20
     718:	d6 95       	lsr	r29
     71a:	c7 95       	ror	r28
     71c:	cc 0d       	add	r28, r12
     71e:	dd 1d       	adc	r29, r13
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     720:	ce 01       	movw	r24, r28
     722:	89 2f       	mov	r24, r25
     724:	99 27       	eor	r25, r25
     726:	86 95       	lsr	r24
     728:	47 8d       	ldd	r20, Z+31	; 0x1f
     72a:	50 a1       	ldd	r21, Z+32	; 0x20
     72c:	61 a1       	ldd	r22, Z+33	; 0x21
     72e:	72 a1       	ldd	r23, Z+34	; 0x22
     730:	48 0f       	add	r20, r24
     732:	59 1f       	adc	r21, r25
     734:	61 1d       	adc	r22, r1
     736:	71 1d       	adc	r23, r1
     738:	cf 01       	movw	r24, r30
     73a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     73e:	88 23       	and	r24, r24
     740:	21 f0       	breq	.+8      	; 0x74a <get_fat.isra.10+0x84>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
     742:	6f ef       	ldi	r22, 0xFF	; 255
     744:	7f ef       	ldi	r23, 0xFF	; 255
     746:	cb 01       	movw	r24, r22
     748:	73 c0       	rjmp	.+230    	; 0x830 <get_fat.isra.10+0x16a>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
     74a:	5e 01       	movw	r10, r28
     74c:	ff ef       	ldi	r31, 0xFF	; 255
     74e:	af 1a       	sub	r10, r31
     750:	bf 0a       	sbc	r11, r31
     752:	d1 70       	andi	r29, 0x01	; 1
     754:	c0 0f       	add	r28, r16
     756:	d1 1f       	adc	r29, r17
     758:	cf a5       	ldd	r28, Y+47	; 0x2f
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     75a:	c5 01       	movw	r24, r10
     75c:	89 2f       	mov	r24, r25
     75e:	99 27       	eor	r25, r25
     760:	86 95       	lsr	r24
     762:	f8 01       	movw	r30, r16
     764:	47 8d       	ldd	r20, Z+31	; 0x1f
     766:	50 a1       	ldd	r21, Z+32	; 0x20
     768:	61 a1       	ldd	r22, Z+33	; 0x21
     76a:	72 a1       	ldd	r23, Z+34	; 0x22
     76c:	48 0f       	add	r20, r24
     76e:	59 1f       	adc	r21, r25
     770:	61 1d       	adc	r22, r1
     772:	71 1d       	adc	r23, r1
     774:	c8 01       	movw	r24, r16
     776:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     77a:	81 11       	cpse	r24, r1
     77c:	e2 cf       	rjmp	.-60     	; 0x742 <get_fat.isra.10+0x7c>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	bf 22       	and	r11, r31
     782:	f8 01       	movw	r30, r16
     784:	ea 0d       	add	r30, r10
     786:	fb 1d       	adc	r31, r11
     788:	87 a5       	ldd	r24, Z+47	; 0x2f
     78a:	6c 2f       	mov	r22, r28
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	78 2b       	or	r23, r24
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
     790:	c0 fe       	sbrs	r12, 0
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <get_fat.isra.10+0xda>
     794:	54 e0       	ldi	r21, 0x04	; 4
     796:	76 95       	lsr	r23
     798:	67 95       	ror	r22
     79a:	5a 95       	dec	r21
     79c:	e1 f7       	brne	.-8      	; 0x796 <get_fat.isra.10+0xd0>
     79e:	1e c0       	rjmp	.+60     	; 0x7dc <get_fat.isra.10+0x116>
     7a0:	7f 70       	andi	r23, 0x0F	; 15
     7a2:	1c c0       	rjmp	.+56     	; 0x7dc <get_fat.isra.10+0x116>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
     7a4:	77 27       	eor	r23, r23
     7a6:	6f 2d       	mov	r22, r15
     7a8:	5e 2d       	mov	r21, r14
     7aa:	4d 2d       	mov	r20, r13
     7ac:	87 8d       	ldd	r24, Z+31	; 0x1f
     7ae:	90 a1       	ldd	r25, Z+32	; 0x20
     7b0:	a1 a1       	ldd	r26, Z+33	; 0x21
     7b2:	b2 a1       	ldd	r27, Z+34	; 0x22
     7b4:	48 0f       	add	r20, r24
     7b6:	59 1f       	adc	r21, r25
     7b8:	6a 1f       	adc	r22, r26
     7ba:	7b 1f       	adc	r23, r27
     7bc:	cf 01       	movw	r24, r30
     7be:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     7c2:	81 11       	cpse	r24, r1
     7c4:	be cf       	rjmp	.-132    	; 0x742 <get_fat.isra.10+0x7c>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     7c6:	cc 0c       	add	r12, r12
     7c8:	dd 1c       	adc	r13, r13
     7ca:	e8 94       	clt
     7cc:	c0 f8       	bld	r12, 0
     7ce:	f1 e0       	ldi	r31, 0x01	; 1
     7d0:	df 22       	and	r13, r31
     7d2:	f8 01       	movw	r30, r16
     7d4:	ec 0d       	add	r30, r12
     7d6:	fd 1d       	adc	r31, r13
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
     7d8:	67 a5       	ldd	r22, Z+47	; 0x2f
     7da:	70 a9       	ldd	r23, Z+48	; 0x30
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	27 c0       	rjmp	.+78     	; 0x830 <get_fat.isra.10+0x16a>
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
     7e2:	87 8d       	ldd	r24, Z+31	; 0x1f
     7e4:	90 a1       	ldd	r25, Z+32	; 0x20
     7e6:	a1 a1       	ldd	r26, Z+33	; 0x21
     7e8:	b2 a1       	ldd	r27, Z+34	; 0x22
     7ea:	27 e0       	ldi	r18, 0x07	; 7
     7ec:	76 95       	lsr	r23
     7ee:	67 95       	ror	r22
     7f0:	57 95       	ror	r21
     7f2:	47 95       	ror	r20
     7f4:	2a 95       	dec	r18
     7f6:	d1 f7       	brne	.-12     	; 0x7ec <get_fat.isra.10+0x126>
     7f8:	48 0f       	add	r20, r24
     7fa:	59 1f       	adc	r21, r25
     7fc:	6a 1f       	adc	r22, r26
     7fe:	7b 1f       	adc	r23, r27
     800:	cf 01       	movw	r24, r30
     802:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     806:	81 11       	cpse	r24, r1
     808:	9c cf       	rjmp	.-200    	; 0x742 <get_fat.isra.10+0x7c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
     80a:	01 5d       	subi	r16, 0xD1	; 209
     80c:	1f 4f       	sbci	r17, 0xFF	; 255
     80e:	cc 0c       	add	r12, r12
     810:	dd 1c       	adc	r13, r13
     812:	cc 0c       	add	r12, r12
     814:	dd 1c       	adc	r13, r13
     816:	c6 01       	movw	r24, r12
     818:	8c 7f       	andi	r24, 0xFC	; 252
     81a:	91 70       	andi	r25, 0x01	; 1
     81c:	80 0f       	add	r24, r16
     81e:	91 1f       	adc	r25, r17
     820:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
     824:	9f 70       	andi	r25, 0x0F	; 15
     826:	04 c0       	rjmp	.+8      	; 0x830 <get_fat.isra.10+0x16a>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return val;
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	bf 90       	pop	r11
     842:	af 90       	pop	r10
     844:	08 95       	ret

00000846 <dir_sdi.constprop.15>:

/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	8c 01       	movw	r16, r24
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
     858:	fc 01       	movw	r30, r24
     85a:	c0 81       	ld	r28, Z
     85c:	d1 81       	ldd	r29, Z+1	; 0x01


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
     85e:	16 86       	std	Z+14, r1	; 0x0e
     860:	17 86       	std	Z+15, r1	; 0x0f
     862:	10 8a       	std	Z+16, r1	; 0x10
     864:	11 8a       	std	Z+17, r1	; 0x11
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
     866:	c6 80       	ldd	r12, Z+6	; 0x06
     868:	d7 80       	ldd	r13, Z+7	; 0x07
     86a:	e0 84       	ldd	r14, Z+8	; 0x08
     86c:	f1 84       	ldd	r15, Z+9	; 0x09
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
     86e:	c1 14       	cp	r12, r1
     870:	d1 04       	cpc	r13, r1
     872:	e1 04       	cpc	r14, r1
     874:	f1 04       	cpc	r15, r1
     876:	e9 f4       	brne	.+58     	; 0x8b2 <__stack+0x53>
     878:	88 81       	ld	r24, Y
     87a:	83 30       	cpi	r24, 0x03	; 3
     87c:	40 f0       	brcs	.+16     	; 0x88e <__stack+0x2f>
		clst = (DWORD)fs->dirbase;
     87e:	8b a1       	ldd	r24, Y+35	; 0x23
     880:	9c a1       	ldd	r25, Y+36	; 0x24
     882:	ad a1       	ldd	r26, Y+37	; 0x25
     884:	be a1       	ldd	r27, Y+38	; 0x26
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
     886:	00 97       	sbiw	r24, 0x00	; 0
     888:	a1 05       	cpc	r26, r1
     88a:	b1 05       	cpc	r27, r1
     88c:	81 f4       	brne	.+32     	; 0x8ae <__stack+0x4f>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
     88e:	8f 81       	ldd	r24, Y+7	; 0x07
     890:	98 85       	ldd	r25, Y+8	; 0x08
     892:	89 2b       	or	r24, r25
     894:	11 f4       	brne	.+4      	; 0x89a <__stack+0x3b>
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	4c c0       	rjmp	.+152    	; 0x932 <__stack+0xd3>
		dp->sect = fs->dirbase;
     89a:	8b a1       	ldd	r24, Y+35	; 0x23
     89c:	9c a1       	ldd	r25, Y+36	; 0x24
     89e:	ad a1       	ldd	r26, Y+37	; 0x25
     8a0:	be a1       	ldd	r27, Y+38	; 0x26
     8a2:	f8 01       	movw	r30, r16
     8a4:	86 8b       	std	Z+22, r24	; 0x16
     8a6:	97 8b       	std	Z+23, r25	; 0x17
     8a8:	a0 8f       	std	Z+24, r26	; 0x18
     8aa:	b1 8f       	std	Z+25, r27	; 0x19
     8ac:	2e c0       	rjmp	.+92     	; 0x90a <__stack+0xab>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
		clst = (DWORD)fs->dirbase;
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
     8ae:	6c 01       	movw	r12, r24
     8b0:	7d 01       	movw	r14, r26
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
     8b2:	89 85       	ldd	r24, Y+9	; 0x09
     8b4:	9a 85       	ldd	r25, Y+10	; 0x0a
		while (ofs >= csz) {				/* Follow cluster chain */
     8b6:	89 2b       	or	r24, r25
     8b8:	f1 f4       	brne	.+60     	; 0x8f6 <__stack+0x97>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
     8ba:	b7 01       	movw	r22, r14
     8bc:	a6 01       	movw	r20, r12
     8be:	f8 01       	movw	r30, r16
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
     8c8:	6b 01       	movw	r12, r22
     8ca:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     8cc:	6f 3f       	cpi	r22, 0xFF	; 255
     8ce:	7f 4f       	sbci	r23, 0xFF	; 255
     8d0:	8f 4f       	sbci	r24, 0xFF	; 255
     8d2:	9f 4f       	sbci	r25, 0xFF	; 255
     8d4:	69 f1       	breq	.+90     	; 0x930 <__stack+0xd1>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	c8 16       	cp	r12, r24
     8da:	d1 04       	cpc	r13, r1
     8dc:	e1 04       	cpc	r14, r1
     8de:	f1 04       	cpc	r15, r1
     8e0:	d0 f2       	brcs	.-76     	; 0x896 <__stack+0x37>
     8e2:	8b 89       	ldd	r24, Y+19	; 0x13
     8e4:	9c 89       	ldd	r25, Y+20	; 0x14
     8e6:	ad 89       	ldd	r26, Y+21	; 0x15
     8e8:	be 89       	ldd	r27, Y+22	; 0x16
     8ea:	c8 16       	cp	r12, r24
     8ec:	d9 06       	cpc	r13, r25
     8ee:	ea 06       	cpc	r14, r26
     8f0:	fb 06       	cpc	r15, r27
     8f2:	18 f3       	brcs	.-58     	; 0x8ba <__stack+0x5b>
     8f4:	d0 cf       	rjmp	.-96     	; 0x896 <__stack+0x37>
			ofs -= csz;
		}
		dp->sect = clst2sect(fs, clst);
     8f6:	b7 01       	movw	r22, r14
     8f8:	a6 01       	movw	r20, r12
     8fa:	ce 01       	movw	r24, r28
     8fc:	0e 94 77 01 	call	0x2ee	; 0x2ee <clst2sect>
     900:	f8 01       	movw	r30, r16
     902:	66 8b       	std	Z+22, r22	; 0x16
     904:	77 8b       	std	Z+23, r23	; 0x17
     906:	80 8f       	std	Z+24, r24	; 0x18
     908:	91 8f       	std	Z+25, r25	; 0x19
	}
	dp->clust = clst;					/* Current cluster# */
     90a:	f8 01       	movw	r30, r16
     90c:	c2 8a       	std	Z+18, r12	; 0x12
     90e:	d3 8a       	std	Z+19, r13	; 0x13
     910:	e4 8a       	std	Z+20, r14	; 0x14
     912:	f5 8a       	std	Z+21, r15	; 0x15
	if (dp->sect == 0) return FR_INT_ERR;
     914:	86 89       	ldd	r24, Z+22	; 0x16
     916:	97 89       	ldd	r25, Z+23	; 0x17
     918:	a0 8d       	ldd	r26, Z+24	; 0x18
     91a:	b1 8d       	ldd	r27, Z+25	; 0x19
     91c:	89 2b       	or	r24, r25
     91e:	8a 2b       	or	r24, r26
     920:	8b 2b       	or	r24, r27
     922:	09 f4       	brne	.+2      	; 0x926 <__stack+0xc7>
     924:	b8 cf       	rjmp	.-144    	; 0x896 <__stack+0x37>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
     926:	af 96       	adiw	r28, 0x2f	; 47
     928:	d3 8f       	std	Z+27, r29	; 0x1b
     92a:	c2 8f       	std	Z+26, r28	; 0x1a

	return FR_OK;
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	01 c0       	rjmp	.+2      	; 0x932 <__stack+0xd3>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     930:	81 e0       	ldi	r24, 0x01	; 1
	if (dp->sect == 0) return FR_INT_ERR;
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	08 95       	ret

00000944 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
     95e:	6a 01       	movw	r12, r20
     960:	7b 01       	movw	r14, r22
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
     962:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sync_window>
     966:	81 11       	cpse	r24, r1
     968:	38 c0       	rjmp	.+112    	; 0x9da <dir_clear+0x96>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
     96a:	b7 01       	movw	r22, r14
     96c:	a6 01       	movw	r20, r12
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 77 01 	call	0x2ee	; 0x2ee <clst2sect>
     974:	4b 01       	movw	r8, r22
     976:	5c 01       	movw	r10, r24
	fs->winsect = sect;				/* Set window to top of the cluster */
     978:	6b a7       	std	Y+43, r22	; 0x2b
     97a:	7c a7       	std	Y+44, r23	; 0x2c
     97c:	8d a7       	std	Y+45, r24	; 0x2d
     97e:	9e a7       	std	Y+46, r25	; 0x2e
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
     980:	6e 01       	movw	r12, r28
     982:	8f e2       	ldi	r24, 0x2F	; 47
     984:	c8 0e       	add	r12, r24
     986:	d1 1c       	adc	r13, r1
     988:	f6 01       	movw	r30, r12
     98a:	ce 01       	movw	r24, r28
     98c:	81 5d       	subi	r24, 0xD1	; 209
     98e:	9d 4f       	sbci	r25, 0xFD	; 253
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
     990:	11 92       	st	Z+, r1
	} while (--cnt);
     992:	e8 17       	cp	r30, r24
     994:	f9 07       	cpc	r31, r25
     996:	e1 f7       	brne	.-8      	; 0x990 <dir_clear+0x4c>
     998:	e1 2c       	mov	r14, r1
     99a:	f1 2c       	mov	r15, r1
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
     99c:	89 85       	ldd	r24, Y+9	; 0x09
     99e:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a0:	e8 16       	cp	r14, r24
     9a2:	f9 06       	cpc	r15, r25
     9a4:	40 f0       	brcs	.+16     	; 0x9b6 <dir_clear+0x72>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	29 85       	ldd	r18, Y+9	; 0x09
     9aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ac:	2e 15       	cp	r18, r14
     9ae:	3f 05       	cpc	r19, r15
     9b0:	a9 f4       	brne	.+42     	; 0x9dc <dir_clear+0x98>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	13 c0       	rjmp	.+38     	; 0x9dc <dir_clear+0x98>
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
     9b6:	01 e0       	ldi	r16, 0x01	; 1
     9b8:	10 e0       	ldi	r17, 0x00	; 0
     9ba:	a5 01       	movw	r20, r10
     9bc:	94 01       	movw	r18, r8
     9be:	2e 0d       	add	r18, r14
     9c0:	3f 1d       	adc	r19, r15
     9c2:	41 1d       	adc	r20, r1
     9c4:	51 1d       	adc	r21, r1
     9c6:	b6 01       	movw	r22, r12
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	0e 94 99 1b 	call	0x3732	; 0x3732 <disk_write>
     9ce:	81 11       	cpse	r24, r1
     9d0:	ea cf       	rjmp	.-44     	; 0x9a6 <dir_clear+0x62>
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	e8 1a       	sub	r14, r24
     9d6:	f8 0a       	sbc	r15, r24
     9d8:	e1 cf       	rjmp	.-62     	; 0x99c <dir_clear+0x58>
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
     9da:	81 e0       	ldi	r24, 0x01	; 1
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	08 95       	ret

000009f6 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
     9f6:	4f 92       	push	r4
     9f8:	5f 92       	push	r5
     9fa:	6f 92       	push	r6
     9fc:	7f 92       	push	r7
     9fe:	8f 92       	push	r8
     a00:	9f 92       	push	r9
     a02:	af 92       	push	r10
     a04:	bf 92       	push	r11
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	a0 97       	sbiw	r28, 0x20	; 32
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	5b 01       	movw	r10, r22
     a28:	f4 2e       	mov	r15, r20
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
     a2a:	db 01       	movw	r26, r22
     a2c:	1d 92       	st	X+, r1
     a2e:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
     a30:	0e 94 9f 01 	call	0x33e	; 0x33e <get_ldnumber>
     a34:	6c 01       	movw	r12, r24
	if (vol < 0) return FR_INVALID_DRIVE;
     a36:	97 fd       	sbrc	r25, 7
     a38:	4e c2       	rjmp	.+1180   	; 0xed6 <mount_volume+0x4e0>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
     a3a:	fc 01       	movw	r30, r24
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	ee 57       	subi	r30, 0x7E	; 126
     a42:	fe 4f       	sbci	r31, 0xFE	; 254
     a44:	00 81       	ld	r16, Z
     a46:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
     a48:	01 15       	cp	r16, r1
     a4a:	11 05       	cpc	r17, r1
     a4c:	09 f4       	brne	.+2      	; 0xa50 <mount_volume+0x5a>
     a4e:	45 c2       	rjmp	.+1162   	; 0xeda <mount_volume+0x4e4>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
     a50:	f5 01       	movw	r30, r10
     a52:	11 83       	std	Z+1, r17	; 0x01
     a54:	00 83       	st	Z, r16

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
     a56:	ff 2d       	mov	r31, r15
     a58:	fe 7f       	andi	r31, 0xFE	; 254
     a5a:	ff 2e       	mov	r15, r31
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
     a5c:	d8 01       	movw	r26, r16
     a5e:	8c 91       	ld	r24, X
     a60:	88 23       	and	r24, r24
     a62:	69 f0       	breq	.+26     	; 0xa7e <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
     a64:	11 96       	adiw	r26, 0x01	; 1
     a66:	8c 91       	ld	r24, X
     a68:	0e 94 47 1b 	call	0x368e	; 0x368e <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     a6c:	80 fd       	sbrc	r24, 0
     a6e:	07 c0       	rjmp	.+14     	; 0xa7e <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
     a70:	ff 20       	and	r15, r15
     a72:	09 f4       	brne	.+2      	; 0xa76 <mount_volume+0x80>
     a74:	34 c2       	rjmp	.+1128   	; 0xede <mount_volume+0x4e8>
     a76:	82 ff       	sbrs	r24, 2
     a78:	32 c2       	rjmp	.+1124   	; 0xede <mount_volume+0x4e8>
				return FR_WRITE_PROTECTED;
     a7a:	8a e0       	ldi	r24, 0x0A	; 10
     a7c:	3c c2       	rjmp	.+1144   	; 0xef6 <mount_volume+0x500>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find a FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
     a7e:	f8 01       	movw	r30, r16
     a80:	10 82       	st	Z, r1
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
     a82:	c1 82       	std	Z+1, r12	; 0x01
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
     a84:	8c 2d       	mov	r24, r12
     a86:	0e 94 75 1a 	call	0x34ea	; 0x34ea <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
     a8a:	80 fd       	sbrc	r24, 0
     a8c:	2a c2       	rjmp	.+1108   	; 0xee2 <mount_volume+0x4ec>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
     a8e:	ff 20       	and	r15, r15
     a90:	11 f0       	breq	.+4      	; 0xa96 <mount_volume+0xa0>
     a92:	82 fd       	sbrc	r24, 2
     a94:	f2 cf       	rjmp	.-28     	; 0xa7a <mount_volume+0x84>
{
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
     a96:	d8 01       	movw	r26, r16
     a98:	13 96       	adiw	r26, 0x03	; 3
     a9a:	1c 92       	st	X, r1
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	9f ef       	ldi	r25, 0xFF	; 255
     aa0:	dc 01       	movw	r26, r24
     aa2:	f8 01       	movw	r30, r16
     aa4:	83 a7       	std	Z+43, r24	; 0x2b
     aa6:	94 a7       	std	Z+44, r25	; 0x2c
     aa8:	a5 a7       	std	Z+45, r26	; 0x2d
     aaa:	b6 a7       	std	Z+46, r27	; 0x2e
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	ba 01       	movw	r22, r20
     ab2:	c8 01       	movw	r24, r16
     ab4:	0e 94 c0 02 	call	0x580	; 0x580 <move_window.part.7>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
     ab8:	81 11       	cpse	r24, r1
     aba:	4e c0       	rjmp	.+156    	; 0xb58 <mount_volume+0x162>
     abc:	c8 01       	movw	r24, r16
     abe:	0e 94 06 03 	call	0x60c	; 0x60c <check_fs.part.8>
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	91 05       	cpc	r25, r1
     ac6:	09 f0       	breq	.+2      	; 0xaca <mount_volume+0xd4>
     ac8:	49 c0       	rjmp	.+146    	; 0xb5c <mount_volume+0x166>
     aca:	68 01       	movw	r12, r16
     acc:	fb e0       	ldi	r31, 0x0B	; 11
     ace:	cf 1a       	sub	r12, r31
     ad0:	fe ef       	ldi	r31, 0xFE	; 254
     ad2:	df 0a       	sbc	r13, r31
     ad4:	9e 01       	movw	r18, r28
     ad6:	2f 5f       	subi	r18, 0xFF	; 255
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	79 01       	movw	r14, r18
     adc:	48 01       	movw	r8, r16
     ade:	3b ec       	ldi	r19, 0xCB	; 203
     ae0:	83 1a       	sub	r8, r19
     ae2:	3d ef       	ldi	r19, 0xFD	; 253
     ae4:	93 0a       	sbc	r9, r19
     ae6:	57 01       	movw	r10, r14
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
     ae8:	c6 01       	movw	r24, r12
     aea:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
     aee:	d5 01       	movw	r26, r10
     af0:	6d 93       	st	X+, r22
     af2:	7d 93       	st	X+, r23
     af4:	8d 93       	st	X+, r24
     af6:	9d 93       	st	X+, r25
     af8:	5d 01       	movw	r10, r26
     afa:	b0 e1       	ldi	r27, 0x10	; 16
     afc:	cb 0e       	add	r12, r27
     afe:	d1 1c       	adc	r13, r1
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
     b00:	c8 14       	cp	r12, r8
     b02:	d9 04       	cpc	r13, r9
     b04:	89 f7       	brne	.-30     	; 0xae8 <mount_volume+0xf2>
     b06:	6e 01       	movw	r12, r28
     b08:	e1 e1       	ldi	r30, 0x11	; 17
     b0a:	ce 0e       	add	r12, r30
     b0c:	d1 1c       	adc	r13, r1
{
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
     b0e:	88 24       	eor	r8, r8
     b10:	8a 94       	dec	r8
     b12:	98 2c       	mov	r9, r8
     b14:	54 01       	movw	r10, r8
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
     b16:	d7 01       	movw	r26, r14
     b18:	4d 91       	ld	r20, X+
     b1a:	5d 91       	ld	r21, X+
     b1c:	6d 91       	ld	r22, X+
     b1e:	7d 91       	ld	r23, X+
     b20:	7d 01       	movw	r14, r26
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	09 f4       	brne	.+2      	; 0xb2e <mount_volume+0x138>
     b2c:	de c1       	rjmp	.+956    	; 0xeea <mount_volume+0x4f4>
{
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
     b2e:	f8 01       	movw	r30, r16
     b30:	13 82       	std	Z+3, r1	; 0x03
     b32:	83 a6       	std	Z+43, r8	; 0x2b
     b34:	94 a6       	std	Z+44, r9	; 0x2c
     b36:	a5 a6       	std	Z+45, r10	; 0x2d
     b38:	b6 a6       	std	Z+46, r11	; 0x2e
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
     b3a:	c8 01       	movw	r24, r16
     b3c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     b40:	81 11       	cpse	r24, r1
     b42:	d6 c1       	rjmp	.+940    	; 0xef0 <mount_volume+0x4fa>
     b44:	c8 01       	movw	r24, r16
     b46:	0e 94 06 03 	call	0x60c	; 0x60c <check_fs.part.8>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
	} while (part == 0 && fmt >= 2 && ++i < 4);
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	91 05       	cpc	r25, r1
     b4e:	30 f0       	brcs	.+12     	; 0xb5c <mount_volume+0x166>
     b50:	ce 14       	cp	r12, r14
     b52:	df 04       	cpc	r13, r15
     b54:	01 f7       	brne	.-64     	; 0xb16 <mount_volume+0x120>
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <mount_volume+0x166>
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	90 e0       	ldi	r25, 0x00	; 0
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	91 05       	cpc	r25, r1
     b60:	09 f4       	brne	.+2      	; 0xb64 <mount_volume+0x16e>
     b62:	c1 c1       	rjmp	.+898    	; 0xee6 <mount_volume+0x4f0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
     b64:	02 97       	sbiw	r24, 0x02	; 2
     b66:	10 f0       	brcs	.+4      	; 0xb6c <mount_volume+0x176>
     b68:	8d e0       	ldi	r24, 0x0D	; 13
     b6a:	c5 c1       	rjmp	.+906    	; 0xef6 <mount_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
     b6c:	f8 01       	movw	r30, r16
     b6e:	82 ad       	ldd	r24, Z+58	; 0x3a
     b70:	93 ad       	ldd	r25, Z+59	; 0x3b
     b72:	81 15       	cp	r24, r1
     b74:	92 40       	sbci	r25, 0x02	; 2
     b76:	c1 f7       	brne	.-16     	; 0xb68 <mount_volume+0x172>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     b78:	f8 01       	movw	r30, r16
     b7a:	eb 5b       	subi	r30, 0xBB	; 187
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	40 80       	ld	r4, Z
     b80:	51 80       	ldd	r5, Z+1	; 0x01
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
     b82:	41 14       	cp	r4, r1
     b84:	51 04       	cpc	r5, r1
     b86:	19 f0       	breq	.+6      	; 0xb8e <mount_volume+0x198>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
     b88:	61 2c       	mov	r6, r1
     b8a:	71 2c       	mov	r7, r1
     b8c:	07 c0       	rjmp	.+14     	; 0xb9c <mount_volume+0x1a6>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
     b8e:	c8 01       	movw	r24, r16
     b90:	8d 5a       	subi	r24, 0xAD	; 173
     b92:	9f 4f       	sbci	r25, 0xFF	; 255
     b94:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
     b98:	2b 01       	movw	r4, r22
     b9a:	3c 01       	movw	r6, r24

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
	bsect = fs->winsect;					/* Volume location */
     b9c:	d8 01       	movw	r26, r16
     b9e:	9b 96       	adiw	r26, 0x2b	; 43
     ba0:	2d 91       	ld	r18, X+
     ba2:	3d 91       	ld	r19, X+
     ba4:	4d 91       	ld	r20, X+
     ba6:	5c 91       	ld	r21, X
     ba8:	9e 97       	sbiw	r26, 0x2e	; 46
     baa:	29 8b       	std	Y+17, r18	; 0x11
     bac:	3a 8b       	std	Y+18, r19	; 0x12
     bae:	4b 8b       	std	Y+19, r20	; 0x13
     bb0:	5c 8b       	std	Y+20, r21	; 0x14
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;
     bb2:	f8 01       	movw	r30, r16
     bb4:	47 8a       	std	Z+23, r4	; 0x17
     bb6:	50 8e       	std	Z+24, r5	; 0x18
     bb8:	61 8e       	std	Z+25, r6	; 0x19
     bba:	72 8e       	std	Z+26, r7	; 0x1a

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
     bbc:	a7 ac       	ldd	r10, Z+63	; 0x3f
     bbe:	a2 82       	std	Z+2, r10	; 0x02
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	8a 0d       	add	r24, r10
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	80 f6       	brcc	.-96     	; 0xb68 <mount_volume+0x172>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
     bc8:	b4 ac       	ldd	r11, Z+60	; 0x3c
     bca:	8b 2d       	mov	r24, r11
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	92 87       	std	Z+10, r25	; 0x0a
     bd0:	81 87       	std	Z+9, r24	; 0x09
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	49 f2       	breq	.-110    	; 0xb68 <mount_volume+0x172>
     bd6:	9c 01       	movw	r18, r24
     bd8:	21 50       	subi	r18, 0x01	; 1
     bda:	31 09       	sbc	r19, r1
     bdc:	82 23       	and	r24, r18
     bde:	93 23       	and	r25, r19
     be0:	89 2b       	or	r24, r25
     be2:	11 f6       	brne	.-124    	; 0xb68 <mount_volume+0x172>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     be4:	e0 5c       	subi	r30, 0xC0	; 192
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 80       	ld	r8, Z
     bea:	91 80       	ldd	r9, Z+1	; 0x01
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
     bec:	18 96       	adiw	r26, 0x08	; 8
     bee:	9c 92       	st	X, r9
     bf0:	8e 92       	st	-X, r8
     bf2:	17 97       	sbiw	r26, 0x07	; 7
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
     bf4:	c4 01       	movw	r24, r8
     bf6:	8f 70       	andi	r24, 0x0F	; 15
     bf8:	99 27       	eor	r25, r25
     bfa:	89 2b       	or	r24, r25
     bfc:	09 f0       	breq	.+2      	; 0xc00 <mount_volume+0x20a>
     bfe:	b4 cf       	rjmp	.-152    	; 0xb68 <mount_volume+0x172>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     c00:	32 96       	adiw	r30, 0x02	; 2
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
     c06:	6c 01       	movw	r12, r24
     c08:	e1 2c       	mov	r14, r1
     c0a:	f1 2c       	mov	r15, r1
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
     c0c:	89 2b       	or	r24, r25
     c0e:	39 f4       	brne	.+14     	; 0xc1e <mount_volume+0x228>
     c10:	c8 01       	movw	r24, r16
     c12:	81 5b       	subi	r24, 0xB1	; 177
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
     c1a:	6b 01       	movw	r12, r22
     c1c:	7c 01       	movw	r14, r24
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     c1e:	d8 01       	movw	r26, r16
     c20:	dd 96       	adiw	r26, 0x3d	; 61
     c22:	ed 91       	ld	r30, X+
     c24:	fc 91       	ld	r31, X
     c26:	de 97       	sbiw	r26, 0x3e	; 62

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
     c28:	30 97       	sbiw	r30, 0x00	; 0
     c2a:	09 f4       	brne	.+2      	; 0xc2e <mount_volume+0x238>
     c2c:	9d cf       	rjmp	.-198    	; 0xb68 <mount_volume+0x172>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
     c2e:	aa 2d       	mov	r26, r10
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	a3 01       	movw	r20, r6
     c34:	92 01       	movw	r18, r4
     c36:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__muluhisi3>
     c3a:	69 8f       	std	Y+25, r22	; 0x19
     c3c:	7a 8f       	std	Y+26, r23	; 0x1a
     c3e:	8b 8f       	std	Y+27, r24	; 0x1b
     c40:	9c 8f       	std	Y+28, r25	; 0x1c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
     c42:	9f 01       	movw	r18, r30
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	2d 8f       	std	Y+29, r18	; 0x1d
     c4a:	3e 8f       	std	Y+30, r19	; 0x1e
     c4c:	4f 8f       	std	Y+31, r20	; 0x1f
     c4e:	58 a3       	std	Y+32, r21	; 0x20
     c50:	c4 01       	movw	r24, r8
     c52:	f4 e0       	ldi	r31, 0x04	; 4
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	fa 95       	dec	r31
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <mount_volume+0x25e>
     c5c:	28 0f       	add	r18, r24
     c5e:	39 1f       	adc	r19, r25
     c60:	41 1d       	adc	r20, r1
     c62:	51 1d       	adc	r21, r1
     c64:	da 01       	movw	r26, r20
     c66:	c9 01       	movw	r24, r18
     c68:	29 8d       	ldd	r18, Y+25	; 0x19
     c6a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c6c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     c6e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     c70:	28 0f       	add	r18, r24
     c72:	39 1f       	adc	r19, r25
     c74:	4a 1f       	adc	r20, r26
     c76:	5b 1f       	adc	r21, r27
     c78:	2d 8b       	std	Y+21, r18	; 0x15
     c7a:	3e 8b       	std	Y+22, r19	; 0x16
     c7c:	4f 8b       	std	Y+23, r20	; 0x17
     c7e:	58 8f       	std	Y+24, r21	; 0x18
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
     c80:	c2 16       	cp	r12, r18
     c82:	d3 06       	cpc	r13, r19
     c84:	e4 06       	cpc	r14, r20
     c86:	f5 06       	cpc	r15, r21
     c88:	08 f4       	brcc	.+2      	; 0xc8c <mount_volume+0x296>
     c8a:	6e cf       	rjmp	.-292    	; 0xb68 <mount_volume+0x172>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
     c8c:	c7 01       	movw	r24, r14
     c8e:	b6 01       	movw	r22, r12
     c90:	62 1b       	sub	r22, r18
     c92:	73 0b       	sbc	r23, r19
     c94:	84 0b       	sbc	r24, r20
     c96:	95 0b       	sbc	r25, r21
     c98:	2b 2d       	mov	r18, r11
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__udivmodsi4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     ca4:	da 01       	movw	r26, r20
     ca6:	c9 01       	movw	r24, r18
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	a1 09       	sbc	r26, r1
     cac:	b1 09       	sbc	r27, r1
     cae:	85 3f       	cpi	r24, 0xF5	; 245
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	af 4f       	sbci	r26, 0xFF	; 255
     cb4:	bf 40       	sbci	r27, 0x0F	; 15
     cb6:	08 f0       	brcs	.+2      	; 0xcba <mount_volume+0x2c4>
     cb8:	57 cf       	rjmp	.-338    	; 0xb68 <mount_volume+0x172>
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
     cba:	26 3f       	cpi	r18, 0xF6	; 246
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	38 07       	cpc	r19, r24
     cc0:	41 05       	cpc	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	50 f4       	brcc	.+20     	; 0xcda <mount_volume+0x2e4>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
     cc6:	26 3f       	cpi	r18, 0xF6	; 246
     cc8:	9f e0       	ldi	r25, 0x0F	; 15
     cca:	39 07       	cpc	r19, r25
     ccc:	41 05       	cpc	r20, r1
     cce:	51 05       	cpc	r21, r1
     cd0:	40 f4       	brcc	.+16     	; 0xce2 <mount_volume+0x2ec>
     cd2:	aa 24       	eor	r10, r10
     cd4:	a3 94       	inc	r10
     cd6:	b1 2c       	mov	r11, r1
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <mount_volume+0x2f2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
     cda:	73 e0       	ldi	r23, 0x03	; 3
     cdc:	a7 2e       	mov	r10, r23
     cde:	b1 2c       	mov	r11, r1
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <mount_volume+0x2f2>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
     ce2:	62 e0       	ldi	r22, 0x02	; 2
     ce4:	a6 2e       	mov	r10, r22
     ce6:	b1 2c       	mov	r11, r1
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
		if (fmt == 0) return FR_NO_FILESYSTEM;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
     ce8:	69 01       	movw	r12, r18
     cea:	7a 01       	movw	r14, r20
     cec:	a2 e0       	ldi	r26, 0x02	; 2
     cee:	ca 0e       	add	r12, r26
     cf0:	d1 1c       	adc	r13, r1
     cf2:	e1 1c       	adc	r14, r1
     cf4:	f1 1c       	adc	r15, r1
     cf6:	f8 01       	movw	r30, r16
     cf8:	c3 8a       	std	Z+19, r12	; 0x13
     cfa:	d4 8a       	std	Z+20, r13	; 0x14
     cfc:	e5 8a       	std	Z+21, r14	; 0x15
     cfe:	f6 8a       	std	Z+22, r15	; 0x16
		fs->volbase = bsect;							/* Volume start sector */
     d00:	29 89       	ldd	r18, Y+17	; 0x11
     d02:	3a 89       	ldd	r19, Y+18	; 0x12
     d04:	4b 89       	ldd	r20, Y+19	; 0x13
     d06:	5c 89       	ldd	r21, Y+20	; 0x14
     d08:	23 8f       	std	Z+27, r18	; 0x1b
     d0a:	34 8f       	std	Z+28, r19	; 0x1c
     d0c:	45 8f       	std	Z+29, r20	; 0x1d
     d0e:	56 8f       	std	Z+30, r21	; 0x1e
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
     d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d12:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d14:	af 8d       	ldd	r26, Y+31	; 0x1f
     d16:	b8 a1       	ldd	r27, Y+32	; 0x20
     d18:	28 0f       	add	r18, r24
     d1a:	39 1f       	adc	r19, r25
     d1c:	4a 1f       	adc	r20, r26
     d1e:	5b 1f       	adc	r21, r27
     d20:	2d 8f       	std	Y+29, r18	; 0x1d
     d22:	3e 8f       	std	Y+30, r19	; 0x1e
     d24:	4f 8f       	std	Y+31, r20	; 0x1f
     d26:	58 a3       	std	Y+32, r21	; 0x20
     d28:	27 8f       	std	Z+31, r18	; 0x1f
     d2a:	30 a3       	std	Z+32, r19	; 0x20
     d2c:	41 a3       	std	Z+33, r20	; 0x21
     d2e:	52 a3       	std	Z+34, r21	; 0x22
		fs->database = bsect + sysect;					/* Data start sector */
     d30:	49 89       	ldd	r20, Y+17	; 0x11
     d32:	5a 89       	ldd	r21, Y+18	; 0x12
     d34:	6b 89       	ldd	r22, Y+19	; 0x13
     d36:	7c 89       	ldd	r23, Y+20	; 0x14
     d38:	8d 89       	ldd	r24, Y+21	; 0x15
     d3a:	9e 89       	ldd	r25, Y+22	; 0x16
     d3c:	af 89       	ldd	r26, Y+23	; 0x17
     d3e:	b8 8d       	ldd	r27, Y+24	; 0x18
     d40:	48 0f       	add	r20, r24
     d42:	59 1f       	adc	r21, r25
     d44:	6a 1f       	adc	r22, r26
     d46:	7b 1f       	adc	r23, r27
     d48:	47 a3       	std	Z+39, r20	; 0x27
     d4a:	50 a7       	std	Z+40, r21	; 0x28
     d4c:	61 a7       	std	Z+41, r22	; 0x29
     d4e:	72 a7       	std	Z+42, r23	; 0x2a
		if (fmt == FS_FAT32) {
     d50:	b3 e0       	ldi	r27, 0x03	; 3
     d52:	ab 16       	cp	r10, r27
     d54:	b1 04       	cpc	r11, r1
     d56:	e1 f4       	brne	.+56     	; 0xd90 <mount_volume+0x39a>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     d58:	e7 5a       	subi	r30, 0xA7	; 167
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
		fs->volbase = bsect;							/* Volume start sector */
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
		fs->database = bsect + sysect;					/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	89 2b       	or	r24, r25
     d62:	09 f0       	breq	.+2      	; 0xd66 <mount_volume+0x370>
     d64:	01 cf       	rjmp	.-510    	; 0xb68 <mount_volume+0x172>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
     d66:	89 28       	or	r8, r9
     d68:	09 f0       	breq	.+2      	; 0xd6c <mount_volume+0x376>
     d6a:	fe ce       	rjmp	.-516    	; 0xb68 <mount_volume+0x172>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
     d6c:	c8 01       	movw	r24, r16
     d6e:	85 5a       	subi	r24, 0xA5	; 165
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
     d76:	f8 01       	movw	r30, r16
     d78:	63 a3       	std	Z+35, r22	; 0x23
     d7a:	74 a3       	std	Z+36, r23	; 0x24
     d7c:	85 a3       	std	Z+37, r24	; 0x25
     d7e:	96 a3       	std	Z+38, r25	; 0x26
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
     d80:	42 e0       	ldi	r20, 0x02	; 2
     d82:	cc 0c       	add	r12, r12
     d84:	dd 1c       	adc	r13, r13
     d86:	ee 1c       	adc	r14, r14
     d88:	ff 1c       	adc	r15, r15
     d8a:	4a 95       	dec	r20
     d8c:	d1 f7       	brne	.-12     	; 0xd82 <mount_volume+0x38c>
     d8e:	32 c0       	rjmp	.+100    	; 0xdf4 <mount_volume+0x3fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     d90:	89 28       	or	r8, r9
     d92:	09 f4       	brne	.+2      	; 0xd96 <mount_volume+0x3a0>
     d94:	e9 ce       	rjmp	.-558    	; 0xb68 <mount_volume+0x172>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
     d96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d98:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d9a:	af 8d       	ldd	r26, Y+31	; 0x1f
     d9c:	b8 a1       	ldd	r27, Y+32	; 0x20
     d9e:	29 8d       	ldd	r18, Y+25	; 0x19
     da0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     da2:	4b 8d       	ldd	r20, Y+27	; 0x1b
     da4:	5c 8d       	ldd	r21, Y+28	; 0x1c
     da6:	82 0f       	add	r24, r18
     da8:	93 1f       	adc	r25, r19
     daa:	a4 1f       	adc	r26, r20
     dac:	b5 1f       	adc	r27, r21
     dae:	f8 01       	movw	r30, r16
     db0:	83 a3       	std	Z+35, r24	; 0x23
     db2:	94 a3       	std	Z+36, r25	; 0x24
     db4:	a5 a3       	std	Z+37, r26	; 0x25
     db6:	b6 a3       	std	Z+38, r27	; 0x26
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     db8:	f2 e0       	ldi	r31, 0x02	; 2
     dba:	af 16       	cp	r10, r31
     dbc:	b1 04       	cpc	r11, r1
     dbe:	29 f4       	brne	.+10     	; 0xdca <mount_volume+0x3d4>
     dc0:	cc 0c       	add	r12, r12
     dc2:	dd 1c       	adc	r13, r13
     dc4:	ee 1c       	adc	r14, r14
     dc6:	ff 1c       	adc	r15, r15
     dc8:	15 c0       	rjmp	.+42     	; 0xdf4 <mount_volume+0x3fe>
     dca:	a3 e0       	ldi	r26, 0x03	; 3
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	a7 01       	movw	r20, r14
     dd0:	96 01       	movw	r18, r12
     dd2:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__muluhisi3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	b6 95       	lsr	r27
     ddc:	a7 95       	ror	r26
     dde:	97 95       	ror	r25
     de0:	87 95       	ror	r24
     de2:	21 e0       	ldi	r18, 0x01	; 1
     de4:	c2 22       	and	r12, r18
     de6:	dd 24       	eor	r13, r13
     de8:	ee 24       	eor	r14, r14
     dea:	ff 24       	eor	r15, r15
     dec:	c8 0e       	add	r12, r24
     dee:	d9 1e       	adc	r13, r25
     df0:	ea 1e       	adc	r14, r26
     df2:	fb 1e       	adc	r15, r27
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
     df4:	3f ef       	ldi	r19, 0xFF	; 255
     df6:	c3 0e       	add	r12, r19
     df8:	31 e0       	ldi	r19, 0x01	; 1
     dfa:	d3 1e       	adc	r13, r19
     dfc:	e1 1c       	adc	r14, r1
     dfe:	f1 1c       	adc	r15, r1
     e00:	89 e0       	ldi	r24, 0x09	; 9
     e02:	f6 94       	lsr	r15
     e04:	e7 94       	ror	r14
     e06:	d7 94       	ror	r13
     e08:	c7 94       	ror	r12
     e0a:	8a 95       	dec	r24
     e0c:	d1 f7       	brne	.-12     	; 0xe02 <mount_volume+0x40c>
     e0e:	4c 14       	cp	r4, r12
     e10:	5d 04       	cpc	r5, r13
     e12:	6e 04       	cpc	r6, r14
     e14:	7f 04       	cpc	r7, r15
     e16:	08 f4       	brcc	.+2      	; 0xe1a <mount_volume+0x424>
     e18:	a7 ce       	rjmp	.-690    	; 0xb68 <mount_volume+0x172>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	9f ef       	ldi	r25, 0xFF	; 255
     e1e:	dc 01       	movw	r26, r24
     e20:	f8 01       	movw	r30, r16
     e22:	87 87       	std	Z+15, r24	; 0x0f
     e24:	90 8b       	std	Z+16, r25	; 0x10
     e26:	a1 8b       	std	Z+17, r26	; 0x11
     e28:	b2 8b       	std	Z+18, r27	; 0x12
     e2a:	83 87       	std	Z+11, r24	; 0x0b
     e2c:	94 87       	std	Z+12, r25	; 0x0c
     e2e:	a5 87       	std	Z+13, r26	; 0x0d
     e30:	b6 87       	std	Z+14, r27	; 0x0e
		fs->fsi_flag = 0x80;
     e32:	80 e8       	ldi	r24, 0x80	; 128
     e34:	84 83       	std	Z+4, r24	; 0x04
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
     e36:	f3 e0       	ldi	r31, 0x03	; 3
     e38:	af 16       	cp	r10, r31
     e3a:	b1 04       	cpc	r11, r1
     e3c:	f1 f5       	brne	.+124    	; 0xeba <mount_volume+0x4c4>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     e3e:	f8 01       	movw	r30, r16
     e40:	e1 5a       	subi	r30, 0xA1	; 161
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
		fs->fsi_flag = 0x80;
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	b9 f5       	brne	.+110    	; 0xeba <mount_volume+0x4c4>
			&& move_window(fs, bsect + 1) == FR_OK)
     e4c:	49 89       	ldd	r20, Y+17	; 0x11
     e4e:	5a 89       	ldd	r21, Y+18	; 0x12
     e50:	6b 89       	ldd	r22, Y+19	; 0x13
     e52:	7c 89       	ldd	r23, Y+20	; 0x14
     e54:	4f 5f       	subi	r20, 0xFF	; 255
     e56:	5f 4f       	sbci	r21, 0xFF	; 255
     e58:	6f 4f       	sbci	r22, 0xFF	; 255
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	c8 01       	movw	r24, r16
     e5e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     e62:	81 11       	cpse	r24, r1
     e64:	2a c0       	rjmp	.+84     	; 0xeba <mount_volume+0x4c4>
		{
			fs->fsi_flag = 0;
     e66:	d8 01       	movw	r26, r16
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	1c 92       	st	X, r1
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     e6c:	f8 01       	movw	r30, r16
     e6e:	e3 5d       	subi	r30, 0xD3	; 211
     e70:	fd 4f       	sbci	r31, 0xFD	; 253
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	85 35       	cpi	r24, 0x55	; 85
     e78:	9a 4a       	sbci	r25, 0xAA	; 170
     e7a:	f9 f4       	brne	.+62     	; 0xeba <mount_volume+0x4c4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
     e7c:	c8 01       	movw	r24, r16
     e7e:	8f 96       	adiw	r24, 0x2f	; 47
     e80:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
     e84:	62 35       	cpi	r22, 0x52	; 82
     e86:	72 45       	sbci	r23, 0x52	; 82
     e88:	81 46       	sbci	r24, 0x61	; 97
     e8a:	91 44       	sbci	r25, 0x41	; 65
     e8c:	b1 f4       	brne	.+44     	; 0xeba <mount_volume+0x4c4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
     e8e:	c8 01       	movw	r24, r16
     e90:	8d 5e       	subi	r24, 0xED	; 237
     e92:	9d 4f       	sbci	r25, 0xFD	; 253
     e94:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
     e98:	62 37       	cpi	r22, 0x72	; 114
     e9a:	72 47       	sbci	r23, 0x72	; 114
     e9c:	81 44       	sbci	r24, 0x41	; 65
     e9e:	91 46       	sbci	r25, 0x61	; 97
     ea0:	61 f4       	brne	.+24     	; 0xeba <mount_volume+0x4c4>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
     ea2:	c8 01       	movw	r24, r16
     ea4:	85 5e       	subi	r24, 0xE5	; 229
     ea6:	9d 4f       	sbci	r25, 0xFD	; 253
     ea8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
     eac:	d8 01       	movw	r26, r16
     eae:	1b 96       	adiw	r26, 0x0b	; 11
     eb0:	6d 93       	st	X+, r22
     eb2:	7d 93       	st	X+, r23
     eb4:	8d 93       	st	X+, r24
     eb6:	9c 93       	st	X, r25
     eb8:	1e 97       	sbiw	r26, 0x0e	; 14
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
     eba:	f8 01       	movw	r30, r16
     ebc:	a0 82       	st	Z, r10
	fs->id = ++Fsid;		/* Volume mount ID */
     ebe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
     ec2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <__data_end+0x1>
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <__data_end+0x1>
     ecc:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
     ed0:	96 83       	std	Z+6, r25	; 0x06
     ed2:	85 83       	std	Z+5, r24	; 0x05
     ed4:	04 c0       	rjmp	.+8      	; 0xede <mount_volume+0x4e8>


	/* Get logical drive number */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
     ed6:	8b e0       	ldi	r24, 0x0B	; 11
     ed8:	0e c0       	rjmp	.+28     	; 0xef6 <mount_volume+0x500>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
     eda:	8c e0       	ldi	r24, 0x0C	; 12
     edc:	0c c0       	rjmp	.+24     	; 0xef6 <mount_volume+0x500>
		stat = disk_status(fs->pdrv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The filesystem object is already valid */
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	0a c0       	rjmp	.+20     	; 0xef6 <mount_volume+0x500>

	fs->fs_type = 0;					/* Clear the filesystem object */
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <mount_volume+0x500>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <mount_volume+0x500>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	30 ce       	rjmp	.-928    	; 0xb50 <mount_volume+0x15a>
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	2d ce       	rjmp	.-934    	; 0xb50 <mount_volume+0x15a>
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
     ef6:	a0 96       	adiw	r28, 0x20	; 32
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	bf 90       	pop	r11
     f14:	af 90       	pop	r10
     f16:	9f 90       	pop	r9
     f18:	8f 90       	pop	r8
     f1a:	7f 90       	pop	r7
     f1c:	6f 90       	pop	r6
     f1e:	5f 90       	pop	r5
     f20:	4f 90       	pop	r4
     f22:	08 95       	ret

00000f24 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
     f24:	2f 92       	push	r2
     f26:	3f 92       	push	r3
     f28:	4f 92       	push	r4
     f2a:	5f 92       	push	r5
     f2c:	6f 92       	push	r6
     f2e:	7f 92       	push	r7
     f30:	8f 92       	push	r8
     f32:	9f 92       	push	r9
     f34:	af 92       	push	r10
     f36:	bf 92       	push	r11
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	00 d0       	rcall	.+0      	; 0xf4a <put_fat+0x26>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <put_fat+0x28>
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
     f50:	42 30       	cpi	r20, 0x02	; 2
     f52:	51 05       	cpc	r21, r1
     f54:	61 05       	cpc	r22, r1
     f56:	71 05       	cpc	r23, r1
     f58:	08 f4       	brcc	.+2      	; 0xf5c <put_fat+0x38>
     f5a:	e6 c0       	rjmp	.+460    	; 0x1128 <put_fat+0x204>
     f5c:	fc 01       	movw	r30, r24
     f5e:	c3 88       	ldd	r12, Z+19	; 0x13
     f60:	d4 88       	ldd	r13, Z+20	; 0x14
     f62:	e5 88       	ldd	r14, Z+21	; 0x15
     f64:	f6 88       	ldd	r15, Z+22	; 0x16
     f66:	4c 15       	cp	r20, r12
     f68:	5d 05       	cpc	r21, r13
     f6a:	6e 05       	cpc	r22, r14
     f6c:	7f 05       	cpc	r23, r15
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <put_fat+0x4e>
     f70:	db c0       	rjmp	.+438    	; 0x1128 <put_fat+0x204>
     f72:	28 01       	movw	r4, r16
     f74:	39 01       	movw	r6, r18
     f76:	6a 01       	movw	r12, r20
     f78:	7b 01       	movw	r14, r22
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
		switch (fs->fs_type) {
     f7e:	80 81       	ld	r24, Z
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	09 f4       	brne	.+2      	; 0xf86 <put_fat+0x62>
     f84:	71 c0       	rjmp	.+226    	; 0x1068 <put_fat+0x144>
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	09 f4       	brne	.+2      	; 0xf8c <put_fat+0x68>
     f8a:	90 c0       	rjmp	.+288    	; 0x10ac <put_fat+0x188>
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	09 f0       	breq	.+2      	; 0xf92 <put_fat+0x6e>
     f90:	cb c0       	rjmp	.+406    	; 0x1128 <put_fat+0x204>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
     f92:	5a 01       	movw	r10, r20
     f94:	b6 94       	lsr	r11
     f96:	a7 94       	ror	r10
     f98:	a4 0e       	add	r10, r20
     f9a:	b5 1e       	adc	r11, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     f9c:	c5 01       	movw	r24, r10
     f9e:	89 2f       	mov	r24, r25
     fa0:	99 27       	eor	r25, r25
     fa2:	86 95       	lsr	r24
     fa4:	47 8d       	ldd	r20, Z+31	; 0x1f
     fa6:	50 a1       	ldd	r21, Z+32	; 0x20
     fa8:	61 a1       	ldd	r22, Z+33	; 0x21
     faa:	72 a1       	ldd	r23, Z+34	; 0x22
     fac:	48 0f       	add	r20, r24
     fae:	59 1f       	adc	r21, r25
     fb0:	61 1d       	adc	r22, r1
     fb2:	71 1d       	adc	r23, r1
     fb4:	cf 01       	movw	r24, r30
     fb6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
     fba:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
     fbc:	81 11       	cpse	r24, r1
     fbe:	b5 c0       	rjmp	.+362    	; 0x112a <put_fat+0x206>
			p = fs->win + bc++ % SS(fs);
     fc0:	2b 81       	ldd	r18, Y+3	; 0x03
     fc2:	3c 81       	ldd	r19, Y+4	; 0x04
     fc4:	21 5d       	subi	r18, 0xD1	; 209
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	3a 83       	std	Y+2, r19	; 0x02
     fca:	29 83       	std	Y+1, r18	; 0x01
     fcc:	15 01       	movw	r2, r10
     fce:	3f ef       	ldi	r19, 0xFF	; 255
     fd0:	23 1a       	sub	r2, r19
     fd2:	33 0a       	sbc	r3, r19
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	b8 22       	and	r11, r24
     fd8:	e9 81       	ldd	r30, Y+1	; 0x01
     fda:	fa 81       	ldd	r31, Y+2	; 0x02
     fdc:	ea 0d       	add	r30, r10
     fde:	fb 1d       	adc	r31, r11
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
     fe0:	46 01       	movw	r8, r12
     fe2:	57 01       	movw	r10, r14
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	89 22       	and	r8, r25
     fe8:	99 24       	eor	r9, r9
     fea:	aa 24       	eor	r10, r10
     fec:	bb 24       	eor	r11, r11
     fee:	c0 fe       	sbrs	r12, 0
     ff0:	09 c0       	rjmp	.+18     	; 0x1004 <put_fat+0xe0>
     ff2:	80 81       	ld	r24, Z
     ff4:	28 2f       	mov	r18, r24
     ff6:	2f 70       	andi	r18, 0x0F	; 15
     ff8:	30 e1       	ldi	r19, 0x10	; 16
     ffa:	43 9e       	mul	r4, r19
     ffc:	c0 01       	movw	r24, r0
     ffe:	11 24       	eor	r1, r1
    1000:	82 2b       	or	r24, r18
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <put_fat+0xe2>
    1004:	84 2d       	mov	r24, r4
    1006:	80 83       	st	Z, r24
			fs->wflag = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	eb 81       	ldd	r30, Y+3	; 0x03
    100c:	fc 81       	ldd	r31, Y+4	; 0x04
    100e:	83 83       	std	Z+3, r24	; 0x03
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1010:	47 8d       	ldd	r20, Z+31	; 0x1f
    1012:	50 a1       	ldd	r21, Z+32	; 0x20
    1014:	61 a1       	ldd	r22, Z+33	; 0x21
    1016:	72 a1       	ldd	r23, Z+34	; 0x22
    1018:	c1 01       	movw	r24, r2
    101a:	89 2f       	mov	r24, r25
    101c:	99 27       	eor	r25, r25
    101e:	86 95       	lsr	r24
    1020:	48 0f       	add	r20, r24
    1022:	59 1f       	adc	r21, r25
    1024:	61 1d       	adc	r22, r1
    1026:	71 1d       	adc	r23, r1
    1028:	cf 01       	movw	r24, r30
    102a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    102e:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1030:	81 11       	cpse	r24, r1
    1032:	7b c0       	rjmp	.+246    	; 0x112a <put_fat+0x206>
			p = fs->win + bc % SS(fs);
    1034:	f1 e0       	ldi	r31, 0x01	; 1
    1036:	3f 22       	and	r3, r31
    1038:	e9 81       	ldd	r30, Y+1	; 0x01
    103a:	fa 81       	ldd	r31, Y+2	; 0x02
    103c:	e2 0d       	add	r30, r2
    103e:	f3 1d       	adc	r31, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    1040:	89 28       	or	r8, r9
    1042:	8a 28       	or	r8, r10
    1044:	8b 28       	or	r8, r11
    1046:	41 f0       	breq	.+16     	; 0x1058 <put_fat+0x134>
    1048:	54 e0       	ldi	r21, 0x04	; 4
    104a:	76 94       	lsr	r7
    104c:	67 94       	ror	r6
    104e:	57 94       	ror	r5
    1050:	47 94       	ror	r4
    1052:	5a 95       	dec	r21
    1054:	d1 f7       	brne	.-12     	; 0x104a <put_fat+0x126>
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <put_fat+0x140>
    1058:	00 81       	ld	r16, Z
    105a:	00 7f       	andi	r16, 0xF0	; 240
    105c:	85 2d       	mov	r24, r5
    105e:	8f 70       	andi	r24, 0x0F	; 15
    1060:	40 2e       	mov	r4, r16
    1062:	48 2a       	or	r4, r24
    1064:	40 82       	st	Z, r4
    1066:	5b c0       	rjmp	.+182    	; 0x111e <put_fat+0x1fa>
			fs->wflag = 1;
			break;

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1068:	77 27       	eor	r23, r23
    106a:	6f 2d       	mov	r22, r15
    106c:	5e 2d       	mov	r21, r14
    106e:	4d 2d       	mov	r20, r13
    1070:	eb 81       	ldd	r30, Y+3	; 0x03
    1072:	fc 81       	ldd	r31, Y+4	; 0x04
    1074:	87 8d       	ldd	r24, Z+31	; 0x1f
    1076:	90 a1       	ldd	r25, Z+32	; 0x20
    1078:	a1 a1       	ldd	r26, Z+33	; 0x21
    107a:	b2 a1       	ldd	r27, Z+34	; 0x22
    107c:	48 0f       	add	r20, r24
    107e:	59 1f       	adc	r21, r25
    1080:	6a 1f       	adc	r22, r26
    1082:	7b 1f       	adc	r23, r27
    1084:	cf 01       	movw	r24, r30
    1086:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    108a:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    108c:	81 11       	cpse	r24, r1
    108e:	4d c0       	rjmp	.+154    	; 0x112a <put_fat+0x206>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    1090:	eb 81       	ldd	r30, Y+3	; 0x03
    1092:	fc 81       	ldd	r31, Y+4	; 0x04
    1094:	bf 96       	adiw	r30, 0x2f	; 47
    1096:	cc 0c       	add	r12, r12
    1098:	dd 1c       	adc	r13, r13
    109a:	e8 94       	clt
    109c:	c0 f8       	bld	r12, 0
    109e:	21 e0       	ldi	r18, 0x01	; 1
    10a0:	d2 22       	and	r13, r18
    10a2:	ec 0d       	add	r30, r12
    10a4:	fd 1d       	adc	r31, r13
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    10a6:	40 82       	st	Z, r4
	*ptr++ = (BYTE)val;
    10a8:	51 82       	std	Z+1, r5	; 0x01
    10aa:	39 c0       	rjmp	.+114    	; 0x111e <put_fat+0x1fa>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    10ac:	eb 81       	ldd	r30, Y+3	; 0x03
    10ae:	fc 81       	ldd	r31, Y+4	; 0x04
    10b0:	87 8d       	ldd	r24, Z+31	; 0x1f
    10b2:	90 a1       	ldd	r25, Z+32	; 0x20
    10b4:	a1 a1       	ldd	r26, Z+33	; 0x21
    10b6:	b2 a1       	ldd	r27, Z+34	; 0x22
    10b8:	27 e0       	ldi	r18, 0x07	; 7
    10ba:	76 95       	lsr	r23
    10bc:	67 95       	ror	r22
    10be:	57 95       	ror	r21
    10c0:	47 95       	ror	r20
    10c2:	2a 95       	dec	r18
    10c4:	d1 f7       	brne	.-12     	; 0x10ba <put_fat+0x196>
    10c6:	48 0f       	add	r20, r24
    10c8:	59 1f       	adc	r21, r25
    10ca:	6a 1f       	adc	r22, r26
    10cc:	7b 1f       	adc	r23, r27
    10ce:	cf 01       	movw	r24, r30
    10d0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    10d4:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    10d6:	81 11       	cpse	r24, r1
    10d8:	28 c0       	rjmp	.+80     	; 0x112a <put_fat+0x206>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    10da:	4b 81       	ldd	r20, Y+3	; 0x03
    10dc:	5c 81       	ldd	r21, Y+4	; 0x04
    10de:	41 5d       	subi	r20, 0xD1	; 209
    10e0:	5f 4f       	sbci	r21, 0xFF	; 255
    10e2:	cc 0c       	add	r12, r12
    10e4:	dd 1c       	adc	r13, r13
    10e6:	cc 0c       	add	r12, r12
    10e8:	dd 1c       	adc	r13, r13
    10ea:	fc ef       	ldi	r31, 0xFC	; 252
    10ec:	cf 22       	and	r12, r31
    10ee:	f1 e0       	ldi	r31, 0x01	; 1
    10f0:	df 22       	and	r13, r31
    10f2:	c4 0e       	add	r12, r20
    10f4:	d5 1e       	adc	r13, r21
    10f6:	c6 01       	movw	r24, r12
    10f8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
    10fc:	2f e0       	ldi	r18, 0x0F	; 15
    10fe:	72 22       	and	r7, r18
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	88 27       	eor	r24, r24
    1106:	99 27       	eor	r25, r25
    1108:	aa 27       	eor	r26, r26
    110a:	b0 7f       	andi	r27, 0xF0	; 240
    110c:	48 2a       	or	r4, r24
    110e:	59 2a       	or	r5, r25
    1110:	6a 2a       	or	r6, r26
    1112:	7b 2a       	or	r7, r27
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1114:	f6 01       	movw	r30, r12
    1116:	40 82       	st	Z, r4
	*ptr++ = (BYTE)val; val >>= 8;
    1118:	51 82       	std	Z+1, r5	; 0x01
	*ptr++ = (BYTE)val; val >>= 8;
    111a:	62 82       	std	Z+2, r6	; 0x02
	*ptr++ = (BYTE)val;
    111c:	73 82       	std	Z+3, r7	; 0x03
			if (res != FR_OK) break;
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
			fs->wflag = 1;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	eb 81       	ldd	r30, Y+3	; 0x03
    1122:	fc 81       	ldd	r31, Y+4	; 0x04
    1124:	83 83       	std	Z+3, r24	; 0x03
    1126:	01 c0       	rjmp	.+2      	; 0x112a <put_fat+0x206>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
    1128:	12 e0       	ldi	r17, 0x02	; 2
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
    112a:	81 2f       	mov	r24, r17
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	df 90       	pop	r13
    1142:	cf 90       	pop	r12
    1144:	bf 90       	pop	r11
    1146:	af 90       	pop	r10
    1148:	9f 90       	pop	r9
    114a:	8f 90       	pop	r8
    114c:	7f 90       	pop	r7
    114e:	6f 90       	pop	r6
    1150:	5f 90       	pop	r5
    1152:	4f 90       	pop	r4
    1154:	3f 90       	pop	r3
    1156:	2f 90       	pop	r2
    1158:	08 95       	ret

0000115a <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
    115a:	4f 92       	push	r4
    115c:	5f 92       	push	r5
    115e:	6f 92       	push	r6
    1160:	7f 92       	push	r7
    1162:	8f 92       	push	r8
    1164:	9f 92       	push	r9
    1166:	af 92       	push	r10
    1168:	bf 92       	push	r11
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	8c 01       	movw	r16, r24
    117c:	2a 01       	movw	r4, r20
    117e:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
    1180:	fc 01       	movw	r30, r24
    1182:	c0 81       	ld	r28, Z
    1184:	d1 81       	ldd	r29, Z+1	; 0x01


	if (clst == 0) {	/* Create a new chain */
    1186:	41 15       	cp	r20, r1
    1188:	51 05       	cpc	r21, r1
    118a:	61 05       	cpc	r22, r1
    118c:	71 05       	cpc	r23, r1
    118e:	99 f4       	brne	.+38     	; 0x11b6 <create_chain+0x5c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
    1190:	8b 84       	ldd	r8, Y+11	; 0x0b
    1192:	9c 84       	ldd	r9, Y+12	; 0x0c
    1194:	ad 84       	ldd	r10, Y+13	; 0x0d
    1196:	be 84       	ldd	r11, Y+14	; 0x0e
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    1198:	81 14       	cp	r8, r1
    119a:	91 04       	cpc	r9, r1
    119c:	a1 04       	cpc	r10, r1
    119e:	b1 04       	cpc	r11, r1
    11a0:	59 f1       	breq	.+86     	; 0x11f8 <create_chain+0x9e>
    11a2:	8b 89       	ldd	r24, Y+19	; 0x13
    11a4:	9c 89       	ldd	r25, Y+20	; 0x14
    11a6:	ad 89       	ldd	r26, Y+21	; 0x15
    11a8:	be 89       	ldd	r27, Y+22	; 0x16
    11aa:	88 16       	cp	r8, r24
    11ac:	99 06       	cpc	r9, r25
    11ae:	aa 06       	cpc	r10, r26
    11b0:	bb 06       	cpc	r11, r27
    11b2:	30 f1       	brcs	.+76     	; 0x1200 <create_chain+0xa6>
    11b4:	21 c0       	rjmp	.+66     	; 0x11f8 <create_chain+0x9e>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
		if (cs < 2) return 1;				/* Test for insanity */
    11bc:	62 30       	cpi	r22, 0x02	; 2
    11be:	71 05       	cpc	r23, r1
    11c0:	81 05       	cpc	r24, r1
    11c2:	91 05       	cpc	r25, r1
    11c4:	08 f4       	brcc	.+2      	; 0x11c8 <create_chain+0x6e>
    11c6:	ee c0       	rjmp	.+476    	; 0x13a4 <create_chain+0x24a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
    11c8:	6f 3f       	cpi	r22, 0xFF	; 255
    11ca:	ff ef       	ldi	r31, 0xFF	; 255
    11cc:	7f 07       	cpc	r23, r31
    11ce:	8f 07       	cpc	r24, r31
    11d0:	9f 07       	cpc	r25, r31
    11d2:	29 f4       	brne	.+10     	; 0x11de <create_chain+0x84>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    11d4:	4f ef       	ldi	r20, 0xFF	; 255
    11d6:	3f ef       	ldi	r19, 0xFF	; 255
    11d8:	2f ef       	ldi	r18, 0xFF	; 255
    11da:	9f ef       	ldi	r25, 0xFF	; 255
    11dc:	eb c0       	rjmp	.+470    	; 0x13b4 <create_chain+0x25a>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
		if (cs < 2) return 1;				/* Test for insanity */
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    11de:	cb 88       	ldd	r12, Y+19	; 0x13
    11e0:	dc 88       	ldd	r13, Y+20	; 0x14
    11e2:	ed 88       	ldd	r14, Y+21	; 0x15
    11e4:	fe 88       	ldd	r15, Y+22	; 0x16
    11e6:	6c 15       	cp	r22, r12
    11e8:	7d 05       	cpc	r23, r13
    11ea:	8e 05       	cpc	r24, r14
    11ec:	9f 05       	cpc	r25, r15
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <create_chain+0x98>
    11f0:	de c0       	rjmp	.+444    	; 0x13ae <create_chain+0x254>
    11f2:	53 01       	movw	r10, r6
    11f4:	42 01       	movw	r8, r4
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <create_chain+0xa6>
	FATFS *fs = obj->fs;


	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Suggested cluster to start to find */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    11f8:	81 2c       	mov	r8, r1
    11fa:	91 2c       	mov	r9, r1
    11fc:	54 01       	movw	r10, r8
    11fe:	83 94       	inc	r8
		if (cs < 2) return 1;				/* Test for insanity */
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;							/* Cluster to start to find */
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    1200:	8f 85       	ldd	r24, Y+15	; 0x0f
    1202:	98 89       	ldd	r25, Y+16	; 0x10
    1204:	a9 89       	ldd	r26, Y+17	; 0x11
    1206:	ba 89       	ldd	r27, Y+18	; 0x12
    1208:	89 2b       	or	r24, r25
    120a:	8a 2b       	or	r24, r26
    120c:	8b 2b       	or	r24, r27
    120e:	11 f4       	brne	.+4      	; 0x1214 <create_chain+0xba>
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	c9 c0       	rjmp	.+402    	; 0x13a6 <create_chain+0x24c>
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
		if (scl == clst) {						/* Stretching an existing chain? */
    1214:	84 14       	cp	r8, r4
    1216:	95 04       	cpc	r9, r5
    1218:	a6 04       	cpc	r10, r6
    121a:	b7 04       	cpc	r11, r7
    121c:	09 f0       	breq	.+2      	; 0x1220 <create_chain+0xc6>
    121e:	47 c0       	rjmp	.+142    	; 0x12ae <create_chain+0x154>
			ncl = scl + 1;						/* Test if next cluster is free */
    1220:	75 01       	movw	r14, r10
    1222:	64 01       	movw	r12, r8
    1224:	2f ef       	ldi	r18, 0xFF	; 255
    1226:	c2 1a       	sub	r12, r18
    1228:	d2 0a       	sbc	r13, r18
    122a:	e2 0a       	sbc	r14, r18
    122c:	f2 0a       	sbc	r15, r18
			if (ncl >= fs->n_fatent) ncl = 2;
    122e:	8b 89       	ldd	r24, Y+19	; 0x13
    1230:	9c 89       	ldd	r25, Y+20	; 0x14
    1232:	ad 89       	ldd	r26, Y+21	; 0x15
    1234:	be 89       	ldd	r27, Y+22	; 0x16
    1236:	c8 16       	cp	r12, r24
    1238:	d9 06       	cpc	r13, r25
    123a:	ea 06       	cpc	r14, r26
    123c:	fb 06       	cpc	r15, r27
    123e:	28 f0       	brcs	.+10     	; 0x124a <create_chain+0xf0>
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	c9 2e       	mov	r12, r25
    1244:	d1 2c       	mov	r13, r1
    1246:	e1 2c       	mov	r14, r1
    1248:	f1 2c       	mov	r15, r1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
    124a:	b7 01       	movw	r22, r14
    124c:	a6 01       	movw	r20, r12
    124e:	f8 01       	movw	r30, r16
    1250:	80 81       	ld	r24, Z
    1252:	91 81       	ldd	r25, Z+1	; 0x01
    1254:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    1258:	61 30       	cpi	r22, 0x01	; 1
    125a:	71 05       	cpc	r23, r1
    125c:	81 05       	cpc	r24, r1
    125e:	91 05       	cpc	r25, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <create_chain+0x10a>
    1262:	a0 c0       	rjmp	.+320    	; 0x13a4 <create_chain+0x24a>
    1264:	6f 3f       	cpi	r22, 0xFF	; 255
    1266:	ff ef       	ldi	r31, 0xFF	; 255
    1268:	7f 07       	cpc	r23, r31
    126a:	8f 07       	cpc	r24, r31
    126c:	9f 07       	cpc	r25, r31
    126e:	09 f4       	brne	.+2      	; 0x1272 <create_chain+0x118>
    1270:	b1 cf       	rjmp	.-158    	; 0x11d4 <create_chain+0x7a>
			if (cs != 0) {						/* Not free? */
    1272:	67 2b       	or	r22, r23
    1274:	68 2b       	or	r22, r24
    1276:	69 2b       	or	r22, r25
    1278:	a9 f0       	breq	.+42     	; 0x12a4 <create_chain+0x14a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
    127a:	8b 85       	ldd	r24, Y+11	; 0x0b
    127c:	9c 85       	ldd	r25, Y+12	; 0x0c
    127e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1280:	be 85       	ldd	r27, Y+14	; 0x0e
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	91 05       	cpc	r25, r1
    1286:	a1 05       	cpc	r26, r1
    1288:	b1 05       	cpc	r27, r1
    128a:	88 f0       	brcs	.+34     	; 0x12ae <create_chain+0x154>
    128c:	4b 89       	ldd	r20, Y+19	; 0x13
    128e:	5c 89       	ldd	r21, Y+20	; 0x14
    1290:	6d 89       	ldd	r22, Y+21	; 0x15
    1292:	7e 89       	ldd	r23, Y+22	; 0x16
    1294:	84 17       	cp	r24, r20
    1296:	95 07       	cpc	r25, r21
    1298:	a6 07       	cpc	r26, r22
    129a:	b7 07       	cpc	r27, r23
    129c:	40 f4       	brcc	.+16     	; 0x12ae <create_chain+0x154>
    129e:	4c 01       	movw	r8, r24
    12a0:	5d 01       	movw	r10, r26
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <create_chain+0x154>
				ncl = 0;
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    12a4:	c1 14       	cp	r12, r1
    12a6:	d1 04       	cpc	r13, r1
    12a8:	e1 04       	cpc	r14, r1
    12aa:	f1 04       	cpc	r15, r1
    12ac:	d1 f5       	brne	.+116    	; 0x1322 <create_chain+0x1c8>
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
		if (scl == clst) {						/* Stretching an existing chain? */
			ncl = scl + 1;						/* Test if next cluster is free */
			if (ncl >= fs->n_fatent) ncl = 2;
    12ae:	75 01       	movw	r14, r10
    12b0:	64 01       	movw	r12, r8
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
			ncl = scl;	/* Start cluster */
			for (;;) {
				ncl++;							/* Next cluster */
    12b2:	2f ef       	ldi	r18, 0xFF	; 255
    12b4:	c2 1a       	sub	r12, r18
    12b6:	d2 0a       	sbc	r13, r18
    12b8:	e2 0a       	sbc	r14, r18
    12ba:	f2 0a       	sbc	r15, r18
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    12bc:	8b 89       	ldd	r24, Y+19	; 0x13
    12be:	9c 89       	ldd	r25, Y+20	; 0x14
    12c0:	ad 89       	ldd	r26, Y+21	; 0x15
    12c2:	be 89       	ldd	r27, Y+22	; 0x16
    12c4:	c8 16       	cp	r12, r24
    12c6:	d9 06       	cpc	r13, r25
    12c8:	ea 06       	cpc	r14, r26
    12ca:	fb 06       	cpc	r15, r27
    12cc:	60 f0       	brcs	.+24     	; 0x12e6 <create_chain+0x18c>
					ncl = 2;
					if (ncl > scl) return 0;	/* No free cluster found? */
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	88 16       	cp	r8, r24
    12d2:	91 04       	cpc	r9, r1
    12d4:	a1 04       	cpc	r10, r1
    12d6:	b1 04       	cpc	r11, r1
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <create_chain+0x182>
    12da:	9a cf       	rjmp	.-204    	; 0x1210 <create_chain+0xb6>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
			ncl = scl;	/* Start cluster */
			for (;;) {
				ncl++;							/* Next cluster */
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
					ncl = 2;
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	c8 2e       	mov	r12, r24
    12e0:	d1 2c       	mov	r13, r1
    12e2:	e1 2c       	mov	r14, r1
    12e4:	f1 2c       	mov	r15, r1
					if (ncl > scl) return 0;	/* No free cluster found? */
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
    12e6:	b7 01       	movw	r22, r14
    12e8:	a6 01       	movw	r20, r12
    12ea:	f8 01       	movw	r30, r16
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
				if (cs == 0) break;				/* Found a free cluster? */
    12f4:	61 15       	cp	r22, r1
    12f6:	71 05       	cpc	r23, r1
    12f8:	81 05       	cpc	r24, r1
    12fa:	91 05       	cpc	r25, r1
    12fc:	91 f0       	breq	.+36     	; 0x1322 <create_chain+0x1c8>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    12fe:	61 30       	cpi	r22, 0x01	; 1
    1300:	71 05       	cpc	r23, r1
    1302:	81 05       	cpc	r24, r1
    1304:	91 05       	cpc	r25, r1
    1306:	09 f4       	brne	.+2      	; 0x130a <create_chain+0x1b0>
    1308:	4d c0       	rjmp	.+154    	; 0x13a4 <create_chain+0x24a>
    130a:	6f 3f       	cpi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	09 f4       	brne	.+2      	; 0x1316 <create_chain+0x1bc>
    1314:	5f cf       	rjmp	.-322    	; 0x11d4 <create_chain+0x7a>
				if (ncl == scl) return 0;		/* No free cluster found? */
    1316:	c8 14       	cp	r12, r8
    1318:	d9 04       	cpc	r13, r9
    131a:	ea 04       	cpc	r14, r10
    131c:	fb 04       	cpc	r15, r11
    131e:	49 f6       	brne	.-110    	; 0x12b2 <create_chain+0x158>
    1320:	77 cf       	rjmp	.-274    	; 0x1210 <create_chain+0xb6>
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
    1322:	0f ef       	ldi	r16, 0xFF	; 255
    1324:	1f ef       	ldi	r17, 0xFF	; 255
    1326:	98 01       	movw	r18, r16
    1328:	b7 01       	movw	r22, r14
    132a:	a6 01       	movw	r20, r12
    132c:	ce 01       	movw	r24, r28
    132e:	0e 94 92 07 	call	0xf24	; 0xf24 <put_fat>
		if (res == FR_OK && clst != 0) {
    1332:	81 11       	cpse	r24, r1
    1334:	34 c0       	rjmp	.+104    	; 0x139e <create_chain+0x244>
    1336:	41 14       	cp	r4, r1
    1338:	51 04       	cpc	r5, r1
    133a:	61 04       	cpc	r6, r1
    133c:	71 04       	cpc	r7, r1
    133e:	e9 f4       	brne	.+58     	; 0x137a <create_chain+0x220>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
    1340:	cb 86       	std	Y+11, r12	; 0x0b
    1342:	dc 86       	std	Y+12, r13	; 0x0c
    1344:	ed 86       	std	Y+13, r14	; 0x0d
    1346:	fe 86       	std	Y+14, r15	; 0x0e
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    1348:	8f 85       	ldd	r24, Y+15	; 0x0f
    134a:	98 89       	ldd	r25, Y+16	; 0x10
    134c:	a9 89       	ldd	r26, Y+17	; 0x11
    134e:	ba 89       	ldd	r27, Y+18	; 0x12
    1350:	4b 89       	ldd	r20, Y+19	; 0x13
    1352:	5c 89       	ldd	r21, Y+20	; 0x14
    1354:	6d 89       	ldd	r22, Y+21	; 0x15
    1356:	7e 89       	ldd	r23, Y+22	; 0x16
    1358:	42 50       	subi	r20, 0x02	; 2
    135a:	51 09       	sbc	r21, r1
    135c:	61 09       	sbc	r22, r1
    135e:	71 09       	sbc	r23, r1
    1360:	48 17       	cp	r20, r24
    1362:	59 07       	cpc	r21, r25
    1364:	6a 07       	cpc	r22, r26
    1366:	7b 07       	cpc	r23, r27
    1368:	90 f0       	brcs	.+36     	; 0x138e <create_chain+0x234>
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	a1 09       	sbc	r26, r1
    136e:	b1 09       	sbc	r27, r1
    1370:	8f 87       	std	Y+15, r24	; 0x0f
    1372:	98 8b       	std	Y+16, r25	; 0x10
    1374:	a9 8b       	std	Y+17, r26	; 0x11
    1376:	ba 8b       	std	Y+18, r27	; 0x12
    1378:	0a c0       	rjmp	.+20     	; 0x138e <create_chain+0x234>
				if (ncl == scl) return 0;		/* No free cluster found? */
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
		if (res == FR_OK && clst != 0) {
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
    137a:	97 01       	movw	r18, r14
    137c:	86 01       	movw	r16, r12
    137e:	b3 01       	movw	r22, r6
    1380:	a2 01       	movw	r20, r4
    1382:	ce 01       	movw	r24, r28
    1384:	0e 94 92 07 	call	0xf24	; 0xf24 <put_fat>
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    1388:	88 23       	and	r24, r24
    138a:	d1 f2       	breq	.-76     	; 0x1340 <create_chain+0x1e6>
    138c:	08 c0       	rjmp	.+16     	; 0x139e <create_chain+0x244>
		fs->last_clst = ncl;
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	81 60       	ori	r24, 0x01	; 1
    1392:	8c 83       	std	Y+4, r24	; 0x04
    1394:	4c 2d       	mov	r20, r12
    1396:	3d 2d       	mov	r19, r13
    1398:	2e 2d       	mov	r18, r14
    139a:	9f 2d       	mov	r25, r15
    139c:	0b c0       	rjmp	.+22     	; 0x13b4 <create_chain+0x25a>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <create_chain+0x24a>
    13a2:	18 cf       	rjmp	.-464    	; 0x11d4 <create_chain+0x7a>
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <create_chain+0x25a>
    13ae:	46 2f       	mov	r20, r22
    13b0:	37 2f       	mov	r19, r23
    13b2:	28 2f       	mov	r18, r24
	}

	return ncl;		/* Return new cluster number or error status */
}
    13b4:	64 2f       	mov	r22, r20
    13b6:	73 2f       	mov	r23, r19
    13b8:	82 2f       	mov	r24, r18
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	7f 90       	pop	r7
    13d4:	6f 90       	pop	r6
    13d6:	5f 90       	pop	r5
    13d8:	4f 90       	pop	r4
    13da:	08 95       	ret

000013dc <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    13dc:	4f 92       	push	r4
    13de:	5f 92       	push	r5
    13e0:	6f 92       	push	r6
    13e2:	7f 92       	push	r7
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
    13fa:	08 81       	ld	r16, Y
    13fc:	19 81       	ldd	r17, Y+1	; 0x01


	ofs = dp->dptr + SZDIRE;	/* Next entry */
    13fe:	ce 84       	ldd	r12, Y+14	; 0x0e
    1400:	df 84       	ldd	r13, Y+15	; 0x0f
    1402:	e8 88       	ldd	r14, Y+16	; 0x10
    1404:	f9 88       	ldd	r15, Y+17	; 0x11
    1406:	80 e2       	ldi	r24, 0x20	; 32
    1408:	c8 0e       	add	r12, r24
    140a:	d1 1c       	adc	r13, r1
    140c:	e1 1c       	adc	r14, r1
    140e:	f1 1c       	adc	r15, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    1410:	c1 14       	cp	r12, r1
    1412:	d1 04       	cpc	r13, r1
    1414:	e0 e2       	ldi	r30, 0x20	; 32
    1416:	ee 06       	cpc	r14, r30
    1418:	f1 04       	cpc	r15, r1
    141a:	20 f0       	brcs	.+8      	; 0x1424 <dir_next+0x48>
    141c:	1e 8a       	std	Y+22, r1	; 0x16
    141e:	1f 8a       	std	Y+23, r1	; 0x17
    1420:	18 8e       	std	Y+24, r1	; 0x18
    1422:	19 8e       	std	Y+25, r1	; 0x19
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    1424:	8e 89       	ldd	r24, Y+22	; 0x16
    1426:	9f 89       	ldd	r25, Y+23	; 0x17
    1428:	a8 8d       	ldd	r26, Y+24	; 0x18
    142a:	b9 8d       	ldd	r27, Y+25	; 0x19
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	a1 05       	cpc	r26, r1
    1430:	b1 05       	cpc	r27, r1
    1432:	09 f4       	brne	.+2      	; 0x1436 <dir_next+0x5a>
    1434:	a6 c0       	rjmp	.+332    	; 0x1582 <dir_next+0x1a6>
    1436:	5b 01       	movw	r10, r22

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    1438:	b7 01       	movw	r22, r14
    143a:	a6 01       	movw	r20, r12
    143c:	51 70       	andi	r21, 0x01	; 1
    143e:	66 27       	eor	r22, r22
    1440:	77 27       	eor	r23, r23
    1442:	45 2b       	or	r20, r21
    1444:	46 2b       	or	r20, r22
    1446:	47 2b       	or	r20, r23
    1448:	09 f0       	breq	.+2      	; 0x144c <dir_next+0x70>
    144a:	8d c0       	rjmp	.+282    	; 0x1566 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	a1 1d       	adc	r26, r1
    1450:	b1 1d       	adc	r27, r1
    1452:	8e 8b       	std	Y+22, r24	; 0x16
    1454:	9f 8b       	std	Y+23, r25	; 0x17
    1456:	a8 8f       	std	Y+24, r26	; 0x18
    1458:	b9 8f       	std	Y+25, r27	; 0x19

		if (dp->clust == 0) {	/* Static table */
    145a:	4a 89       	ldd	r20, Y+18	; 0x12
    145c:	5b 89       	ldd	r21, Y+19	; 0x13
    145e:	6c 89       	ldd	r22, Y+20	; 0x14
    1460:	7d 89       	ldd	r23, Y+21	; 0x15
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    1462:	f8 01       	movw	r30, r16
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
		dp->sect++;				/* Next sector */

		if (dp->clust == 0) {	/* Static table */
    1464:	41 15       	cp	r20, r1
    1466:	51 05       	cpc	r21, r1
    1468:	61 05       	cpc	r22, r1
    146a:	71 05       	cpc	r23, r1
    146c:	c1 f4       	brne	.+48     	; 0x149e <dir_next+0xc2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    146e:	87 81       	ldd	r24, Z+7	; 0x07
    1470:	90 85       	ldd	r25, Z+8	; 0x08
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	b7 01       	movw	r22, r14
    1478:	a6 01       	movw	r20, r12
    147a:	35 e0       	ldi	r19, 0x05	; 5
    147c:	76 95       	lsr	r23
    147e:	67 95       	ror	r22
    1480:	57 95       	ror	r21
    1482:	47 95       	ror	r20
    1484:	3a 95       	dec	r19
    1486:	d1 f7       	brne	.-12     	; 0x147c <dir_next+0xa0>
    1488:	48 17       	cp	r20, r24
    148a:	59 07       	cpc	r21, r25
    148c:	6a 07       	cpc	r22, r26
    148e:	7b 07       	cpc	r23, r27
    1490:	08 f4       	brcc	.+2      	; 0x1494 <dir_next+0xb8>
    1492:	69 c0       	rjmp	.+210    	; 0x1566 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
    1494:	1e 8a       	std	Y+22, r1	; 0x16
    1496:	1f 8a       	std	Y+23, r1	; 0x17
    1498:	18 8e       	std	Y+24, r1	; 0x18
    149a:	19 8e       	std	Y+25, r1	; 0x19
    149c:	72 c0       	rjmp	.+228    	; 0x1582 <dir_next+0x1a6>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    149e:	81 85       	ldd	r24, Z+9	; 0x09
    14a0:	92 85       	ldd	r25, Z+10	; 0x0a
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	a0 e0       	ldi	r26, 0x00	; 0
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	26 01       	movw	r4, r12
    14aa:	37 01       	movw	r6, r14
    14ac:	29 e0       	ldi	r18, 0x09	; 9
    14ae:	76 94       	lsr	r7
    14b0:	67 94       	ror	r6
    14b2:	57 94       	ror	r5
    14b4:	47 94       	ror	r4
    14b6:	2a 95       	dec	r18
    14b8:	d1 f7       	brne	.-12     	; 0x14ae <dir_next+0xd2>
    14ba:	84 21       	and	r24, r4
    14bc:	95 21       	and	r25, r5
    14be:	a6 21       	and	r26, r6
    14c0:	b7 21       	and	r27, r7
    14c2:	89 2b       	or	r24, r25
    14c4:	8a 2b       	or	r24, r26
    14c6:	8b 2b       	or	r24, r27
    14c8:	09 f0       	breq	.+2      	; 0x14cc <dir_next+0xf0>
    14ca:	4d c0       	rjmp	.+154    	; 0x1566 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    14cc:	c8 01       	movw	r24, r16
    14ce:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
    14d2:	2b 01       	movw	r4, r22
    14d4:	3c 01       	movw	r6, r24
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    14d6:	62 30       	cpi	r22, 0x02	; 2
    14d8:	71 05       	cpc	r23, r1
    14da:	81 05       	cpc	r24, r1
    14dc:	91 05       	cpc	r25, r1
    14de:	10 f4       	brcc	.+4      	; 0x14e4 <dir_next+0x108>
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	52 c0       	rjmp	.+164    	; 0x1588 <dir_next+0x1ac>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	48 16       	cp	r4, r24
    14e8:	58 06       	cpc	r5, r24
    14ea:	68 06       	cpc	r6, r24
    14ec:	78 06       	cpc	r7, r24
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <dir_next+0x118>
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	4a c0       	rjmp	.+148    	; 0x1588 <dir_next+0x1ac>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    14f4:	f8 01       	movw	r30, r16
    14f6:	83 89       	ldd	r24, Z+19	; 0x13
    14f8:	94 89       	ldd	r25, Z+20	; 0x14
    14fa:	a5 89       	ldd	r26, Z+21	; 0x15
    14fc:	b6 89       	ldd	r27, Z+22	; 0x16
    14fe:	48 16       	cp	r4, r24
    1500:	59 06       	cpc	r5, r25
    1502:	6a 06       	cpc	r6, r26
    1504:	7b 06       	cpc	r7, r27
    1506:	10 f1       	brcs	.+68     	; 0x154c <dir_next+0x170>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
    1508:	ab 28       	or	r10, r11
    150a:	21 f2       	breq	.-120    	; 0x1494 <dir_next+0xb8>
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    150c:	4a 89       	ldd	r20, Y+18	; 0x12
    150e:	5b 89       	ldd	r21, Y+19	; 0x13
    1510:	6c 89       	ldd	r22, Y+20	; 0x14
    1512:	7d 89       	ldd	r23, Y+21	; 0x15
    1514:	ce 01       	movw	r24, r28
    1516:	0e 94 ad 08 	call	0x115a	; 0x115a <create_chain>
    151a:	2b 01       	movw	r4, r22
    151c:	3c 01       	movw	r6, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    151e:	61 15       	cp	r22, r1
    1520:	71 05       	cpc	r23, r1
    1522:	81 05       	cpc	r24, r1
    1524:	91 05       	cpc	r25, r1
    1526:	79 f1       	breq	.+94     	; 0x1586 <dir_next+0x1aa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    1528:	61 30       	cpi	r22, 0x01	; 1
    152a:	71 05       	cpc	r23, r1
    152c:	81 05       	cpc	r24, r1
    152e:	91 05       	cpc	r25, r1
    1530:	b9 f2       	breq	.-82     	; 0x14e0 <dir_next+0x104>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	48 16       	cp	r4, r24
    1536:	58 06       	cpc	r5, r24
    1538:	68 06       	cpc	r6, r24
    153a:	78 06       	cpc	r7, r24
    153c:	c9 f2       	breq	.-78     	; 0x14f0 <dir_next+0x114>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    153e:	b3 01       	movw	r22, r6
    1540:	a2 01       	movw	r20, r4
    1542:	c8 01       	movw	r24, r16
    1544:	0e 94 a2 04 	call	0x944	; 0x944 <dir_clear>
    1548:	81 11       	cpse	r24, r1
    154a:	d2 cf       	rjmp	.-92     	; 0x14f0 <dir_next+0x114>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
    154c:	4a 8a       	std	Y+18, r4	; 0x12
    154e:	5b 8a       	std	Y+19, r5	; 0x13
    1550:	6c 8a       	std	Y+20, r6	; 0x14
    1552:	7d 8a       	std	Y+21, r7	; 0x15
				dp->sect = clst2sect(fs, clst);
    1554:	b3 01       	movw	r22, r6
    1556:	a2 01       	movw	r20, r4
    1558:	c8 01       	movw	r24, r16
    155a:	0e 94 77 01 	call	0x2ee	; 0x2ee <clst2sect>
    155e:	6e 8b       	std	Y+22, r22	; 0x16
    1560:	7f 8b       	std	Y+23, r23	; 0x17
    1562:	88 8f       	std	Y+24, r24	; 0x18
    1564:	99 8f       	std	Y+25, r25	; 0x19
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
    1566:	ce 86       	std	Y+14, r12	; 0x0e
    1568:	df 86       	std	Y+15, r13	; 0x0f
    156a:	e8 8a       	std	Y+16, r14	; 0x10
    156c:	f9 8a       	std	Y+17, r15	; 0x11
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    156e:	01 5d       	subi	r16, 0xD1	; 209
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
    1572:	e1 e0       	ldi	r30, 0x01	; 1
    1574:	de 22       	and	r13, r30
    1576:	c0 0e       	add	r12, r16
    1578:	d1 1e       	adc	r13, r17
    157a:	db 8e       	std	Y+27, r13	; 0x1b
    157c:	ca 8e       	std	Y+26, r12	; 0x1a

	return FR_OK;
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <dir_next+0x1ac>
	FATFS *fs = dp->obj.fs;


	ofs = dp->dptr + SZDIRE;	/* Next entry */
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    1582:	84 e0       	ldi	r24, 0x04	; 4
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <dir_next+0x1ac>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1586:	87 e0       	ldi	r24, 0x07	; 7
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	bf 90       	pop	r11
    159a:	af 90       	pop	r10
    159c:	7f 90       	pop	r7
    159e:	6f 90       	pop	r6
    15a0:	5f 90       	pop	r5
    15a2:	4f 90       	pop	r4
    15a4:	08 95       	ret

000015a6 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
    15a6:	2f 92       	push	r2
    15a8:	3f 92       	push	r3
    15aa:	4f 92       	push	r4
    15ac:	5f 92       	push	r5
    15ae:	6f 92       	push	r6
    15b0:	7f 92       	push	r7
    15b2:	8f 92       	push	r8
    15b4:	9f 92       	push	r9
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
    15ca:	fc 01       	movw	r30, r24
    15cc:	c0 80       	ld	r12, Z
    15ce:	d1 80       	ldd	r13, Z+1	; 0x01
    15d0:	9b 01       	movw	r18, r22
    15d2:	89 01       	movw	r16, r18
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    15d4:	f9 01       	movw	r30, r18
    15d6:	40 81       	ld	r20, Z
    15d8:	2f 5f       	subi	r18, 0xFF	; 255
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	4f 32       	cpi	r20, 0x2F	; 47
    15de:	c9 f3       	breq	.-14     	; 0x15d2 <follow_path+0x2c>
    15e0:	4c 35       	cpi	r20, 0x5C	; 92
    15e2:	b9 f3       	breq	.-18     	; 0x15d2 <follow_path+0x2c>
		dp->obj.sclust = 0;					/* Start from root directory */
    15e4:	fc 01       	movw	r30, r24
    15e6:	16 82       	std	Z+6, r1	; 0x06
    15e8:	17 82       	std	Z+7, r1	; 0x07
    15ea:	10 86       	std	Z+8, r1	; 0x08
    15ec:	11 86       	std	Z+9, r1	; 0x09
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    15ee:	f8 01       	movw	r30, r16
    15f0:	20 81       	ld	r18, Z
    15f2:	20 32       	cpi	r18, 0x20	; 32
    15f4:	90 f0       	brcs	.+36     	; 0x161a <follow_path+0x74>
    15f6:	ec 01       	movw	r28, r24
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
    15f8:	7c 01       	movw	r14, r24
    15fa:	fc e1       	ldi	r31, 0x1C	; 28
    15fc:	ef 0e       	add	r14, r31
    15fe:	f1 1c       	adc	r15, r1
    1600:	3c 01       	movw	r6, r24
    1602:	87 e2       	ldi	r24, 0x27	; 39
    1604:	68 0e       	add	r6, r24
    1606:	71 1c       	adc	r7, r1
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1608:	80 e2       	ldi	r24, 0x20	; 32
    160a:	38 2e       	mov	r3, r24
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    160c:	95 e0       	ldi	r25, 0x05	; 5
    160e:	29 2e       	mov	r2, r25
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    1610:	46 01       	movw	r8, r12
    1612:	ef e2       	ldi	r30, 0x2F	; 47
    1614:	8e 0e       	add	r8, r30
    1616:	91 1c       	adc	r9, r1
    1618:	52 c0       	rjmp	.+164    	; 0x16be <follow_path+0x118>
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		dp->fn[NSFLAG] = NS_NONAME;
    161a:	20 e8       	ldi	r18, 0x80	; 128
    161c:	fc 01       	movw	r30, r24
    161e:	27 a3       	std	Z+39, r18	; 0x27
			}
		}
	}

	return res;
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	7f 90       	pop	r7
    163a:	6f 90       	pop	r6
    163c:	5f 90       	pop	r5
    163e:	4f 90       	pop	r4
    1640:	3f 90       	pop	r3
    1642:	2f 90       	pop	r2
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		dp->fn[NSFLAG] = NS_NONAME;
		res = dir_sdi(dp, 0);
    1644:	0c 94 23 04 	jmp	0x846	; 0x846 <dir_sdi.constprop.15>
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1648:	31 92       	st	Z+, r3
	} while (--cnt);
    164a:	e6 15       	cp	r30, r6
    164c:	f7 05       	cpc	r31, r7
    164e:	e1 f7       	brne	.-8      	; 0x1648 <follow_path+0xa2>
    1650:	f8 01       	movw	r30, r16
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	68 e0       	ldi	r22, 0x08	; 8
    165c:	70 e0       	ldi	r23, 0x00	; 0
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
    165e:	2f 5f       	subi	r18, 0xFF	; 255
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	51 91       	ld	r21, Z+
		if (c <= ' ') break; 			/* Break if end of the path name */
    1664:	51 32       	cpi	r21, 0x21	; 33
    1666:	68 f5       	brcc	.+90     	; 0x16c2 <follow_path+0x11c>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
    1668:	02 0f       	add	r16, r18
    166a:	13 1f       	adc	r17, r19
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    166c:	89 2b       	or	r24, r25
    166e:	09 f4       	brne	.+2      	; 0x1672 <follow_path+0xcc>
    1670:	8d c0       	rjmp	.+282    	; 0x178c <follow_path+0x1e6>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    1672:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1674:	85 3e       	cpi	r24, 0xE5	; 229
    1676:	09 f4       	brne	.+2      	; 0x167a <follow_path+0xd4>
    1678:	2c 8e       	std	Y+28, r2	; 0x1c
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    167a:	51 32       	cpi	r21, 0x21	; 33
    167c:	08 f4       	brcc	.+2      	; 0x1680 <follow_path+0xda>
    167e:	50 c0       	rjmp	.+160    	; 0x1720 <follow_path+0x17a>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	8f a3       	std	Y+39, r24	; 0x27
static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    1684:	a8 80       	ld	r10, Y
    1686:	b9 80       	ldd	r11, Y+1	; 0x01
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1688:	ce 01       	movw	r24, r28
    168a:	0e 94 23 04 	call	0x846	; 0x846 <dir_sdi.constprop.15>
	if (res != FR_OK) return res;
    168e:	88 23       	and	r24, r24
    1690:	09 f4       	brne	.+2      	; 0x1694 <follow_path+0xee>
    1692:	48 c0       	rjmp	.+144    	; 0x1724 <follow_path+0x17e>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    1694:	9f a1       	ldd	r25, Y+39	; 0x27
			if (res != FR_OK) {				/* Failed to find the object */
    1696:	81 11       	cpse	r24, r1
    1698:	73 c0       	rjmp	.+230    	; 0x1780 <follow_path+0x1da>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    169a:	92 fd       	sbrc	r25, 2
    169c:	8c c0       	rjmp	.+280    	; 0x17b6 <follow_path+0x210>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	84 ff       	sbrs	r24, 4
    16a2:	72 c0       	rjmp	.+228    	; 0x1788 <follow_path+0x1e2>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    16a4:	6e 85       	ldd	r22, Y+14	; 0x0e
    16a6:	7f 85       	ldd	r23, Y+15	; 0x0f
    16a8:	71 70       	andi	r23, 0x01	; 1
    16aa:	68 0d       	add	r22, r8
    16ac:	79 1d       	adc	r23, r9
    16ae:	f6 01       	movw	r30, r12
    16b0:	80 81       	ld	r24, Z
    16b2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ld_clust.isra.3>
    16b6:	6e 83       	std	Y+6, r22	; 0x06
    16b8:	7f 83       	std	Y+7, r23	; 0x07
    16ba:	88 87       	std	Y+8, r24	; 0x08
    16bc:	99 87       	std	Y+9, r25	; 0x09
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
    16be:	f7 01       	movw	r30, r14
    16c0:	c3 cf       	rjmp	.-122    	; 0x1648 <follow_path+0xa2>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    16c2:	5f 32       	cpi	r21, 0x2F	; 47
    16c4:	21 f4       	brne	.+8      	; 0x16ce <follow_path+0x128>
    16c6:	f8 01       	movw	r30, r16
    16c8:	e2 0f       	add	r30, r18
    16ca:	f3 1f       	adc	r31, r19
    16cc:	05 c0       	rjmp	.+10     	; 0x16d8 <follow_path+0x132>
    16ce:	5c 35       	cpi	r21, 0x5C	; 92
    16d0:	51 f4       	brne	.+20     	; 0x16e6 <follow_path+0x140>
    16d2:	f9 cf       	rjmp	.-14     	; 0x16c6 <follow_path+0x120>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    16d4:	4c 35       	cpi	r20, 0x5C	; 92
    16d6:	41 f6       	brne	.-112    	; 0x1668 <follow_path+0xc2>
    16d8:	9f 01       	movw	r18, r30
    16da:	20 1b       	sub	r18, r16
    16dc:	31 0b       	sbc	r19, r17
    16de:	41 91       	ld	r20, Z+
    16e0:	4f 32       	cpi	r20, 0x2F	; 47
    16e2:	c1 f7       	brne	.-16     	; 0x16d4 <follow_path+0x12e>
    16e4:	f9 cf       	rjmp	.-14     	; 0x16d8 <follow_path+0x132>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    16e6:	5e 32       	cpi	r21, 0x2E	; 46
    16e8:	09 f4       	brne	.+2      	; 0x16ec <follow_path+0x146>
    16ea:	5d c0       	rjmp	.+186    	; 0x17a6 <follow_path+0x200>
    16ec:	86 17       	cp	r24, r22
    16ee:	97 07       	cpc	r25, r23
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <follow_path+0x14e>
    16f2:	4c c0       	rjmp	.+152    	; 0x178c <follow_path+0x1e6>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
    16f4:	57 ff       	sbrs	r21, 7
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <follow_path+0x15e>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    16f8:	a5 2f       	mov	r26, r21
    16fa:	af 77       	andi	r26, 0x7F	; 127
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	a1 59       	subi	r26, 0x91	; 145
    1700:	bf 4f       	sbci	r27, 0xFF	; 255
    1702:	5c 91       	ld	r21, X
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1704:	a5 2e       	mov	r10, r21
    1706:	b1 2c       	mov	r11, r1
    1708:	a0 e7       	ldi	r26, 0x70	; 112
    170a:	b1 e0       	ldi	r27, 0x01	; 1


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    170c:	4d 91       	ld	r20, X+
    170e:	44 23       	and	r20, r20
    1710:	09 f4       	brne	.+2      	; 0x1714 <follow_path+0x16e>
    1712:	3e c0       	rjmp	.+124    	; 0x1790 <follow_path+0x1ea>
    1714:	44 2e       	mov	r4, r20
    1716:	51 2c       	mov	r5, r1
    1718:	a4 14       	cp	r10, r4
    171a:	b5 04       	cpc	r11, r5
    171c:	b9 f7       	brne	.-18     	; 0x170c <follow_path+0x166>
    171e:	36 c0       	rjmp	.+108    	; 0x178c <follow_path+0x1e6>
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	af cf       	rjmp	.-162    	; 0x1682 <follow_path+0xdc>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    1724:	4e 89       	ldd	r20, Y+22	; 0x16
    1726:	5f 89       	ldd	r21, Y+23	; 0x17
    1728:	68 8d       	ldd	r22, Y+24	; 0x18
    172a:	79 8d       	ldd	r23, Y+25	; 0x19
    172c:	c5 01       	movw	r24, r10
    172e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
		if (res != FR_OK) break;
    1732:	81 11       	cpse	r24, r1
    1734:	af cf       	rjmp	.-162    	; 0x1694 <follow_path+0xee>
		c = dp->dir[DIR_Name];
    1736:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1738:	fb 8d       	ldd	r31, Y+27	; 0x1b
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    173a:	90 81       	ld	r25, Z
    173c:	99 23       	and	r25, r25
    173e:	f1 f0       	breq	.+60     	; 0x177c <follow_path+0x1d6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    1740:	93 85       	ldd	r25, Z+11	; 0x0b
    1742:	9f 73       	andi	r25, 0x3F	; 63
    1744:	9c 83       	std	Y+4, r25	; 0x04
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    1746:	93 85       	ldd	r25, Z+11	; 0x0b
    1748:	93 fd       	sbrc	r25, 3
    174a:	12 c0       	rjmp	.+36     	; 0x1770 <follow_path+0x1ca>
    174c:	af 01       	movw	r20, r30
    174e:	45 5f       	subi	r20, 0xF5	; 245
    1750:	5f 4f       	sbci	r21, 0xFF	; 255
    1752:	d7 01       	movw	r26, r14
{
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    1754:	21 91       	ld	r18, Z+
    1756:	9d 91       	ld	r25, X+
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	29 1b       	sub	r18, r25
    175c:	31 09       	sbc	r19, r1
	} while (--cnt && r == 0);
    175e:	4e 17       	cp	r20, r30
    1760:	5f 07       	cpc	r21, r31
    1762:	19 f0       	breq	.+6      	; 0x176a <follow_path+0x1c4>
    1764:	23 2b       	or	r18, r19
    1766:	b1 f3       	breq	.-20     	; 0x1754 <follow_path+0x1ae>
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <follow_path+0x1ca>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    176a:	23 2b       	or	r18, r19
    176c:	09 f4       	brne	.+2      	; 0x1770 <follow_path+0x1ca>
    176e:	92 cf       	rjmp	.-220    	; 0x1694 <follow_path+0xee>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	ce 01       	movw	r24, r28
    1776:	0e 94 ee 09 	call	0x13dc	; 0x13dc <dir_next>
    177a:	89 cf       	rjmp	.-238    	; 0x168e <follow_path+0xe8>
#endif
	do {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    177c:	84 e0       	ldi	r24, 0x04	; 4
    177e:	8a cf       	rjmp	.-236    	; 0x1694 <follow_path+0xee>
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	c9 f4       	brne	.+50     	; 0x17b6 <follow_path+0x210>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1784:	92 fd       	sbrc	r25, 2
    1786:	17 c0       	rjmp	.+46     	; 0x17b6 <follow_path+0x210>
    1788:	85 e0       	ldi	r24, 0x05	; 5
    178a:	15 c0       	rjmp	.+42     	; 0x17b6 <follow_path+0x210>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    178c:	86 e0       	ldi	r24, 0x06	; 6
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
			}
		}
	}

	return res;
    178e:	13 c0       	rjmp	.+38     	; 0x17b6 <follow_path+0x210>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    1790:	4f e9       	ldi	r20, 0x9F	; 159
    1792:	45 0f       	add	r20, r21
    1794:	4a 31       	cpi	r20, 0x1A	; 26
    1796:	08 f4       	brcc	.+2      	; 0x179a <follow_path+0x1f4>
    1798:	50 52       	subi	r21, 0x20	; 32
			sfn[i++] = c;
    179a:	d7 01       	movw	r26, r14
    179c:	a8 0f       	add	r26, r24
    179e:	b9 1f       	adc	r27, r25
    17a0:	5c 93       	st	X, r21
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	5c cf       	rjmp	.-328    	; 0x165e <follow_path+0xb8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    17a6:	6b 30       	cpi	r22, 0x0B	; 11
    17a8:	71 05       	cpc	r23, r1
    17aa:	81 f3       	breq	.-32     	; 0x178c <follow_path+0x1e6>
			i = 8; ni = 11;				/* Enter file extension field */
    17ac:	88 e0       	ldi	r24, 0x08	; 8
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	6b e0       	ldi	r22, 0x0B	; 11
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	54 cf       	rjmp	.-344    	; 0x165e <follow_path+0xb8>
			}
		}
	}

	return res;
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	9f 90       	pop	r9
    17cc:	8f 90       	pop	r8
    17ce:	7f 90       	pop	r7
    17d0:	6f 90       	pop	r6
    17d2:	5f 90       	pop	r5
    17d4:	4f 90       	pop	r4
    17d6:	3f 90       	pop	r3
    17d8:	2f 90       	pop	r2
    17da:	08 95       	ret

000017dc <dir_read.constprop.13>:
/*-----------------------------------------------------------------------*/

#define DIR_READ_FILE(dp) dir_read(dp, 0)
#define DIR_READ_LABEL(dp) dir_read(dp, 1)

static FRESULT dir_read (
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
	FATFS *fs = dp->obj.fs;
    17e6:	08 81       	ld	r16, Y
    17e8:	19 81       	ldd	r17, Y+1	; 0x01
static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
    17ea:	84 e0       	ldi	r24, 0x04	; 4
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
    17ec:	4e 89       	ldd	r20, Y+22	; 0x16
    17ee:	5f 89       	ldd	r21, Y+23	; 0x17
    17f0:	68 8d       	ldd	r22, Y+24	; 0x18
    17f2:	79 8d       	ldd	r23, Y+25	; 0x19
    17f4:	41 15       	cp	r20, r1
    17f6:	51 05       	cpc	r21, r1
    17f8:	61 05       	cpc	r22, r1
    17fa:	71 05       	cpc	r23, r1
    17fc:	01 f1       	breq	.+64     	; 0x183e <dir_read.constprop.13+0x62>
		res = move_window(fs, dp->sect);
    17fe:	c8 01       	movw	r24, r16
    1800:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
		if (res != FR_OK) break;
    1804:	81 11       	cpse	r24, r1
    1806:	1d c0       	rjmp	.+58     	; 0x1842 <dir_read.constprop.13+0x66>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
    1808:	ea 8d       	ldd	r30, Y+26	; 0x1a
    180a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    180c:	90 81       	ld	r25, Z
		if (b == 0) {
    180e:	99 23       	and	r25, r25
    1810:	e9 f0       	breq	.+58     	; 0x184c <dir_read.constprop.13+0x70>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    1812:	83 85       	ldd	r24, Z+11	; 0x0b
    1814:	8f 73       	andi	r24, 0x3F	; 63
    1816:	8c 83       	std	Y+4, r24	; 0x04
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
    1818:	95 3e       	cpi	r25, 0xE5	; 229
    181a:	49 f0       	breq	.+18     	; 0x182e <dir_read.constprop.13+0x52>
    181c:	9e 32       	cpi	r25, 0x2E	; 46
    181e:	39 f0       	breq	.+14     	; 0x182e <dir_read.constprop.13+0x52>
    1820:	8f 30       	cpi	r24, 0x0F	; 15
    1822:	29 f0       	breq	.+10     	; 0x182e <dir_read.constprop.13+0x52>
    1824:	8f 71       	andi	r24, 0x1F	; 31
    1826:	88 30       	cpi	r24, 0x08	; 8
    1828:	11 f0       	breq	.+4      	; 0x182e <dir_read.constprop.13+0x52>
static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	11 c0       	rjmp	.+34     	; 0x1850 <dir_read.constprop.13+0x74>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	ce 01       	movw	r24, r28
    1834:	0e 94 ee 09 	call	0x13dc	; 0x13dc <dir_next>
		if (res != FR_OK) break;
    1838:	88 23       	and	r24, r24
    183a:	c1 f2       	breq	.-80     	; 0x17ec <dir_read.constprop.13+0x10>
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <dir_read.constprop.13+0x66>
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    183e:	88 23       	and	r24, r24
    1840:	a1 f3       	breq	.-24     	; 0x182a <dir_read.constprop.13+0x4e>
    1842:	1e 8a       	std	Y+22, r1	; 0x16
    1844:	1f 8a       	std	Y+23, r1	; 0x17
    1846:	18 8e       	std	Y+24, r1	; 0x18
    1848:	19 8e       	std	Y+25, r1	; 0x19
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <dir_read.constprop.13+0x74>
	while (dp->sect) {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		b = dp->dir[DIR_Name];	/* Test for the entry type */
		if (b == 0) {
			res = FR_NO_FILE; break; /* Reached to end of the directory */
    184c:	84 e0       	ldi	r24, 0x04	; 4
    184e:	f9 cf       	rjmp	.-14     	; 0x1842 <dir_read.constprop.13+0x66>
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
	return res;
}
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	08 95       	ret

0000185a <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    1866:	dc 01       	movw	r26, r24
    1868:	ed 90       	ld	r14, X+
    186a:	fc 90       	ld	r15, X
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;


	res = dir_sdi(dp, 0);
    186c:	0e 94 23 04 	call	0x846	; 0x846 <dir_sdi.constprop.15>
    1870:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    1872:	81 11       	cpse	r24, r1
    1874:	41 c0       	rjmp	.+130    	; 0x18f8 <dir_register+0x9e>
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    1876:	f8 01       	movw	r30, r16
    1878:	46 89       	ldd	r20, Z+22	; 0x16
    187a:	57 89       	ldd	r21, Z+23	; 0x17
    187c:	60 8d       	ldd	r22, Z+24	; 0x18
    187e:	71 8d       	ldd	r23, Z+25	; 0x19
    1880:	c7 01       	movw	r24, r14
    1882:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    1886:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    1888:	81 11       	cpse	r24, r1
    188a:	36 c0       	rjmp	.+108    	; 0x18f8 <dir_register+0x9e>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    188c:	d8 01       	movw	r26, r16
    188e:	5a 96       	adiw	r26, 0x1a	; 26
    1890:	ed 91       	ld	r30, X+
    1892:	fc 91       	ld	r31, X
    1894:	5b 97       	sbiw	r26, 0x1b	; 27
    1896:	80 81       	ld	r24, Z
    1898:	85 3e       	cpi	r24, 0xE5	; 229
    189a:	99 f4       	brne	.+38     	; 0x18c2 <dir_register+0x68>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
    189c:	f8 01       	movw	r30, r16
    189e:	46 89       	ldd	r20, Z+22	; 0x16
    18a0:	57 89       	ldd	r21, Z+23	; 0x17
    18a2:	60 8d       	ldd	r22, Z+24	; 0x18
    18a4:	71 8d       	ldd	r23, Z+25	; 0x19
    18a6:	c7 01       	movw	r24, r14
    18a8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    18ac:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    18ae:	81 11       	cpse	r24, r1
    18b0:	26 c0       	rjmp	.+76     	; 0x18fe <dir_register+0xa4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    18b2:	d8 01       	movw	r26, r16
    18b4:	5a 96       	adiw	r26, 0x1a	; 26
    18b6:	ed 91       	ld	r30, X+
    18b8:	fc 91       	ld	r31, X
    18ba:	5b 97       	sbiw	r26, 0x1b	; 27
    18bc:	cf 01       	movw	r24, r30
    18be:	80 96       	adiw	r24, 0x20	; 32
    18c0:	08 c0       	rjmp	.+16     	; 0x18d2 <dir_register+0x78>
			res = move_window(fs, dp->sect);
			if (res != FR_OK) break;
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    18c2:	88 23       	and	r24, r24
    18c4:	59 f3       	breq	.-42     	; 0x189c <dir_register+0x42>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
			} else {
				n = 0;				/* Not a free entry, restart to search */
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	c8 01       	movw	r24, r16
    18cc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <dir_next>
    18d0:	cf cf       	rjmp	.-98     	; 0x1870 <dir_register+0x16>
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    18d2:	11 92       	st	Z+, r1
	} while (--cnt);
    18d4:	8e 17       	cp	r24, r30
    18d6:	9f 07       	cpc	r25, r31
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <dir_register+0x78>
	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    18da:	b8 01       	movw	r22, r16
    18dc:	64 5e       	subi	r22, 0xE4	; 228
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	4b e0       	ldi	r20, 0x0B	; 11
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	f8 01       	movw	r30, r16
    18e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    18e8:	93 8d       	ldd	r25, Z+27	; 0x1b
    18ea:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <mem_cpy.part.0>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	d7 01       	movw	r26, r14
    18f2:	13 96       	adiw	r26, 0x03	; 3
    18f4:	8c 93       	st	X, r24
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <dir_register+0xa4>
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    18f8:	c4 30       	cpi	r28, 0x04	; 4
    18fa:	09 f4       	brne	.+2      	; 0x18fe <dir_register+0xa4>
    18fc:	c7 e0       	ldi	r28, 0x07	; 7
			fs->wflag = 1;
		}
	}

	return res;
}
    18fe:	8c 2f       	mov	r24, r28
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	ff 90       	pop	r15
    1908:	ef 90       	pop	r14
    190a:	08 95       	ret

0000190c <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
    190c:	4f 92       	push	r4
    190e:	5f 92       	push	r5
    1910:	6f 92       	push	r6
    1912:	7f 92       	push	r7
    1914:	8f 92       	push	r8
    1916:	9f 92       	push	r9
    1918:	af 92       	push	r10
    191a:	bf 92       	push	r11
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	7c 01       	movw	r14, r24
    192a:	4a 01       	movw	r8, r20
    192c:	5b 01       	movw	r10, r22
    192e:	b9 01       	movw	r22, r18
    1930:	a8 01       	movw	r20, r16
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    1932:	22 e0       	ldi	r18, 0x02	; 2
    1934:	82 16       	cp	r8, r18
    1936:	91 04       	cpc	r9, r1
    1938:	a1 04       	cpc	r10, r1
    193a:	b1 04       	cpc	r11, r1
    193c:	10 f4       	brcc	.+4      	; 0x1942 <remove_chain+0x36>
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	65 c0       	rjmp	.+202    	; 0x1a0c <remove_chain+0x100>
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
    1942:	fc 01       	movw	r30, r24
    1944:	c0 81       	ld	r28, Z
    1946:	d1 81       	ldd	r29, Z+1	; 0x01
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    1948:	8b 89       	ldd	r24, Y+19	; 0x13
    194a:	9c 89       	ldd	r25, Y+20	; 0x14
    194c:	ad 89       	ldd	r26, Y+21	; 0x15
    194e:	be 89       	ldd	r27, Y+22	; 0x16
    1950:	88 16       	cp	r8, r24
    1952:	99 06       	cpc	r9, r25
    1954:	aa 06       	cpc	r10, r26
    1956:	bb 06       	cpc	r11, r27
    1958:	90 f7       	brcc	.-28     	; 0x193e <remove_chain+0x32>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    195a:	41 15       	cp	r20, r1
    195c:	51 05       	cpc	r21, r1
    195e:	61 05       	cpc	r22, r1
    1960:	71 05       	cpc	r23, r1
    1962:	41 f0       	breq	.+16     	; 0x1974 <remove_chain+0x68>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    1964:	0f ef       	ldi	r16, 0xFF	; 255
    1966:	1f ef       	ldi	r17, 0xFF	; 255
    1968:	98 01       	movw	r18, r16
    196a:	ce 01       	movw	r24, r28
    196c:	0e 94 92 07 	call	0xf24	; 0xf24 <put_fat>
		if (res != FR_OK) return res;
    1970:	81 11       	cpse	r24, r1
    1972:	4c c0       	rjmp	.+152    	; 0x1a0c <remove_chain+0x100>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    1974:	b5 01       	movw	r22, r10
    1976:	a4 01       	movw	r20, r8
    1978:	f7 01       	movw	r30, r14
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
    1982:	2b 01       	movw	r4, r22
    1984:	3c 01       	movw	r6, r24
		if (nxt == 0) break;				/* Empty cluster? */
    1986:	61 15       	cp	r22, r1
    1988:	71 05       	cpc	r23, r1
    198a:	81 05       	cpc	r24, r1
    198c:	91 05       	cpc	r25, r1
    198e:	11 f4       	brne	.+4      	; 0x1994 <remove_chain+0x88>
				}
			}
		}
	}
#endif
	return FR_OK;
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	3c c0       	rjmp	.+120    	; 0x1a0c <remove_chain+0x100>

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    1994:	61 30       	cpi	r22, 0x01	; 1
    1996:	71 05       	cpc	r23, r1
    1998:	81 05       	cpc	r24, r1
    199a:	91 05       	cpc	r25, r1
    199c:	81 f2       	breq	.-96     	; 0x193e <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    199e:	6f 3f       	cpi	r22, 0xFF	; 255
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	8f 4f       	sbci	r24, 0xFF	; 255
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	89 f1       	breq	.+98     	; 0x1a0a <remove_chain+0xfe>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    19a8:	00 e0       	ldi	r16, 0x00	; 0
    19aa:	10 e0       	ldi	r17, 0x00	; 0
    19ac:	98 01       	movw	r18, r16
    19ae:	b5 01       	movw	r22, r10
    19b0:	a4 01       	movw	r20, r8
    19b2:	ce 01       	movw	r24, r28
    19b4:	0e 94 92 07 	call	0xf24	; 0xf24 <put_fat>
			if (res != FR_OK) return res;
    19b8:	81 11       	cpse	r24, r1
    19ba:	28 c0       	rjmp	.+80     	; 0x1a0c <remove_chain+0x100>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    19bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19be:	98 89       	ldd	r25, Y+16	; 0x10
    19c0:	a9 89       	ldd	r26, Y+17	; 0x11
    19c2:	ba 89       	ldd	r27, Y+18	; 0x12
    19c4:	4b 89       	ldd	r20, Y+19	; 0x13
    19c6:	5c 89       	ldd	r21, Y+20	; 0x14
    19c8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ca:	7e 89       	ldd	r23, Y+22	; 0x16
    19cc:	4a 01       	movw	r8, r20
    19ce:	5b 01       	movw	r10, r22
    19d0:	e2 e0       	ldi	r30, 0x02	; 2
    19d2:	8e 1a       	sub	r8, r30
    19d4:	91 08       	sbc	r9, r1
    19d6:	a1 08       	sbc	r10, r1
    19d8:	b1 08       	sbc	r11, r1
    19da:	88 15       	cp	r24, r8
    19dc:	99 05       	cpc	r25, r9
    19de:	aa 05       	cpc	r26, r10
    19e0:	bb 05       	cpc	r27, r11
    19e2:	50 f4       	brcc	.+20     	; 0x19f8 <remove_chain+0xec>
			fs->free_clst++;
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	a1 1d       	adc	r26, r1
    19e8:	b1 1d       	adc	r27, r1
    19ea:	8f 87       	std	Y+15, r24	; 0x0f
    19ec:	98 8b       	std	Y+16, r25	; 0x10
    19ee:	a9 8b       	std	Y+17, r26	; 0x11
    19f0:	ba 8b       	std	Y+18, r27	; 0x12
			fs->fsi_flag |= 1;
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	81 60       	ori	r24, 0x01	; 1
    19f6:	8c 83       	std	Y+4, r24	; 0x04
    19f8:	53 01       	movw	r10, r6
    19fa:	42 01       	movw	r8, r4
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    19fc:	44 16       	cp	r4, r20
    19fe:	55 06       	cpc	r5, r21
    1a00:	66 06       	cpc	r6, r22
    1a02:	77 06       	cpc	r7, r23
    1a04:	08 f4       	brcc	.+2      	; 0x1a08 <remove_chain+0xfc>
    1a06:	b6 cf       	rjmp	.-148    	; 0x1974 <remove_chain+0x68>
    1a08:	c3 cf       	rjmp	.-122    	; 0x1990 <remove_chain+0x84>
	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
#endif
	return FR_OK;
}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	bf 90       	pop	r11
    1a1a:	af 90       	pop	r10
    1a1c:	9f 90       	pop	r9
    1a1e:	8f 90       	pop	r8
    1a20:	7f 90       	pop	r7
    1a22:	6f 90       	pop	r6
    1a24:	5f 90       	pop	r5
    1a26:	4f 90       	pop	r4
    1a28:	08 95       	ret

00001a2a <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	ec 01       	movw	r28, r24
	FRESULT res;


	res = sync_window(fs);
    1a34:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sync_window>
    1a38:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    1a3a:	81 11       	cpse	r24, r1
    1a3c:	61 c0       	rjmp	.+194    	; 0x1b00 <sync_fs+0xd6>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    1a3e:	88 81       	ld	r24, Y
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <sync_fs+0x1c>
    1a44:	53 c0       	rjmp	.+166    	; 0x1aec <sync_fs+0xc2>
    1a46:	8c 81       	ldd	r24, Y+4	; 0x04
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <sync_fs+0x24>
    1a4c:	4f c0       	rjmp	.+158    	; 0x1aec <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
    1a4e:	be 01       	movw	r22, r28
    1a50:	61 5d       	subi	r22, 0xD1	; 209
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	fb 01       	movw	r30, r22
    1a56:	ce 01       	movw	r24, r28
    1a58:	81 5d       	subi	r24, 0xD1	; 209
    1a5a:	9d 4f       	sbci	r25, 0xFD	; 253
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1a5c:	11 92       	st	Z+, r1
	} while (--cnt);
    1a5e:	e8 17       	cp	r30, r24
    1a60:	f9 07       	cpc	r31, r25
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <sync_fs+0x32>
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1a64:	85 e5       	ldi	r24, 0x55	; 85
    1a66:	fe 01       	movw	r30, r28
    1a68:	e3 5d       	subi	r30, 0xD3	; 211
    1a6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a6c:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    1a6e:	8a ea       	ldi	r24, 0xAA	; 170
    1a70:	31 96       	adiw	r30, 0x01	; 1
    1a72:	80 83       	st	Z, r24
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1a74:	82 e5       	ldi	r24, 0x52	; 82
    1a76:	8f a7       	std	Y+47, r24	; 0x2f
	*ptr++ = (BYTE)val; val >>= 8;
    1a78:	88 ab       	std	Y+48, r24	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
    1a7a:	81 e6       	ldi	r24, 0x61	; 97
    1a7c:	89 ab       	std	Y+49, r24	; 0x31
	*ptr++ = (BYTE)val;
    1a7e:	91 e4       	ldi	r25, 0x41	; 65
    1a80:	9a ab       	std	Y+50, r25	; 0x32
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1a82:	22 e7       	ldi	r18, 0x72	; 114
    1a84:	7b 97       	sbiw	r30, 0x1b	; 27
    1a86:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1a88:	31 96       	adiw	r30, 0x01	; 1
    1a8a:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1a8c:	31 96       	adiw	r30, 0x01	; 1
    1a8e:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    1a90:	31 96       	adiw	r30, 0x01	; 1
    1a92:	80 83       	st	Z, r24
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
    1a94:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a96:	28 89       	ldd	r18, Y+16	; 0x10
    1a98:	99 89       	ldd	r25, Y+17	; 0x11
    1a9a:	8a 89       	ldd	r24, Y+18	; 0x12
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1a9c:	31 96       	adiw	r30, 0x01	; 1
    1a9e:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    1aa0:	31 96       	adiw	r30, 0x01	; 1
    1aa2:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1aa4:	31 96       	adiw	r30, 0x01	; 1
    1aa6:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    1aa8:	31 96       	adiw	r30, 0x01	; 1
    1aaa:	80 83       	st	Z, r24
			mem_set(fs->win, 0, sizeof fs->win);
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
    1aac:	3b 85       	ldd	r19, Y+11	; 0x0b
    1aae:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ab0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ab2:	8e 85       	ldd	r24, Y+14	; 0x0e
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1ab4:	31 96       	adiw	r30, 0x01	; 1
    1ab6:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1abc:	31 96       	adiw	r30, 0x01	; 1
    1abe:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    1ac0:	31 96       	adiw	r30, 0x01	; 1
    1ac2:	80 83       	st	Z, r24
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
    1ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1aca:	be 8d       	ldd	r27, Y+30	; 0x1e
    1acc:	9c 01       	movw	r18, r24
    1ace:	ad 01       	movw	r20, r26
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad8:	2b a7       	std	Y+43, r18	; 0x2b
    1ada:	3c a7       	std	Y+44, r19	; 0x2c
    1adc:	4d a7       	std	Y+45, r20	; 0x2d
    1ade:	5e a7       	std	Y+46, r21	; 0x2e
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    1ae0:	01 e0       	ldi	r16, 0x01	; 1
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	0e 94 99 1b 	call	0x3732	; 0x3732 <disk_write>
			fs->fsi_flag = 0;
    1aea:	1c 82       	std	Y+4, r1	; 0x04
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	0e 94 0a 1c 	call	0x3814	; 0x3814 <disk_ioctl>
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	81 11       	cpse	r24, r1
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <sync_fs+0xd6>
    1afe:	90 e0       	ldi	r25, 0x00	; 0
	}

	return res;
}
    1b00:	89 2f       	mov	r24, r25
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	08 95       	ret

00001b0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <f_mount+0x8>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <f_mount+0xa>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <f_mount+0xc>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	9c 83       	std	Y+4, r25	; 0x04
    1b1e:	8b 83       	std	Y+3, r24	; 0x03
    1b20:	7e 83       	std	Y+6, r23	; 0x06
    1b22:	6d 83       	std	Y+5, r22	; 0x05
    1b24:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1b26:	7a 83       	std	Y+2, r23	; 0x02
    1b28:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	0e 94 9f 01 	call	0x33e	; 0x33e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    1b32:	97 fd       	sbrc	r25, 7
    1b34:	20 c0       	rjmp	.+64     	; 0x1b76 <f_mount+0x6a>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	ee 57       	subi	r30, 0x7E	; 126
    1b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b40:	01 90       	ld	r0, Z+
    1b42:	f0 81       	ld	r31, Z
    1b44:	e0 2d       	mov	r30, r0

	if (cfs) {
    1b46:	30 97       	sbiw	r30, 0x00	; 0
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <f_mount+0x40>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1b4a:	10 82       	st	Z, r1
	}

	if (fs) {
    1b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b50:	30 97       	sbiw	r30, 0x00	; 0
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
    1b54:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1b56:	dc 01       	movw	r26, r24
    1b58:	ae 57       	subi	r26, 0x7E	; 126
    1b5a:	be 4f       	sbci	r27, 0xFE	; 254
    1b5c:	ed 93       	st	X+, r30
    1b5e:	fc 93       	st	X, r31

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1b60:	11 23       	and	r17, r17
    1b62:	59 f0       	breq	.+22     	; 0x1b7a <f_mount+0x6e>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	be 01       	movw	r22, r28
    1b68:	6d 5f       	subi	r22, 0xFD	; 253
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	05 96       	adiw	r24, 0x05	; 5
    1b70:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <mount_volume>
	LEAVE_FF(fs, res);
    1b74:	03 c0       	rjmp	.+6      	; 0x1b7c <f_mount+0x70>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    1b76:	8b e0       	ldi	r24, 0x0B	; 11
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <f_mount+0x70>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1b7a:	80 e0       	ldi	r24, 0x00	; 0

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    1b7c:	26 96       	adiw	r28, 0x06	; 6
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	08 95       	ret

00001b90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1b90:	4f 92       	push	r4
    1b92:	5f 92       	push	r5
    1b94:	6f 92       	push	r6
    1b96:	7f 92       	push	r7
    1b98:	8f 92       	push	r8
    1b9a:	9f 92       	push	r9
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	e0 97       	sbiw	r28, 0x30	; 48
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	7c a7       	std	Y+44, r23	; 0x2c
    1bc2:	6b a7       	std	Y+43, r22	; 0x2b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <f_open+0x3a>
    1bc8:	5b c1       	rjmp	.+694    	; 0x1e80 <f_open+0x2f0>
    1bca:	14 2f       	mov	r17, r20
    1bcc:	7c 01       	movw	r14, r24

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    1bce:	24 2f       	mov	r18, r20
    1bd0:	2f 73       	andi	r18, 0x3F	; 63
    1bd2:	c2 2e       	mov	r12, r18
	res = mount_volume(&path, &fs, mode);
    1bd4:	42 2f       	mov	r20, r18
    1bd6:	be 01       	movw	r22, r28
    1bd8:	67 5d       	subi	r22, 0xD7	; 215
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	ce 01       	movw	r24, r28
    1bde:	8b 96       	adiw	r24, 0x2b	; 43
    1be0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <mount_volume>
    1be4:	d8 2e       	mov	r13, r24
	if (res == FR_OK) {
    1be6:	81 11       	cpse	r24, r1
    1be8:	58 c1       	rjmp	.+688    	; 0x1e9a <f_open+0x30a>
		dj.obj.fs = fs;
    1bea:	89 a5       	ldd	r24, Y+41	; 0x29
    1bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    1bf2:	6b a5       	ldd	r22, Y+43	; 0x2b
    1bf4:	7c a5       	ldd	r23, Y+44	; 0x2c
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    1bfe:	81 11       	cpse	r24, r1
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <f_open+0x78>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    1c02:	98 a5       	ldd	r25, Y+40	; 0x28
    1c04:	97 fd       	sbrc	r25, 7
				res = FR_INVALID_NAME;
    1c06:	86 e0       	ldi	r24, 0x06	; 6
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1c08:	91 2f       	mov	r25, r17
    1c0a:	9c 71       	andi	r25, 0x1C	; 28
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <f_open+0x80>
    1c0e:	6d c0       	rjmp	.+218    	; 0x1cea <f_open+0x15a>
			if (res != FR_OK) {					/* No file, create new */
    1c10:	88 23       	and	r24, r24
    1c12:	61 f0       	breq	.+24     	; 0x1c2c <f_open+0x9c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    1c14:	84 30       	cpi	r24, 0x04	; 4
    1c16:	21 f4       	brne	.+8      	; 0x1c20 <f_open+0x90>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1c18:	ce 01       	movw	r24, r28
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	0e 94 2d 0c 	call	0x185a	; 0x185a <dir_register>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1c20:	3c 2d       	mov	r19, r12
    1c22:	38 60       	ori	r19, 0x08	; 8
    1c24:	c3 2e       	mov	r12, r19
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1c26:	88 23       	and	r24, r24
    1c28:	39 f0       	breq	.+14     	; 0x1c38 <f_open+0xa8>
    1c2a:	31 c1       	rjmp	.+610    	; 0x1e8e <f_open+0x2fe>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	81 71       	andi	r24, 0x11	; 17
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <f_open+0xa4>
    1c32:	2c c1       	rjmp	.+600    	; 0x1e8c <f_open+0x2fc>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    1c34:	12 fd       	sbrc	r17, 2
    1c36:	26 c1       	rjmp	.+588    	; 0x1e84 <f_open+0x2f4>
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1c38:	c3 fe       	sbrs	r12, 3
    1c3a:	65 c0       	rjmp	.+202    	; 0x1d06 <f_open+0x176>
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
					st_dword(dj.dir + DIR_CrtTime, tm);
    1c3c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1c3e:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1c40:	16 86       	std	Z+14, r1	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    1c42:	17 86       	std	Z+15, r1	; 0x0f
	*ptr++ = (BYTE)val; val >>= 8;
    1c44:	92 e3       	ldi	r25, 0x32	; 50
    1c46:	90 8b       	std	Z+16, r25	; 0x10
	*ptr++ = (BYTE)val;
    1c48:	80 e5       	ldi	r24, 0x50	; 80
    1c4a:	81 8b       	std	Z+17, r24	; 0x11
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
					st_dword(dj.dir + DIR_CrtTime, tm);
					st_dword(dj.dir + DIR_ModTime, tm);
    1c4c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1c4e:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1c50:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    1c52:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    1c54:	90 8f       	std	Z+24, r25	; 0x18
	*ptr++ = (BYTE)val;
    1c56:	81 8f       	std	Z+25, r24	; 0x19
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
					st_dword(dj.dir + DIR_CrtTime, tm);
					st_dword(dj.dir + DIR_ModTime, tm);
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    1c58:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1c5a:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1c5c:	09 a5       	ldd	r16, Y+41	; 0x29
    1c5e:	1a a5       	ldd	r17, Y+42	; 0x2a
    1c60:	b5 01       	movw	r22, r10
    1c62:	d8 01       	movw	r26, r16
    1c64:	8c 91       	ld	r24, X
    1c66:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ld_clust.isra.3>
    1c6a:	2b 01       	movw	r4, r22
    1c6c:	3c 01       	movw	r6, r24
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    1c6e:	80 e2       	ldi	r24, 0x20	; 32
    1c70:	f5 01       	movw	r30, r10
    1c72:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    1c74:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1c76:	fc 8d       	ldd	r31, Y+28	; 0x1c
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1c78:	12 8e       	std	Z+26, r1	; 0x1a
	*ptr++ = (BYTE)val;
    1c7a:	13 8e       	std	Z+27, r1	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    1c7c:	d8 01       	movw	r26, r16
    1c7e:	8c 91       	ld	r24, X
    1c80:	83 30       	cpi	r24, 0x03	; 3
    1c82:	11 f4       	brne	.+4      	; 0x1c88 <f_open+0xf8>
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1c84:	14 8a       	std	Z+20, r1	; 0x14
	*ptr++ = (BYTE)val;
    1c86:	15 8a       	std	Z+21, r1	; 0x15
					st_dword(dj.dir + DIR_CrtTime, tm);
					st_dword(dj.dir + DIR_ModTime, tm);
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
    1c88:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1c8a:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1c8c:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    1c8e:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    1c90:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    1c92:	17 8e       	std	Z+31, r1	; 0x1f
					st_dword(dj.dir + DIR_ModTime, tm);
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	f8 01       	movw	r30, r16
    1c98:	83 83       	std	Z+3, r24	; 0x03
					if (cl != 0) {						/* Remove the cluster chain if exist */
    1c9a:	41 14       	cp	r4, r1
    1c9c:	51 04       	cpc	r5, r1
    1c9e:	61 04       	cpc	r6, r1
    1ca0:	71 04       	cpc	r7, r1
    1ca2:	71 f1       	breq	.+92     	; 0x1d00 <f_open+0x170>
						sc = fs->winsect;
    1ca4:	83 a4       	ldd	r8, Z+43	; 0x2b
    1ca6:	94 a4       	ldd	r9, Z+44	; 0x2c
    1ca8:	a5 a4       	ldd	r10, Z+45	; 0x2d
    1caa:	b6 a4       	ldd	r11, Z+46	; 0x2e
						res = remove_chain(&dj.obj, cl, 0);
    1cac:	00 e0       	ldi	r16, 0x00	; 0
    1cae:	10 e0       	ldi	r17, 0x00	; 0
    1cb0:	98 01       	movw	r18, r16
    1cb2:	b3 01       	movw	r22, r6
    1cb4:	a2 01       	movw	r20, r4
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	0e 94 86 0c 	call	0x190c	; 0x190c <remove_chain>
						if (res == FR_OK) {
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	e6 c0       	rjmp	.+460    	; 0x1e8e <f_open+0x2fe>
							res = move_window(fs, sc);
    1cc2:	b5 01       	movw	r22, r10
    1cc4:	a4 01       	movw	r20, r8
    1cc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cca:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    1cce:	e9 a5       	ldd	r30, Y+41	; 0x29
    1cd0:	fa a5       	ldd	r31, Y+42	; 0x2a
    1cd2:	21 e0       	ldi	r18, 0x01	; 1
    1cd4:	42 1a       	sub	r4, r18
    1cd6:	51 08       	sbc	r5, r1
    1cd8:	61 08       	sbc	r6, r1
    1cda:	71 08       	sbc	r7, r1
    1cdc:	43 86       	std	Z+11, r4	; 0x0b
    1cde:	54 86       	std	Z+12, r5	; 0x0c
    1ce0:	65 86       	std	Z+13, r6	; 0x0d
    1ce2:	76 86       	std	Z+14, r7	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    1ce4:	88 23       	and	r24, r24
    1ce6:	51 f0       	breq	.+20     	; 0x1cfc <f_open+0x16c>
    1ce8:	d2 c0       	rjmp	.+420    	; 0x1e8e <f_open+0x2fe>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
    1cea:	81 11       	cpse	r24, r1
    1cec:	d0 c0       	rjmp	.+416    	; 0x1e8e <f_open+0x2fe>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	84 fd       	sbrc	r24, 4
    1cf2:	ca c0       	rjmp	.+404    	; 0x1e88 <f_open+0x2f8>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    1cf4:	11 ff       	sbrs	r17, 1
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <f_open+0x16c>
    1cf8:	80 fd       	sbrc	r24, 0
    1cfa:	c8 c0       	rjmp	.+400    	; 0x1e8c <f_open+0x2fc>
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    1cfc:	c3 fe       	sbrs	r12, 3
    1cfe:	03 c0       	rjmp	.+6      	; 0x1d06 <f_open+0x176>
    1d00:	3c 2d       	mov	r19, r12
    1d02:	30 64       	ori	r19, 0x40	; 64
    1d04:	c3 2e       	mov	r12, r19
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    1d06:	09 a5       	ldd	r16, Y+41	; 0x29
    1d08:	1a a5       	ldd	r17, Y+42	; 0x2a
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	83 a5       	ldd	r24, Z+43	; 0x2b
    1d0e:	94 a5       	ldd	r25, Z+44	; 0x2c
    1d10:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1d12:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1d14:	f7 01       	movw	r30, r14
    1d16:	84 8f       	std	Z+28, r24	; 0x1c
    1d18:	95 8f       	std	Z+29, r25	; 0x1d
    1d1a:	a6 8f       	std	Z+30, r26	; 0x1e
    1d1c:	b7 8f       	std	Z+31, r27	; 0x1f
			fp->dir_ptr = dj.dir;
    1d1e:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1d20:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1d22:	b1 a2       	std	Z+33, r11	; 0x21
    1d24:	a0 a2       	std	Z+32, r10	; 0x20
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    1d26:	b5 01       	movw	r22, r10
    1d28:	d8 01       	movw	r26, r16
    1d2a:	8c 91       	ld	r24, X
    1d2c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ld_clust.isra.3>
    1d30:	2b 01       	movw	r4, r22
    1d32:	3c 01       	movw	r6, r24
    1d34:	f7 01       	movw	r30, r14
    1d36:	66 83       	std	Z+6, r22	; 0x06
    1d38:	77 83       	std	Z+7, r23	; 0x07
    1d3a:	80 87       	std	Z+8, r24	; 0x08
    1d3c:	91 87       	std	Z+9, r25	; 0x09
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    1d3e:	c5 01       	movw	r24, r10
    1d40:	4c 96       	adiw	r24, 0x1c	; 28
    1d42:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
    1d46:	4b 01       	movw	r8, r22
    1d48:	5c 01       	movw	r10, r24
    1d4a:	d7 01       	movw	r26, r14
    1d4c:	1a 96       	adiw	r26, 0x0a	; 10
    1d4e:	6d 93       	st	X+, r22
    1d50:	7d 93       	st	X+, r23
    1d52:	8d 93       	st	X+, r24
    1d54:	9c 93       	st	X, r25
    1d56:	1d 97       	sbiw	r26, 0x0d	; 13
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    1d58:	11 96       	adiw	r26, 0x01	; 1
    1d5a:	1c 93       	st	X, r17
    1d5c:	0e 93       	st	-X, r16
			fp->obj.id = fs->id;
    1d5e:	f8 01       	movw	r30, r16
    1d60:	85 81       	ldd	r24, Z+5	; 0x05
    1d62:	96 81       	ldd	r25, Z+6	; 0x06
    1d64:	13 96       	adiw	r26, 0x03	; 3
    1d66:	9c 93       	st	X, r25
    1d68:	8e 93       	st	-X, r24
    1d6a:	12 97       	sbiw	r26, 0x02	; 2
			fp->flag = mode;		/* Set file access mode */
    1d6c:	1e 96       	adiw	r26, 0x0e	; 14
    1d6e:	cc 92       	st	X, r12
    1d70:	1e 97       	sbiw	r26, 0x0e	; 14
			fp->err = 0;			/* Clear error flag */
    1d72:	1f 96       	adiw	r26, 0x0f	; 15
    1d74:	1c 92       	st	X, r1
    1d76:	1f 97       	sbiw	r26, 0x0f	; 15
			fp->sect = 0;			/* Invalidate current data sector */
    1d78:	58 96       	adiw	r26, 0x18	; 24
    1d7a:	1d 92       	st	X+, r1
    1d7c:	1d 92       	st	X+, r1
    1d7e:	1d 92       	st	X+, r1
    1d80:	1c 92       	st	X, r1
    1d82:	5b 97       	sbiw	r26, 0x1b	; 27
			fp->fptr = 0;			/* Set file pointer top of the file */
    1d84:	f7 01       	movw	r30, r14
    1d86:	10 8a       	std	Z+16, r1	; 0x10
    1d88:	11 8a       	std	Z+17, r1	; 0x11
    1d8a:	12 8a       	std	Z+18, r1	; 0x12
    1d8c:	13 8a       	std	Z+19, r1	; 0x13
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    1d8e:	c5 fe       	sbrs	r12, 5
    1d90:	80 c0       	rjmp	.+256    	; 0x1e92 <f_open+0x302>
    1d92:	81 14       	cp	r8, r1
    1d94:	91 04       	cpc	r9, r1
    1d96:	a1 04       	cpc	r10, r1
    1d98:	b1 04       	cpc	r11, r1
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <f_open+0x20e>
    1d9c:	7a c0       	rjmp	.+244    	; 0x1e92 <f_open+0x302>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    1d9e:	50 96       	adiw	r26, 0x10	; 16
    1da0:	8d 92       	st	X+, r8
    1da2:	9d 92       	st	X+, r9
    1da4:	ad 92       	st	X+, r10
    1da6:	bc 92       	st	X, r11
    1da8:	53 97       	sbiw	r26, 0x13	; 19
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    1daa:	f8 01       	movw	r30, r16
    1dac:	81 85       	ldd	r24, Z+9	; 0x09
    1dae:	92 85       	ldd	r25, Z+10	; 0x0a
    1db0:	a0 e0       	ldi	r26, 0x00	; 0
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	9c 01       	movw	r18, r24
    1db6:	ad 01       	movw	r20, r26
    1db8:	69 e0       	ldi	r22, 0x09	; 9
    1dba:	22 0f       	add	r18, r18
    1dbc:	33 1f       	adc	r19, r19
    1dbe:	44 1f       	adc	r20, r20
    1dc0:	55 1f       	adc	r21, r21
    1dc2:	6a 95       	dec	r22
    1dc4:	d1 f7       	brne	.-12     	; 0x1dba <f_open+0x22a>
    1dc6:	2d a7       	std	Y+45, r18	; 0x2d
    1dc8:	3e a7       	std	Y+46, r19	; 0x2e
    1dca:	4f a7       	std	Y+47, r20	; 0x2f
    1dcc:	58 ab       	std	Y+48, r21	; 0x30
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    1dce:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dd2:	af a5       	ldd	r26, Y+47	; 0x2f
    1dd4:	b8 a9       	ldd	r27, Y+48	; 0x30
    1dd6:	88 15       	cp	r24, r8
    1dd8:	99 05       	cpc	r25, r9
    1dda:	aa 05       	cpc	r26, r10
    1ddc:	bb 05       	cpc	r27, r11
    1dde:	00 f5       	brcc	.+64     	; 0x1e20 <f_open+0x290>
					clst = get_fat(&fp->obj, clst);
    1de0:	b3 01       	movw	r22, r6
    1de2:	a2 01       	movw	r20, r4
    1de4:	d7 01       	movw	r26, r14
    1de6:	8d 91       	ld	r24, X+
    1de8:	9c 91       	ld	r25, X
    1dea:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
    1dee:	2b 01       	movw	r4, r22
    1df0:	3c 01       	movw	r6, r24
    1df2:	2d a5       	ldd	r18, Y+45	; 0x2d
    1df4:	3e a5       	ldd	r19, Y+46	; 0x2e
    1df6:	4f a5       	ldd	r20, Y+47	; 0x2f
    1df8:	58 a9       	ldd	r21, Y+48	; 0x30
    1dfa:	82 1a       	sub	r8, r18
    1dfc:	93 0a       	sbc	r9, r19
    1dfe:	a4 0a       	sbc	r10, r20
    1e00:	b5 0a       	sbc	r11, r21
					if (clst <= 1) res = FR_INT_ERR;
    1e02:	62 30       	cpi	r22, 0x02	; 2
    1e04:	71 05       	cpc	r23, r1
    1e06:	81 05       	cpc	r24, r1
    1e08:	91 05       	cpc	r25, r1
    1e0a:	40 f0       	brcs	.+16     	; 0x1e1c <f_open+0x28c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    1e0c:	6f 3f       	cpi	r22, 0xFF	; 255
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	8f 4f       	sbci	r24, 0xFF	; 255
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	e1 f6       	brne	.-72     	; 0x1dce <f_open+0x23e>
    1e16:	dd 24       	eor	r13, r13
    1e18:	d3 94       	inc	r13
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <f_open+0x290>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	d8 2e       	mov	r13, r24
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    1e20:	d7 01       	movw	r26, r14
    1e22:	54 96       	adiw	r26, 0x14	; 20
    1e24:	4d 92       	st	X+, r4
    1e26:	5d 92       	st	X+, r5
    1e28:	6d 92       	st	X+, r6
    1e2a:	7c 92       	st	X, r7
    1e2c:	57 97       	sbiw	r26, 0x17	; 23
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    1e2e:	d1 10       	cpse	r13, r1
    1e30:	34 c0       	rjmp	.+104    	; 0x1e9a <f_open+0x30a>
    1e32:	d5 01       	movw	r26, r10
    1e34:	c4 01       	movw	r24, r8
    1e36:	91 70       	andi	r25, 0x01	; 1
    1e38:	aa 27       	eor	r26, r26
    1e3a:	bb 27       	eor	r27, r27
    1e3c:	89 2b       	or	r24, r25
    1e3e:	8a 2b       	or	r24, r26
    1e40:	8b 2b       	or	r24, r27
    1e42:	39 f1       	breq	.+78     	; 0x1e92 <f_open+0x302>
					sc = clst2sect(fs, clst);
    1e44:	b3 01       	movw	r22, r6
    1e46:	a2 01       	movw	r20, r4
    1e48:	89 a5       	ldd	r24, Y+41	; 0x29
    1e4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e4c:	0e 94 77 01 	call	0x2ee	; 0x2ee <clst2sect>
					if (sc == 0) {
    1e50:	61 15       	cp	r22, r1
    1e52:	71 05       	cpc	r23, r1
    1e54:	81 05       	cpc	r24, r1
    1e56:	91 05       	cpc	r25, r1
    1e58:	f1 f0       	breq	.+60     	; 0x1e96 <f_open+0x306>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    1e5a:	29 e0       	ldi	r18, 0x09	; 9
    1e5c:	b6 94       	lsr	r11
    1e5e:	a7 94       	ror	r10
    1e60:	97 94       	ror	r9
    1e62:	87 94       	ror	r8
    1e64:	2a 95       	dec	r18
    1e66:	d1 f7       	brne	.-12     	; 0x1e5c <f_open+0x2cc>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	88 0d       	add	r24, r8
    1e6e:	99 1d       	adc	r25, r9
    1e70:	aa 1d       	adc	r26, r10
    1e72:	bb 1d       	adc	r27, r11
    1e74:	f7 01       	movw	r30, r14
    1e76:	80 8f       	std	Z+24, r24	; 0x18
    1e78:	91 8f       	std	Z+25, r25	; 0x19
    1e7a:	a2 8f       	std	Z+26, r26	; 0x1a
    1e7c:	b3 8f       	std	Z+27, r27	; 0x1b
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <f_open+0x302>
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1e80:	89 e0       	ldi	r24, 0x09	; 9
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <f_open+0x312>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    1e84:	88 e0       	ldi	r24, 0x08	; 8
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <f_open+0x2fe>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
    1e88:	84 e0       	ldi	r24, 0x04	; 4
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <f_open+0x2fe>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
						res = FR_DENIED;
    1e8c:	87 e0       	ldi	r24, 0x07	; 7
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					sc = clst2sect(fs, clst);
					if (sc == 0) {
						res = FR_INT_ERR;
    1e8e:	d8 2e       	mov	r13, r24
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <f_open+0x30a>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <f_open+0x312>
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					sc = clst2sect(fs, clst);
					if (sc == 0) {
						res = FR_INT_ERR;
    1e96:	92 e0       	ldi	r25, 0x02	; 2
    1e98:	d9 2e       	mov	r13, r25
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    1e9a:	d7 01       	movw	r26, r14
    1e9c:	1d 92       	st	X+, r1
    1e9e:	1c 92       	st	X, r1
    1ea0:	8d 2d       	mov	r24, r13

	LEAVE_FF(fs, res);
}
    1ea2:	e0 96       	adiw	r28, 0x30	; 48
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	9f 90       	pop	r9
    1ec4:	8f 90       	pop	r8
    1ec6:	7f 90       	pop	r7
    1ec8:	6f 90       	pop	r6
    1eca:	5f 90       	pop	r5
    1ecc:	4f 90       	pop	r4
    1ece:	08 95       	ret

00001ed0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    1ed0:	2f 92       	push	r2
    1ed2:	3f 92       	push	r3
    1ed4:	4f 92       	push	r4
    1ed6:	5f 92       	push	r5
    1ed8:	6f 92       	push	r6
    1eda:	7f 92       	push	r7
    1edc:	8f 92       	push	r8
    1ede:	9f 92       	push	r9
    1ee0:	af 92       	push	r10
    1ee2:	bf 92       	push	r11
    1ee4:	cf 92       	push	r12
    1ee6:	df 92       	push	r13
    1ee8:	ef 92       	push	r14
    1eea:	ff 92       	push	r15
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <f_read+0x26>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <f_read+0x28>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	7c 01       	movw	r14, r24
    1efe:	4b 01       	movw	r8, r22
    1f00:	5a 01       	movw	r10, r20
    1f02:	3c 83       	std	Y+4, r19	; 0x04
    1f04:	2b 83       	std	Y+3, r18	; 0x03
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    1f06:	f9 01       	movw	r30, r18
    1f08:	11 82       	std	Z+1, r1	; 0x01
    1f0a:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    1f0c:	be 01       	movw	r22, r28
    1f0e:	6f 5f       	subi	r22, 0xFF	; 255
    1f10:	7f 4f       	sbci	r23, 0xFF	; 255
    1f12:	0e 94 c6 01 	call	0x38c	; 0x38c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    1f16:	81 11       	cpse	r24, r1
    1f18:	12 c1       	rjmp	.+548    	; 0x213e <f_read+0x26e>
    1f1a:	f7 01       	movw	r30, r14
    1f1c:	87 85       	ldd	r24, Z+15	; 0x0f
    1f1e:	81 11       	cpse	r24, r1
    1f20:	0e c1       	rjmp	.+540    	; 0x213e <f_read+0x26e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    1f22:	86 85       	ldd	r24, Z+14	; 0x0e
    1f24:	80 ff       	sbrs	r24, 0
    1f26:	0a c1       	rjmp	.+532    	; 0x213c <f_read+0x26c>
	remain = fp->obj.objsize - fp->fptr;
    1f28:	82 85       	ldd	r24, Z+10	; 0x0a
    1f2a:	93 85       	ldd	r25, Z+11	; 0x0b
    1f2c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f2e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f30:	40 89       	ldd	r20, Z+16	; 0x10
    1f32:	51 89       	ldd	r21, Z+17	; 0x11
    1f34:	62 89       	ldd	r22, Z+18	; 0x12
    1f36:	73 89       	ldd	r23, Z+19	; 0x13
    1f38:	84 1b       	sub	r24, r20
    1f3a:	95 0b       	sbc	r25, r21
    1f3c:	a6 0b       	sbc	r26, r22
    1f3e:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    1f40:	a5 01       	movw	r20, r10
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	84 17       	cp	r24, r20
    1f48:	95 07       	cpc	r25, r21
    1f4a:	a6 07       	cpc	r26, r22
    1f4c:	b7 07       	cpc	r27, r23
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <f_read+0x82>
    1f50:	7b c0       	rjmp	.+246    	; 0x2048 <f_read+0x178>
    1f52:	5c 01       	movw	r10, r24
    1f54:	79 c0       	rjmp	.+242    	; 0x2048 <f_read+0x178>

	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    1f56:	f7 01       	movw	r30, r14
    1f58:	80 89       	ldd	r24, Z+16	; 0x10
    1f5a:	91 89       	ldd	r25, Z+17	; 0x11
    1f5c:	a2 89       	ldd	r26, Z+18	; 0x12
    1f5e:	b3 89       	ldd	r27, Z+19	; 0x13
    1f60:	ac 01       	movw	r20, r24
    1f62:	bd 01       	movw	r22, r26
    1f64:	51 70       	andi	r21, 0x01	; 1
    1f66:	66 27       	eor	r22, r22
    1f68:	77 27       	eor	r23, r23
    1f6a:	45 2b       	or	r20, r21
    1f6c:	46 2b       	or	r20, r22
    1f6e:	47 2b       	or	r20, r23
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <f_read+0xa4>
    1f72:	bb c0       	rjmp	.+374    	; 0x20ea <f_read+0x21a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    1f74:	e9 81       	ldd	r30, Y+1	; 0x01
    1f76:	fa 81       	ldd	r31, Y+2	; 0x02
    1f78:	01 85       	ldd	r16, Z+9	; 0x09
    1f7a:	12 85       	ldd	r17, Z+10	; 0x0a
    1f7c:	01 50       	subi	r16, 0x01	; 1
    1f7e:	11 09       	sbc	r17, r1
    1f80:	ac 01       	movw	r20, r24
    1f82:	bd 01       	movw	r22, r26
    1f84:	e9 e0       	ldi	r30, 0x09	; 9
    1f86:	76 95       	lsr	r23
    1f88:	67 95       	ror	r22
    1f8a:	57 95       	ror	r21
    1f8c:	47 95       	ror	r20
    1f8e:	ea 95       	dec	r30
    1f90:	d1 f7       	brne	.-12     	; 0x1f86 <f_read+0xb6>
    1f92:	04 23       	and	r16, r20
    1f94:	15 23       	and	r17, r21
			if (csect == 0) {					/* On the cluster boundary? */
    1f96:	01 15       	cp	r16, r1
    1f98:	11 05       	cpc	r17, r1
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <f_read+0xce>
    1f9c:	5a c0       	rjmp	.+180    	; 0x2052 <f_read+0x182>
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    1f9e:	29 80       	ldd	r2, Y+1	; 0x01
    1fa0:	3a 80       	ldd	r3, Y+2	; 0x02
    1fa2:	f7 01       	movw	r30, r14
    1fa4:	44 89       	ldd	r20, Z+20	; 0x14
    1fa6:	55 89       	ldd	r21, Z+21	; 0x15
    1fa8:	66 89       	ldd	r22, Z+22	; 0x16
    1faa:	77 89       	ldd	r23, Z+23	; 0x17
    1fac:	c1 01       	movw	r24, r2
    1fae:	0e 94 77 01 	call	0x2ee	; 0x2ee <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    1fb2:	61 15       	cp	r22, r1
    1fb4:	71 05       	cpc	r23, r1
    1fb6:	81 05       	cpc	r24, r1
    1fb8:	91 05       	cpc	r25, r1
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <f_read+0xee>
    1fbc:	61 c0       	rjmp	.+194    	; 0x2080 <f_read+0x1b0>
			sect += csect;
    1fbe:	2b 01       	movw	r4, r22
    1fc0:	3c 01       	movw	r6, r24
    1fc2:	40 0e       	add	r4, r16
    1fc4:	51 1e       	adc	r5, r17
    1fc6:	61 1c       	adc	r6, r1
    1fc8:	71 1c       	adc	r7, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    1fca:	65 01       	movw	r12, r10
    1fcc:	cd 2c       	mov	r12, r13
    1fce:	dd 24       	eor	r13, r13
    1fd0:	c6 94       	lsr	r12
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    1fd2:	c1 14       	cp	r12, r1
    1fd4:	d1 04       	cpc	r13, r1
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <f_read+0x10a>
    1fd8:	83 c0       	rjmp	.+262    	; 0x20e0 <f_read+0x210>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    1fda:	f1 01       	movw	r30, r2
    1fdc:	81 85       	ldd	r24, Z+9	; 0x09
    1fde:	92 85       	ldd	r25, Z+10	; 0x0a
    1fe0:	98 01       	movw	r18, r16
    1fe2:	2c 0d       	add	r18, r12
    1fe4:	3d 1d       	adc	r19, r13
    1fe6:	82 17       	cp	r24, r18
    1fe8:	93 07       	cpc	r25, r19
    1fea:	18 f4       	brcc	.+6      	; 0x1ff2 <f_read+0x122>
					cc = fs->csize - csect;
    1fec:	6c 01       	movw	r12, r24
    1fee:	c0 1a       	sub	r12, r16
    1ff0:	d1 0a       	sbc	r13, r17
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    1ff2:	86 01       	movw	r16, r12
    1ff4:	a3 01       	movw	r20, r6
    1ff6:	92 01       	movw	r18, r4
    1ff8:	b4 01       	movw	r22, r8
    1ffa:	f1 01       	movw	r30, r2
    1ffc:	81 81       	ldd	r24, Z+1	; 0x01
    1ffe:	0e 94 4e 1b 	call	0x369c	; 0x369c <disk_read>
    2002:	81 11       	cpse	r24, r1
    2004:	45 c0       	rjmp	.+138    	; 0x2090 <f_read+0x1c0>
#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
    2006:	e9 81       	ldd	r30, Y+1	; 0x01
    2008:	fa 81       	ldd	r31, Y+2	; 0x02
    200a:	83 81       	ldd	r24, Z+3	; 0x03
    200c:	81 11       	cpse	r24, r1
    200e:	4a c0       	rjmp	.+148    	; 0x20a4 <f_read+0x1d4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    2010:	dc 2c       	mov	r13, r12
    2012:	cc 24       	eor	r12, r12
    2014:	dd 0c       	add	r13, r13
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
    2016:	ac 18       	sub	r10, r12
    2018:	bd 08       	sbc	r11, r13
    201a:	eb 81       	ldd	r30, Y+3	; 0x03
    201c:	fc 81       	ldd	r31, Y+4	; 0x04
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	8c 0d       	add	r24, r12
    2024:	9d 1d       	adc	r25, r13
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
    202a:	8c 0c       	add	r8, r12
    202c:	9d 1c       	adc	r9, r13
    202e:	f7 01       	movw	r30, r14
    2030:	80 89       	ldd	r24, Z+16	; 0x10
    2032:	91 89       	ldd	r25, Z+17	; 0x11
    2034:	a2 89       	ldd	r26, Z+18	; 0x12
    2036:	b3 89       	ldd	r27, Z+19	; 0x13
    2038:	8c 0d       	add	r24, r12
    203a:	9d 1d       	adc	r25, r13
    203c:	a1 1d       	adc	r26, r1
    203e:	b1 1d       	adc	r27, r1
    2040:	80 8b       	std	Z+16, r24	; 0x10
    2042:	91 8b       	std	Z+17, r25	; 0x11
    2044:	a2 8b       	std	Z+18, r26	; 0x12
    2046:	b3 8b       	std	Z+19, r27	; 0x13
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
    2048:	a1 14       	cp	r10, r1
    204a:	b1 04       	cpc	r11, r1
    204c:	09 f0       	breq	.+2      	; 0x2050 <f_read+0x180>
    204e:	83 cf       	rjmp	.-250    	; 0x1f56 <f_read+0x86>
    2050:	73 c0       	rjmp	.+230    	; 0x2138 <f_read+0x268>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    2052:	f7 01       	movw	r30, r14
	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
    2054:	89 2b       	or	r24, r25
    2056:	8a 2b       	or	r24, r26
    2058:	8b 2b       	or	r24, r27
    205a:	29 f4       	brne	.+10     	; 0x2066 <f_read+0x196>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    205c:	66 81       	ldd	r22, Z+6	; 0x06
    205e:	77 81       	ldd	r23, Z+7	; 0x07
    2060:	80 85       	ldd	r24, Z+8	; 0x08
    2062:	91 85       	ldd	r25, Z+9	; 0x09
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <f_read+0x1a6>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    2066:	44 89       	ldd	r20, Z+20	; 0x14
    2068:	55 89       	ldd	r21, Z+21	; 0x15
    206a:	66 89       	ldd	r22, Z+22	; 0x16
    206c:	77 89       	ldd	r23, Z+23	; 0x17
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    2076:	62 30       	cpi	r22, 0x02	; 2
    2078:	71 05       	cpc	r23, r1
    207a:	81 05       	cpc	r24, r1
    207c:	91 05       	cpc	r25, r1
    207e:	10 f4       	brcc	.+4      	; 0x2084 <f_read+0x1b4>
    2080:	82 e0       	ldi	r24, 0x02	; 2
    2082:	07 c0       	rjmp	.+14     	; 0x2092 <f_read+0x1c2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2084:	6f 3f       	cpi	r22, 0xFF	; 255
    2086:	ff ef       	ldi	r31, 0xFF	; 255
    2088:	7f 07       	cpc	r23, r31
    208a:	8f 07       	cpc	r24, r31
    208c:	9f 07       	cpc	r25, r31
    208e:	21 f4       	brne	.+8      	; 0x2098 <f_read+0x1c8>
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	f7 01       	movw	r30, r14
    2094:	87 87       	std	Z+15, r24	; 0x0f
    2096:	53 c0       	rjmp	.+166    	; 0x213e <f_read+0x26e>
				fp->clust = clst;				/* Update current cluster */
    2098:	f7 01       	movw	r30, r14
    209a:	64 8b       	std	Z+20, r22	; 0x14
    209c:	75 8b       	std	Z+21, r23	; 0x15
    209e:	86 8b       	std	Z+22, r24	; 0x16
    20a0:	97 8b       	std	Z+23, r25	; 0x17
    20a2:	7d cf       	rjmp	.-262    	; 0x1f9e <f_read+0xce>
					cc = fs->csize - csect;
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
    20a4:	83 a5       	ldd	r24, Z+43	; 0x2b
    20a6:	94 a5       	ldd	r25, Z+44	; 0x2c
    20a8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    20aa:	b6 a5       	ldd	r27, Z+46	; 0x2e
    20ac:	84 19       	sub	r24, r4
    20ae:	95 09       	sbc	r25, r5
    20b0:	a6 09       	sbc	r26, r6
    20b2:	b7 09       	sbc	r27, r7
    20b4:	a6 01       	movw	r20, r12
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	84 17       	cp	r24, r20
    20bc:	95 07       	cpc	r25, r21
    20be:	a6 07       	cpc	r26, r22
    20c0:	b7 07       	cpc	r27, r23
    20c2:	08 f0       	brcs	.+2      	; 0x20c6 <f_read+0x1f6>
    20c4:	a5 cf       	rjmp	.-182    	; 0x2010 <f_read+0x140>
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
    20c6:	bf 01       	movw	r22, r30
    20c8:	61 5d       	subi	r22, 0xD1	; 209
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	98 2f       	mov	r25, r24
    20ce:	88 27       	eor	r24, r24
    20d0:	99 0f       	add	r25, r25
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	52 e0       	ldi	r21, 0x02	; 2
    20d6:	88 0d       	add	r24, r8
    20d8:	99 1d       	adc	r25, r9
    20da:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <mem_cpy.part.0>
    20de:	98 cf       	rjmp	.-208    	; 0x2010 <f_read+0x140>
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
    20e0:	f7 01       	movw	r30, r14
    20e2:	40 8e       	std	Z+24, r4	; 0x18
    20e4:	51 8e       	std	Z+25, r5	; 0x19
    20e6:	62 8e       	std	Z+26, r6	; 0x1a
    20e8:	73 8e       	std	Z+27, r7	; 0x1b
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    20ea:	f7 01       	movw	r30, r14
    20ec:	80 89       	ldd	r24, Z+16	; 0x10
    20ee:	91 89       	ldd	r25, Z+17	; 0x11
    20f0:	91 70       	andi	r25, 0x01	; 1
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	32 e0       	ldi	r19, 0x02	; 2
    20f6:	28 1b       	sub	r18, r24
    20f8:	39 0b       	sbc	r19, r25
    20fa:	65 01       	movw	r12, r10
    20fc:	2a 15       	cp	r18, r10
    20fe:	3b 05       	cpc	r19, r11
    2100:	08 f4       	brcc	.+2      	; 0x2104 <f_read+0x234>
    2102:	69 01       	movw	r12, r18
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    2104:	f7 01       	movw	r30, r14
    2106:	40 8d       	ldd	r20, Z+24	; 0x18
    2108:	51 8d       	ldd	r21, Z+25	; 0x19
    210a:	62 8d       	ldd	r22, Z+26	; 0x1a
    210c:	73 8d       	ldd	r23, Z+27	; 0x1b
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    2116:	81 11       	cpse	r24, r1
    2118:	bb cf       	rjmp	.-138    	; 0x2090 <f_read+0x1c0>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    211a:	69 81       	ldd	r22, Y+1	; 0x01
    211c:	7a 81       	ldd	r23, Y+2	; 0x02
    211e:	61 5d       	subi	r22, 0xD1	; 209
    2120:	7f 4f       	sbci	r23, 0xFF	; 255
    2122:	f7 01       	movw	r30, r14
    2124:	80 89       	ldd	r24, Z+16	; 0x10
    2126:	91 89       	ldd	r25, Z+17	; 0x11
    2128:	91 70       	andi	r25, 0x01	; 1
    212a:	68 0f       	add	r22, r24
    212c:	79 1f       	adc	r23, r25
    212e:	a6 01       	movw	r20, r12
    2130:	c4 01       	movw	r24, r8
    2132:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <mem_cpy.part.0>
    2136:	6f cf       	rjmp	.-290    	; 0x2016 <f_read+0x146>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	01 c0       	rjmp	.+2      	; 0x213e <f_read+0x26e>


	*br = 0;	/* Clear read byte counter */
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    213c:	87 e0       	ldi	r24, 0x07	; 7
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	ff 90       	pop	r15
    2150:	ef 90       	pop	r14
    2152:	df 90       	pop	r13
    2154:	cf 90       	pop	r12
    2156:	bf 90       	pop	r11
    2158:	af 90       	pop	r10
    215a:	9f 90       	pop	r9
    215c:	8f 90       	pop	r8
    215e:	7f 90       	pop	r7
    2160:	6f 90       	pop	r6
    2162:	5f 90       	pop	r5
    2164:	4f 90       	pop	r4
    2166:	3f 90       	pop	r3
    2168:	2f 90       	pop	r2
    216a:	08 95       	ret

0000216c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    216c:	2f 92       	push	r2
    216e:	3f 92       	push	r3
    2170:	4f 92       	push	r4
    2172:	5f 92       	push	r5
    2174:	6f 92       	push	r6
    2176:	7f 92       	push	r7
    2178:	8f 92       	push	r8
    217a:	9f 92       	push	r9
    217c:	af 92       	push	r10
    217e:	bf 92       	push	r11
    2180:	cf 92       	push	r12
    2182:	df 92       	push	r13
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	00 d0       	rcall	.+0      	; 0x2192 <f_write+0x26>
    2192:	00 d0       	rcall	.+0      	; 0x2194 <f_write+0x28>
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	7c 01       	movw	r14, r24
    219a:	4b 01       	movw	r8, r22
    219c:	5a 01       	movw	r10, r20
    219e:	3c 83       	std	Y+4, r19	; 0x04
    21a0:	2b 83       	std	Y+3, r18	; 0x03
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    21a2:	f9 01       	movw	r30, r18
    21a4:	11 82       	std	Z+1, r1	; 0x01
    21a6:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    21a8:	be 01       	movw	r22, r28
    21aa:	6f 5f       	subi	r22, 0xFF	; 255
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	0e 94 c6 01 	call	0x38c	; 0x38c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    21b2:	81 11       	cpse	r24, r1
    21b4:	6f c1       	rjmp	.+734    	; 0x2494 <f_write+0x328>
    21b6:	f7 01       	movw	r30, r14
    21b8:	87 85       	ldd	r24, Z+15	; 0x0f
    21ba:	81 11       	cpse	r24, r1
    21bc:	6b c1       	rjmp	.+726    	; 0x2494 <f_write+0x328>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    21be:	86 85       	ldd	r24, Z+14	; 0x0e
    21c0:	81 ff       	sbrs	r24, 1
    21c2:	67 c1       	rjmp	.+718    	; 0x2492 <f_write+0x326>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    21c4:	80 89       	ldd	r24, Z+16	; 0x10
    21c6:	91 89       	ldd	r25, Z+17	; 0x11
    21c8:	a2 89       	ldd	r26, Z+18	; 0x12
    21ca:	b3 89       	ldd	r27, Z+19	; 0x13
    21cc:	ac 01       	movw	r20, r24
    21ce:	bd 01       	movw	r22, r26
    21d0:	4a 0d       	add	r20, r10
    21d2:	5b 1d       	adc	r21, r11
    21d4:	61 1d       	adc	r22, r1
    21d6:	71 1d       	adc	r23, r1
    21d8:	48 17       	cp	r20, r24
    21da:	59 07       	cpc	r21, r25
    21dc:	6a 07       	cpc	r22, r26
    21de:	7b 07       	cpc	r23, r27
    21e0:	08 f0       	brcs	.+2      	; 0x21e4 <f_write+0x78>
    21e2:	bb c0       	rjmp	.+374    	; 0x235a <f_write+0x1ee>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    21e4:	5c 01       	movw	r10, r24
    21e6:	a0 94       	com	r10
    21e8:	b0 94       	com	r11
    21ea:	b7 c0       	rjmp	.+366    	; 0x235a <f_write+0x1ee>
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    21ec:	f7 01       	movw	r30, r14
    21ee:	80 89       	ldd	r24, Z+16	; 0x10
    21f0:	91 89       	ldd	r25, Z+17	; 0x11
    21f2:	a2 89       	ldd	r26, Z+18	; 0x12
    21f4:	b3 89       	ldd	r27, Z+19	; 0x13
    21f6:	ac 01       	movw	r20, r24
    21f8:	bd 01       	movw	r22, r26
    21fa:	51 70       	andi	r21, 0x01	; 1
    21fc:	66 27       	eor	r22, r22
    21fe:	77 27       	eor	r23, r23
    2200:	45 2b       	or	r20, r21
    2202:	46 2b       	or	r20, r22
    2204:	47 2b       	or	r20, r23
    2206:	09 f0       	breq	.+2      	; 0x220a <f_write+0x9e>
    2208:	19 c1       	rjmp	.+562    	; 0x243c <f_write+0x2d0>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    220a:	e9 81       	ldd	r30, Y+1	; 0x01
    220c:	fa 81       	ldd	r31, Y+2	; 0x02
    220e:	01 85       	ldd	r16, Z+9	; 0x09
    2210:	12 85       	ldd	r17, Z+10	; 0x0a
    2212:	01 50       	subi	r16, 0x01	; 1
    2214:	11 09       	sbc	r17, r1
    2216:	ac 01       	movw	r20, r24
    2218:	bd 01       	movw	r22, r26
    221a:	e9 e0       	ldi	r30, 0x09	; 9
    221c:	76 95       	lsr	r23
    221e:	67 95       	ror	r22
    2220:	57 95       	ror	r21
    2222:	47 95       	ror	r20
    2224:	ea 95       	dec	r30
    2226:	d1 f7       	brne	.-12     	; 0x221c <f_write+0xb0>
    2228:	04 23       	and	r16, r20
    222a:	15 23       	and	r17, r21
			if (csect == 0) {				/* On the cluster boundary? */
    222c:	01 15       	cp	r16, r1
    222e:	11 05       	cpc	r17, r1
    2230:	09 f4       	brne	.+2      	; 0x2234 <f_write+0xc8>
    2232:	98 c0       	rjmp	.+304    	; 0x2364 <f_write+0x1f8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;			/* Update current cluster */
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	fc 01       	movw	r30, r24
    223a:	43 a4       	ldd	r4, Z+43	; 0x2b
    223c:	54 a4       	ldd	r5, Z+44	; 0x2c
    223e:	65 a4       	ldd	r6, Z+45	; 0x2d
    2240:	76 a4       	ldd	r7, Z+46	; 0x2e
    2242:	f7 01       	movw	r30, r14
    2244:	40 8d       	ldd	r20, Z+24	; 0x18
    2246:	51 8d       	ldd	r21, Z+25	; 0x19
    2248:	62 8d       	ldd	r22, Z+26	; 0x1a
    224a:	73 8d       	ldd	r23, Z+27	; 0x1b
    224c:	44 16       	cp	r4, r20
    224e:	55 06       	cpc	r5, r21
    2250:	66 06       	cpc	r6, r22
    2252:	77 06       	cpc	r7, r23
    2254:	09 f4       	brne	.+2      	; 0x2258 <f_write+0xec>
    2256:	ce c0       	rjmp	.+412    	; 0x23f4 <f_write+0x288>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    2258:	69 80       	ldd	r6, Y+1	; 0x01
    225a:	7a 80       	ldd	r7, Y+2	; 0x02
    225c:	f7 01       	movw	r30, r14
    225e:	44 89       	ldd	r20, Z+20	; 0x14
    2260:	55 89       	ldd	r21, Z+21	; 0x15
    2262:	66 89       	ldd	r22, Z+22	; 0x16
    2264:	77 89       	ldd	r23, Z+23	; 0x17
    2266:	c3 01       	movw	r24, r6
    2268:	0e 94 77 01 	call	0x2ee	; 0x2ee <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    226c:	61 15       	cp	r22, r1
    226e:	71 05       	cpc	r23, r1
    2270:	81 05       	cpc	r24, r1
    2272:	91 05       	cpc	r25, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <f_write+0x10c>
    2276:	9f c0       	rjmp	.+318    	; 0x23b6 <f_write+0x24a>
			sect += csect;
    2278:	1b 01       	movw	r2, r22
    227a:	2c 01       	movw	r4, r24
    227c:	20 0e       	add	r2, r16
    227e:	31 1e       	adc	r3, r17
    2280:	41 1c       	adc	r4, r1
    2282:	51 1c       	adc	r5, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    2284:	65 01       	movw	r12, r10
    2286:	cd 2c       	mov	r12, r13
    2288:	dd 24       	eor	r13, r13
    228a:	c6 94       	lsr	r12
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    228c:	c1 14       	cp	r12, r1
    228e:	d1 04       	cpc	r13, r1
    2290:	09 f4       	brne	.+2      	; 0x2294 <f_write+0x128>
    2292:	b6 c0       	rjmp	.+364    	; 0x2400 <f_write+0x294>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    2294:	f3 01       	movw	r30, r6
    2296:	81 85       	ldd	r24, Z+9	; 0x09
    2298:	92 85       	ldd	r25, Z+10	; 0x0a
    229a:	98 01       	movw	r18, r16
    229c:	2c 0d       	add	r18, r12
    229e:	3d 1d       	adc	r19, r13
    22a0:	82 17       	cp	r24, r18
    22a2:	93 07       	cpc	r25, r19
    22a4:	18 f4       	brcc	.+6      	; 0x22ac <f_write+0x140>
					cc = fs->csize - csect;
    22a6:	6c 01       	movw	r12, r24
    22a8:	c0 1a       	sub	r12, r16
    22aa:	d1 0a       	sbc	r13, r17
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    22ac:	86 01       	movw	r16, r12
    22ae:	a2 01       	movw	r20, r4
    22b0:	91 01       	movw	r18, r2
    22b2:	b4 01       	movw	r22, r8
    22b4:	f3 01       	movw	r30, r6
    22b6:	81 81       	ldd	r24, Z+1	; 0x01
    22b8:	0e 94 99 1b 	call	0x3732	; 0x3732 <disk_write>
    22bc:	81 11       	cpse	r24, r1
    22be:	83 c0       	rjmp	.+262    	; 0x23c6 <f_write+0x25a>
#if FF_FS_MINIMIZE <= 2
#if FF_FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	fc 01       	movw	r30, r24
    22c6:	43 a5       	ldd	r20, Z+43	; 0x2b
    22c8:	54 a5       	ldd	r21, Z+44	; 0x2c
    22ca:	65 a5       	ldd	r22, Z+45	; 0x2d
    22cc:	76 a5       	ldd	r23, Z+46	; 0x2e
    22ce:	42 19       	sub	r20, r2
    22d0:	53 09       	sbc	r21, r3
    22d2:	64 09       	sbc	r22, r4
    22d4:	75 09       	sbc	r23, r5
    22d6:	86 01       	movw	r16, r12
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 17       	cp	r20, r16
    22de:	51 07       	cpc	r21, r17
    22e0:	62 07       	cpc	r22, r18
    22e2:	73 07       	cpc	r23, r19
    22e4:	70 f4       	brcc	.+28     	; 0x2302 <f_write+0x196>
    22e6:	54 2f       	mov	r21, r20
    22e8:	44 27       	eor	r20, r20
    22ea:	55 0f       	add	r21, r21
    22ec:	b4 01       	movw	r22, r8
    22ee:	64 0f       	add	r22, r20
    22f0:	75 1f       	adc	r23, r21
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	52 e0       	ldi	r21, 0x02	; 2
    22f6:	8f 96       	adiw	r24, 0x2f	; 47
    22f8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <mem_cpy.part.0>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
    22fc:	e9 81       	ldd	r30, Y+1	; 0x01
    22fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2300:	13 82       	std	Z+3, r1	; 0x03
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    2302:	dc 2c       	mov	r13, r12
    2304:	cc 24       	eor	r12, r12
    2306:	dd 0c       	add	r13, r13
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    2308:	ac 18       	sub	r10, r12
    230a:	bd 08       	sbc	r11, r13
    230c:	eb 81       	ldd	r30, Y+3	; 0x03
    230e:	fc 81       	ldd	r31, Y+4	; 0x04
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	8c 0d       	add	r24, r12
    2316:	9d 1d       	adc	r25, r13
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	80 83       	st	Z, r24
    231c:	8c 0c       	add	r8, r12
    231e:	9d 1c       	adc	r9, r13
    2320:	f7 01       	movw	r30, r14
    2322:	80 89       	ldd	r24, Z+16	; 0x10
    2324:	91 89       	ldd	r25, Z+17	; 0x11
    2326:	a2 89       	ldd	r26, Z+18	; 0x12
    2328:	b3 89       	ldd	r27, Z+19	; 0x13
    232a:	8c 0d       	add	r24, r12
    232c:	9d 1d       	adc	r25, r13
    232e:	a1 1d       	adc	r26, r1
    2330:	b1 1d       	adc	r27, r1
    2332:	80 8b       	std	Z+16, r24	; 0x10
    2334:	91 8b       	std	Z+17, r25	; 0x11
    2336:	a2 8b       	std	Z+18, r26	; 0x12
    2338:	b3 8b       	std	Z+19, r27	; 0x13
    233a:	42 85       	ldd	r20, Z+10	; 0x0a
    233c:	53 85       	ldd	r21, Z+11	; 0x0b
    233e:	64 85       	ldd	r22, Z+12	; 0x0c
    2340:	75 85       	ldd	r23, Z+13	; 0x0d
    2342:	48 17       	cp	r20, r24
    2344:	59 07       	cpc	r21, r25
    2346:	6a 07       	cpc	r22, r26
    2348:	7b 07       	cpc	r23, r27
    234a:	10 f4       	brcc	.+4      	; 0x2350 <f_write+0x1e4>
    234c:	ac 01       	movw	r20, r24
    234e:	bd 01       	movw	r22, r26
    2350:	f7 01       	movw	r30, r14
    2352:	42 87       	std	Z+10, r20	; 0x0a
    2354:	53 87       	std	Z+11, r21	; 0x0b
    2356:	64 87       	std	Z+12, r22	; 0x0c
    2358:	75 87       	std	Z+13, r23	; 0x0d
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
    235a:	a1 14       	cp	r10, r1
    235c:	b1 04       	cpc	r11, r1
    235e:	09 f0       	breq	.+2      	; 0x2362 <f_write+0x1f6>
    2360:	45 cf       	rjmp	.-374    	; 0x21ec <f_write+0x80>
    2362:	1e c0       	rjmp	.+60     	; 0x23a0 <f_write+0x234>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
    2364:	f7 01       	movw	r30, r14
	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
    2366:	89 2b       	or	r24, r25
    2368:	8a 2b       	or	r24, r26
    236a:	8b 2b       	or	r24, r27
    236c:	69 f4       	brne	.+26     	; 0x2388 <f_write+0x21c>
					clst = fp->obj.sclust;	/* Follow from the origin */
    236e:	66 81       	ldd	r22, Z+6	; 0x06
    2370:	77 81       	ldd	r23, Z+7	; 0x07
    2372:	80 85       	ldd	r24, Z+8	; 0x08
    2374:	91 85       	ldd	r25, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    2376:	61 15       	cp	r22, r1
    2378:	71 05       	cpc	r23, r1
    237a:	81 05       	cpc	r24, r1
    237c:	91 05       	cpc	r25, r1
    237e:	b1 f4       	brne	.+44     	; 0x23ac <f_write+0x240>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	ba 01       	movw	r22, r20
    2386:	04 c0       	rjmp	.+8      	; 0x2390 <f_write+0x224>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2388:	44 89       	ldd	r20, Z+20	; 0x14
    238a:	55 89       	ldd	r21, Z+21	; 0x15
    238c:	66 89       	ldd	r22, Z+22	; 0x16
    238e:	77 89       	ldd	r23, Z+23	; 0x17
    2390:	c7 01       	movw	r24, r14
    2392:	0e 94 ad 08 	call	0x115a	; 0x115a <create_chain>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2396:	61 15       	cp	r22, r1
    2398:	71 05       	cpc	r23, r1
    239a:	81 05       	cpc	r24, r1
    239c:	91 05       	cpc	r25, r1
    239e:	31 f4       	brne	.+12     	; 0x23ac <f_write+0x240>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    23a0:	f7 01       	movw	r30, r14
    23a2:	86 85       	ldd	r24, Z+14	; 0x0e
    23a4:	80 64       	ori	r24, 0x40	; 64
    23a6:	86 87       	std	Z+14, r24	; 0x0e

	LEAVE_FF(fs, FR_OK);
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	74 c0       	rjmp	.+232    	; 0x2494 <f_write+0x328>
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    23ac:	61 30       	cpi	r22, 0x01	; 1
    23ae:	71 05       	cpc	r23, r1
    23b0:	81 05       	cpc	r24, r1
    23b2:	91 05       	cpc	r25, r1
    23b4:	11 f4       	brne	.+4      	; 0x23ba <f_write+0x24e>
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	07 c0       	rjmp	.+14     	; 0x23c8 <f_write+0x25c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    23ba:	6f 3f       	cpi	r22, 0xFF	; 255
    23bc:	ff ef       	ldi	r31, 0xFF	; 255
    23be:	7f 07       	cpc	r23, r31
    23c0:	8f 07       	cpc	r24, r31
    23c2:	9f 07       	cpc	r25, r31
    23c4:	21 f4       	brne	.+8      	; 0x23ce <f_write+0x262>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	f7 01       	movw	r30, r14
    23ca:	87 87       	std	Z+15, r24	; 0x0f
    23cc:	63 c0       	rjmp	.+198    	; 0x2494 <f_write+0x328>
				fp->clust = clst;			/* Update current cluster */
    23ce:	f7 01       	movw	r30, r14
    23d0:	64 8b       	std	Z+20, r22	; 0x14
    23d2:	75 8b       	std	Z+21, r23	; 0x15
    23d4:	86 8b       	std	Z+22, r24	; 0x16
    23d6:	97 8b       	std	Z+23, r25	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    23d8:	46 80       	ldd	r4, Z+6	; 0x06
    23da:	57 80       	ldd	r5, Z+7	; 0x07
    23dc:	60 84       	ldd	r6, Z+8	; 0x08
    23de:	71 84       	ldd	r7, Z+9	; 0x09
    23e0:	45 28       	or	r4, r5
    23e2:	46 28       	or	r4, r6
    23e4:	47 28       	or	r4, r7
    23e6:	09 f0       	breq	.+2      	; 0x23ea <f_write+0x27e>
    23e8:	25 cf       	rjmp	.-438    	; 0x2234 <f_write+0xc8>
    23ea:	66 83       	std	Z+6, r22	; 0x06
    23ec:	77 83       	std	Z+7, r23	; 0x07
    23ee:	80 87       	std	Z+8, r24	; 0x08
    23f0:	91 87       	std	Z+9, r25	; 0x09
    23f2:	20 cf       	rjmp	.-448    	; 0x2234 <f_write+0xc8>
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    23f4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sync_window>
    23f8:	88 23       	and	r24, r24
    23fa:	09 f4       	brne	.+2      	; 0x23fe <f_write+0x292>
    23fc:	2d cf       	rjmp	.-422    	; 0x2258 <f_write+0xec>
    23fe:	e3 cf       	rjmp	.-58     	; 0x23c6 <f_write+0x25a>
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
				continue;
			}
#if FF_FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
    2400:	f7 01       	movw	r30, r14
    2402:	40 89       	ldd	r20, Z+16	; 0x10
    2404:	51 89       	ldd	r21, Z+17	; 0x11
    2406:	62 89       	ldd	r22, Z+18	; 0x12
    2408:	73 89       	ldd	r23, Z+19	; 0x13
    240a:	82 85       	ldd	r24, Z+10	; 0x0a
    240c:	93 85       	ldd	r25, Z+11	; 0x0b
    240e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2410:	b5 85       	ldd	r27, Z+13	; 0x0d
    2412:	48 17       	cp	r20, r24
    2414:	59 07       	cpc	r21, r25
    2416:	6a 07       	cpc	r22, r26
    2418:	7b 07       	cpc	r23, r27
    241a:	58 f0       	brcs	.+22     	; 0x2432 <f_write+0x2c6>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    241c:	c3 01       	movw	r24, r6
    241e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sync_window>
    2422:	81 11       	cpse	r24, r1
    2424:	d0 cf       	rjmp	.-96     	; 0x23c6 <f_write+0x25a>
				fs->winsect = sect;
    2426:	e9 81       	ldd	r30, Y+1	; 0x01
    2428:	fa 81       	ldd	r31, Y+2	; 0x02
    242a:	23 a6       	std	Z+43, r2	; 0x2b
    242c:	34 a6       	std	Z+44, r3	; 0x2c
    242e:	45 a6       	std	Z+45, r4	; 0x2d
    2430:	56 a6       	std	Z+46, r5	; 0x2e
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
    2432:	f7 01       	movw	r30, r14
    2434:	20 8e       	std	Z+24, r2	; 0x18
    2436:	31 8e       	std	Z+25, r3	; 0x19
    2438:	42 8e       	std	Z+26, r4	; 0x1a
    243a:	53 8e       	std	Z+27, r5	; 0x1b
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    243c:	f7 01       	movw	r30, r14
    243e:	80 89       	ldd	r24, Z+16	; 0x10
    2440:	91 89       	ldd	r25, Z+17	; 0x11
    2442:	91 70       	andi	r25, 0x01	; 1
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	32 e0       	ldi	r19, 0x02	; 2
    2448:	28 1b       	sub	r18, r24
    244a:	39 0b       	sbc	r19, r25
    244c:	65 01       	movw	r12, r10
    244e:	2a 15       	cp	r18, r10
    2450:	3b 05       	cpc	r19, r11
    2452:	08 f4       	brcc	.+2      	; 0x2456 <f_write+0x2ea>
    2454:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    2456:	f7 01       	movw	r30, r14
    2458:	40 8d       	ldd	r20, Z+24	; 0x18
    245a:	51 8d       	ldd	r21, Z+25	; 0x19
    245c:	62 8d       	ldd	r22, Z+26	; 0x1a
    245e:	73 8d       	ldd	r23, Z+27	; 0x1b
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
    2468:	81 11       	cpse	r24, r1
    246a:	ad cf       	rjmp	.-166    	; 0x23c6 <f_write+0x25a>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    246c:	29 81       	ldd	r18, Y+1	; 0x01
    246e:	3a 81       	ldd	r19, Y+2	; 0x02
    2470:	21 5d       	subi	r18, 0xD1	; 209
    2472:	3f 4f       	sbci	r19, 0xFF	; 255
    2474:	f7 01       	movw	r30, r14
    2476:	80 89       	ldd	r24, Z+16	; 0x10
    2478:	91 89       	ldd	r25, Z+17	; 0x11
    247a:	91 70       	andi	r25, 0x01	; 1
    247c:	a6 01       	movw	r20, r12
    247e:	b4 01       	movw	r22, r8
    2480:	82 0f       	add	r24, r18
    2482:	93 1f       	adc	r25, r19
    2484:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <mem_cpy.part.0>
		fs->wflag = 1;
    2488:	e9 81       	ldd	r30, Y+1	; 0x01
    248a:	fa 81       	ldd	r31, Y+2	; 0x02
    248c:	21 e0       	ldi	r18, 0x01	; 1
    248e:	23 83       	std	Z+3, r18	; 0x03
    2490:	3b cf       	rjmp	.-394    	; 0x2308 <f_write+0x19c>


	*bw = 0;	/* Clear write byte counter */
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2492:	87 e0       	ldi	r24, 0x07	; 7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	ff 90       	pop	r15
    24a6:	ef 90       	pop	r14
    24a8:	df 90       	pop	r13
    24aa:	cf 90       	pop	r12
    24ac:	bf 90       	pop	r11
    24ae:	af 90       	pop	r10
    24b0:	9f 90       	pop	r9
    24b2:	8f 90       	pop	r8
    24b4:	7f 90       	pop	r7
    24b6:	6f 90       	pop	r6
    24b8:	5f 90       	pop	r5
    24ba:	4f 90       	pop	r4
    24bc:	3f 90       	pop	r3
    24be:	2f 90       	pop	r2
    24c0:	08 95       	ret

000024c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <f_sync+0xe>
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	7c 01       	movw	r14, r24
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    24d6:	be 01       	movw	r22, r28
    24d8:	6f 5f       	subi	r22, 0xFF	; 255
    24da:	7f 4f       	sbci	r23, 0xFF	; 255
    24dc:	0e 94 c6 01 	call	0x38c	; 0x38c <validate>
	if (res == FR_OK) {
    24e0:	81 11       	cpse	r24, r1
    24e2:	3c c0       	rjmp	.+120    	; 0x255c <f_sync+0x9a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    24e4:	f7 01       	movw	r30, r14
    24e6:	96 85       	ldd	r25, Z+14	; 0x0e
    24e8:	96 ff       	sbrs	r25, 6
    24ea:	38 c0       	rjmp	.+112    	; 0x255c <f_sync+0x9a>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    24ec:	44 8d       	ldd	r20, Z+28	; 0x1c
    24ee:	55 8d       	ldd	r21, Z+29	; 0x1d
    24f0:	66 8d       	ldd	r22, Z+30	; 0x1e
    24f2:	77 8d       	ldd	r23, Z+31	; 0x1f
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
				if (res == FR_OK) {
    24fc:	81 11       	cpse	r24, r1
    24fe:	2e c0       	rjmp	.+92     	; 0x255c <f_sync+0x9a>
					dir = fp->dir_ptr;
    2500:	f7 01       	movw	r30, r14
    2502:	00 a1       	ldd	r16, Z+32	; 0x20
    2504:	11 a1       	ldd	r17, Z+33	; 0x21
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    2506:	f8 01       	movw	r30, r16
    2508:	83 85       	ldd	r24, Z+11	; 0x0b
    250a:	80 62       	ori	r24, 0x20	; 32
    250c:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    250e:	f7 01       	movw	r30, r14
    2510:	26 81       	ldd	r18, Z+6	; 0x06
    2512:	37 81       	ldd	r19, Z+7	; 0x07
    2514:	40 85       	ldd	r20, Z+8	; 0x08
    2516:	51 85       	ldd	r21, Z+9	; 0x09
    2518:	b8 01       	movw	r22, r16
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	0e 94 10 02 	call	0x420	; 0x420 <st_clust.isra.4>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    2522:	f7 01       	movw	r30, r14
    2524:	32 85       	ldd	r19, Z+10	; 0x0a
    2526:	23 85       	ldd	r18, Z+11	; 0x0b
    2528:	94 85       	ldd	r25, Z+12	; 0x0c
    252a:	85 85       	ldd	r24, Z+13	; 0x0d
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    252c:	f8 01       	movw	r30, r16
    252e:	34 8f       	std	Z+28, r19	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    2530:	25 8f       	std	Z+29, r18	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    2532:	96 8f       	std	Z+30, r25	; 0x1e
	*ptr++ = (BYTE)val;
    2534:	87 8f       	std	Z+31, r24	; 0x1f
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2536:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    2538:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    253a:	82 e3       	ldi	r24, 0x32	; 50
    253c:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    253e:	80 e5       	ldi	r24, 0x50	; 80
    2540:	81 8f       	std	Z+25, r24	; 0x19
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2542:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    2544:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	21 e0       	ldi	r18, 0x01	; 1
    254c:	fc 01       	movw	r30, r24
    254e:	23 83       	std	Z+3, r18	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    2550:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    2554:	f7 01       	movw	r30, r14
    2556:	96 85       	ldd	r25, Z+14	; 0x0e
    2558:	9f 7b       	andi	r25, 0xBF	; 191
    255a:	96 87       	std	Z+14, r25	; 0x0e
			}
		}
	}

	LEAVE_FF(fs, res);
}
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	ff 90       	pop	r15
    256a:	ef 90       	pop	r14
    256c:	08 95       	ret

0000256e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    256e:	0f 93       	push	r16
    2570:	1f 93       	push	r17
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	00 d0       	rcall	.+0      	; 0x2578 <f_close+0xa>
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    257e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <f_sync>
	if (res == FR_OK)
    2582:	81 11       	cpse	r24, r1
    2584:	0b c0       	rjmp	.+22     	; 0x259c <f_close+0x2e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    2586:	be 01       	movw	r22, r28
    2588:	6f 5f       	subi	r22, 0xFF	; 255
    258a:	7f 4f       	sbci	r23, 0xFF	; 255
    258c:	c8 01       	movw	r24, r16
    258e:	0e 94 c6 01 	call	0x38c	; 0x38c <validate>
		if (res == FR_OK) {
    2592:	81 11       	cpse	r24, r1
    2594:	03 c0       	rjmp	.+6      	; 0x259c <f_close+0x2e>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    2596:	f8 01       	movw	r30, r16
    2598:	11 82       	std	Z+1, r1	; 0x01
    259a:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	08 95       	ret

000025aa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    25aa:	4f 92       	push	r4
    25ac:	5f 92       	push	r5
    25ae:	6f 92       	push	r6
    25b0:	7f 92       	push	r7
    25b2:	8f 92       	push	r8
    25b4:	9f 92       	push	r9
    25b6:	af 92       	push	r10
    25b8:	bf 92       	push	r11
    25ba:	cf 92       	push	r12
    25bc:	df 92       	push	r13
    25be:	ef 92       	push	r14
    25c0:	ff 92       	push	r15
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <f_lseek+0x22>
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <f_lseek+0x24>
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <f_lseek+0x26>
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	8c 01       	movw	r16, r24
    25d6:	6a 01       	movw	r12, r20
    25d8:	7b 01       	movw	r14, r22
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
    25da:	be 01       	movw	r22, r28
    25dc:	6f 5f       	subi	r22, 0xFF	; 255
    25de:	7f 4f       	sbci	r23, 0xFF	; 255
    25e0:	0e 94 c6 01 	call	0x38c	; 0x38c <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
    25e4:	81 11       	cpse	r24, r1
    25e6:	64 c1       	rjmp	.+712    	; 0x28b0 <f_lseek+0x306>
    25e8:	d8 01       	movw	r26, r16
    25ea:	1f 96       	adiw	r26, 0x0f	; 15
    25ec:	8c 91       	ld	r24, X
    25ee:	1f 97       	sbiw	r26, 0x0f	; 15
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
    25f0:	81 11       	cpse	r24, r1
    25f2:	5e c1       	rjmp	.+700    	; 0x28b0 <f_lseek+0x306>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    25f4:	1a 96       	adiw	r26, 0x0a	; 10
    25f6:	8d 91       	ld	r24, X+
    25f8:	9d 91       	ld	r25, X+
    25fa:	0d 90       	ld	r0, X+
    25fc:	bc 91       	ld	r27, X
    25fe:	a0 2d       	mov	r26, r0
    2600:	8c 15       	cp	r24, r12
    2602:	9d 05       	cpc	r25, r13
    2604:	ae 05       	cpc	r26, r14
    2606:	bf 05       	cpc	r27, r15
    2608:	30 f4       	brcc	.+12     	; 0x2616 <f_lseek+0x6c>
    260a:	f8 01       	movw	r30, r16
    260c:	26 85       	ldd	r18, Z+14	; 0x0e
    260e:	21 fd       	sbrc	r18, 1
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <f_lseek+0x6c>
    2612:	6c 01       	movw	r12, r24
    2614:	7d 01       	movw	r14, r26
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
    2616:	d8 01       	movw	r26, r16
    2618:	50 96       	adiw	r26, 0x10	; 16
    261a:	8d 90       	ld	r8, X+
    261c:	9d 90       	ld	r9, X+
    261e:	ad 90       	ld	r10, X+
    2620:	bc 90       	ld	r11, X
    2622:	53 97       	sbiw	r26, 0x13	; 19
		fp->fptr = nsect = 0;
    2624:	f8 01       	movw	r30, r16
    2626:	10 8a       	std	Z+16, r1	; 0x10
    2628:	11 8a       	std	Z+17, r1	; 0x11
    262a:	12 8a       	std	Z+18, r1	; 0x12
    262c:	13 8a       	std	Z+19, r1	; 0x13
		if (ofs > 0) {
    262e:	c1 14       	cp	r12, r1
    2630:	d1 04       	cpc	r13, r1
    2632:	e1 04       	cpc	r14, r1
    2634:	f1 04       	cpc	r15, r1
    2636:	09 f4       	brne	.+2      	; 0x263a <f_lseek+0x90>
    2638:	34 c1       	rjmp	.+616    	; 0x28a2 <f_lseek+0x2f8>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    263a:	e9 81       	ldd	r30, Y+1	; 0x01
    263c:	fa 81       	ldd	r31, Y+2	; 0x02
    263e:	81 85       	ldd	r24, Z+9	; 0x09
    2640:	92 85       	ldd	r25, Z+10	; 0x0a
    2642:	a0 e0       	ldi	r26, 0x00	; 0
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	2c 01       	movw	r4, r24
    2648:	3d 01       	movw	r6, r26
    264a:	39 e0       	ldi	r19, 0x09	; 9
    264c:	44 0c       	add	r4, r4
    264e:	55 1c       	adc	r5, r5
    2650:	66 1c       	adc	r6, r6
    2652:	77 1c       	adc	r7, r7
    2654:	3a 95       	dec	r19
    2656:	d1 f7       	brne	.-12     	; 0x264c <f_lseek+0xa2>
			if (ifptr > 0 &&
    2658:	81 14       	cp	r8, r1
    265a:	91 04       	cpc	r9, r1
    265c:	a1 04       	cpc	r10, r1
    265e:	b1 04       	cpc	r11, r1
    2660:	09 f4       	brne	.+2      	; 0x2664 <f_lseek+0xba>
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2664:	f1 e0       	ldi	r31, 0x01	; 1
    2666:	8f 1a       	sub	r8, r31
    2668:	91 08       	sbc	r9, r1
    266a:	a1 08       	sbc	r10, r1
    266c:	b1 08       	sbc	r11, r1
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs > 0) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    266e:	c7 01       	movw	r24, r14
    2670:	b6 01       	movw	r22, r12
    2672:	61 50       	subi	r22, 0x01	; 1
    2674:	71 09       	sbc	r23, r1
    2676:	81 09       	sbc	r24, r1
    2678:	91 09       	sbc	r25, r1
    267a:	a3 01       	movw	r20, r6
    267c:	92 01       	movw	r18, r4
    267e:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__udivmodsi4>
    2682:	2b 83       	std	Y+3, r18	; 0x03
    2684:	3c 83       	std	Y+4, r19	; 0x04
    2686:	4d 83       	std	Y+5, r20	; 0x05
    2688:	5e 83       	std	Y+6, r21	; 0x06
    268a:	c5 01       	movw	r24, r10
    268c:	b4 01       	movw	r22, r8
    268e:	a3 01       	movw	r20, r6
    2690:	92 01       	movw	r18, r4
    2692:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__udivmodsi4>
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	ad 81       	ldd	r26, Y+5	; 0x05
    269c:	be 81       	ldd	r27, Y+6	; 0x06
    269e:	82 17       	cp	r24, r18
    26a0:	93 07       	cpc	r25, r19
    26a2:	a4 07       	cpc	r26, r20
    26a4:	b5 07       	cpc	r27, r21
    26a6:	e8 f0       	brcs	.+58     	; 0x26e2 <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
    26a8:	88 27       	eor	r24, r24
    26aa:	99 27       	eor	r25, r25
    26ac:	dc 01       	movw	r26, r24
    26ae:	84 19       	sub	r24, r4
    26b0:	95 09       	sbc	r25, r5
    26b2:	a6 09       	sbc	r26, r6
    26b4:	b7 09       	sbc	r27, r7
    26b6:	88 22       	and	r8, r24
    26b8:	99 22       	and	r9, r25
    26ba:	aa 22       	and	r10, r26
    26bc:	bb 22       	and	r11, r27
    26be:	d8 01       	movw	r26, r16
    26c0:	50 96       	adiw	r26, 0x10	; 16
    26c2:	8d 92       	st	X+, r8
    26c4:	9d 92       	st	X+, r9
    26c6:	ad 92       	st	X+, r10
    26c8:	bc 92       	st	X, r11
    26ca:	53 97       	sbiw	r26, 0x13	; 19
				ofs -= fp->fptr;
    26cc:	c8 18       	sub	r12, r8
    26ce:	d9 08       	sbc	r13, r9
    26d0:	ea 08       	sbc	r14, r10
    26d2:	fb 08       	sbc	r15, r11
				clst = fp->clust;
    26d4:	54 96       	adiw	r26, 0x14	; 20
    26d6:	4d 91       	ld	r20, X+
    26d8:	5d 91       	ld	r21, X+
    26da:	6d 91       	ld	r22, X+
    26dc:	7c 91       	ld	r23, X
    26de:	57 97       	sbiw	r26, 0x17	; 23
    26e0:	32 c0       	rjmp	.+100    	; 0x2746 <f_lseek+0x19c>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
    26e2:	f8 01       	movw	r30, r16
    26e4:	46 81       	ldd	r20, Z+6	; 0x06
    26e6:	57 81       	ldd	r21, Z+7	; 0x07
    26e8:	60 85       	ldd	r22, Z+8	; 0x08
    26ea:	71 85       	ldd	r23, Z+9	; 0x09
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    26ec:	41 15       	cp	r20, r1
    26ee:	51 05       	cpc	r21, r1
    26f0:	61 05       	cpc	r22, r1
    26f2:	71 05       	cpc	r23, r1
    26f4:	19 f5       	brne	.+70     	; 0x273c <f_lseek+0x192>
					clst = create_chain(&fp->obj, 0);
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	ba 01       	movw	r22, r20
    26fc:	c8 01       	movw	r24, r16
    26fe:	0e 94 ad 08 	call	0x115a	; 0x115a <create_chain>
    2702:	ab 01       	movw	r20, r22
    2704:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    2706:	41 30       	cpi	r20, 0x01	; 1
    2708:	51 05       	cpc	r21, r1
    270a:	61 05       	cpc	r22, r1
    270c:	71 05       	cpc	r23, r1
    270e:	29 f4       	brne	.+10     	; 0x271a <f_lseek+0x170>
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	d8 01       	movw	r26, r16
    2714:	1f 96       	adiw	r26, 0x0f	; 15
    2716:	8c 93       	st	X, r24
    2718:	cb c0       	rjmp	.+406    	; 0x28b0 <f_lseek+0x306>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    271a:	4f 3f       	cpi	r20, 0xFF	; 255
    271c:	bf ef       	ldi	r27, 0xFF	; 255
    271e:	5b 07       	cpc	r21, r27
    2720:	6b 07       	cpc	r22, r27
    2722:	7b 07       	cpc	r23, r27
    2724:	21 f4       	brne	.+8      	; 0x272e <f_lseek+0x184>
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	f8 01       	movw	r30, r16
    272a:	87 87       	std	Z+15, r24	; 0x0f
    272c:	c1 c0       	rjmp	.+386    	; 0x28b0 <f_lseek+0x306>
					fp->obj.sclust = clst;
    272e:	d8 01       	movw	r26, r16
    2730:	16 96       	adiw	r26, 0x06	; 6
    2732:	4d 93       	st	X+, r20
    2734:	5d 93       	st	X+, r21
    2736:	6d 93       	st	X+, r22
    2738:	7c 93       	st	X, r23
    273a:	19 97       	sbiw	r26, 0x09	; 9
				}
#endif
				fp->clust = clst;
    273c:	f8 01       	movw	r30, r16
    273e:	44 8b       	std	Z+20, r20	; 0x14
    2740:	55 8b       	std	Z+21, r21	; 0x15
    2742:	66 8b       	std	Z+22, r22	; 0x16
    2744:	77 8b       	std	Z+23, r23	; 0x17
			}
			if (clst != 0) {
    2746:	41 15       	cp	r20, r1
    2748:	51 05       	cpc	r21, r1
    274a:	61 05       	cpc	r22, r1
    274c:	71 05       	cpc	r23, r1
    274e:	09 f0       	breq	.+2      	; 0x2752 <f_lseek+0x1a8>
    2750:	3f c0       	rjmp	.+126    	; 0x27d0 <f_lseek+0x226>
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2752:	c1 2c       	mov	r12, r1
    2754:	d1 2c       	mov	r13, r1
    2756:	76 01       	movw	r14, r12
    2758:	78 c0       	rjmp	.+240    	; 0x284a <f_lseek+0x2a0>
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
					ofs -= bcs; fp->fptr += bcs;
    275a:	c4 18       	sub	r12, r4
    275c:	d5 08       	sbc	r13, r5
    275e:	e6 08       	sbc	r14, r6
    2760:	f7 08       	sbc	r15, r7
    2762:	f8 01       	movw	r30, r16
    2764:	80 89       	ldd	r24, Z+16	; 0x10
    2766:	91 89       	ldd	r25, Z+17	; 0x11
    2768:	a2 89       	ldd	r26, Z+18	; 0x12
    276a:	b3 89       	ldd	r27, Z+19	; 0x13
    276c:	84 0d       	add	r24, r4
    276e:	95 1d       	adc	r25, r5
    2770:	a6 1d       	adc	r26, r6
    2772:	b7 1d       	adc	r27, r7
    2774:	80 8b       	std	Z+16, r24	; 0x10
    2776:	91 8b       	std	Z+17, r25	; 0x11
    2778:	a2 8b       	std	Z+18, r26	; 0x12
    277a:	b3 8b       	std	Z+19, r27	; 0x13
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    277c:	86 85       	ldd	r24, Z+14	; 0x0e
    277e:	81 ff       	sbrs	r24, 1
    2780:	2e c0       	rjmp	.+92     	; 0x27de <f_lseek+0x234>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    2782:	c8 01       	movw	r24, r16
    2784:	0e 94 ad 08 	call	0x115a	; 0x115a <create_chain>
    2788:	ab 01       	movw	r20, r22
    278a:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    278c:	41 15       	cp	r20, r1
    278e:	51 05       	cpc	r21, r1
    2790:	61 05       	cpc	r22, r1
    2792:	71 05       	cpc	r23, r1
    2794:	59 f1       	breq	.+86     	; 0x27ec <f_lseek+0x242>
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2796:	4f 3f       	cpi	r20, 0xFF	; 255
    2798:	bf ef       	ldi	r27, 0xFF	; 255
    279a:	5b 07       	cpc	r21, r27
    279c:	6b 07       	cpc	r22, r27
    279e:	7b 07       	cpc	r23, r27
    27a0:	11 f2       	breq	.-124    	; 0x2726 <f_lseek+0x17c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    27a2:	42 30       	cpi	r20, 0x02	; 2
    27a4:	51 05       	cpc	r21, r1
    27a6:	61 05       	cpc	r22, r1
    27a8:	71 05       	cpc	r23, r1
    27aa:	08 f4       	brcc	.+2      	; 0x27ae <f_lseek+0x204>
    27ac:	b1 cf       	rjmp	.-158    	; 0x2710 <f_lseek+0x166>
    27ae:	e9 81       	ldd	r30, Y+1	; 0x01
    27b0:	fa 81       	ldd	r31, Y+2	; 0x02
    27b2:	83 89       	ldd	r24, Z+19	; 0x13
    27b4:	94 89       	ldd	r25, Z+20	; 0x14
    27b6:	a5 89       	ldd	r26, Z+21	; 0x15
    27b8:	b6 89       	ldd	r27, Z+22	; 0x16
    27ba:	48 17       	cp	r20, r24
    27bc:	59 07       	cpc	r21, r25
    27be:	6a 07       	cpc	r22, r26
    27c0:	7b 07       	cpc	r23, r27
    27c2:	08 f0       	brcs	.+2      	; 0x27c6 <f_lseek+0x21c>
    27c4:	a5 cf       	rjmp	.-182    	; 0x2710 <f_lseek+0x166>
					fp->clust = clst;
    27c6:	f8 01       	movw	r30, r16
    27c8:	44 8b       	std	Z+20, r20	; 0x14
    27ca:	55 8b       	std	Z+21, r21	; 0x15
    27cc:	66 8b       	std	Z+22, r22	; 0x16
    27ce:	77 8b       	std	Z+23, r23	; 0x17
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    27d0:	4c 14       	cp	r4, r12
    27d2:	5d 04       	cpc	r5, r13
    27d4:	6e 04       	cpc	r6, r14
    27d6:	7f 04       	cpc	r7, r15
    27d8:	08 f4       	brcc	.+2      	; 0x27dc <f_lseek+0x232>
    27da:	bf cf       	rjmp	.-130    	; 0x275a <f_lseek+0x1b0>
    27dc:	0a c0       	rjmp	.+20     	; 0x27f2 <f_lseek+0x248>
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    27de:	80 81       	ld	r24, Z
    27e0:	91 81       	ldd	r25, Z+1	; 0x01
    27e2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
    27e6:	ab 01       	movw	r20, r22
    27e8:	bc 01       	movw	r22, r24
    27ea:	d5 cf       	rjmp	.-86     	; 0x2796 <f_lseek+0x1ec>
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
						if (clst == 0) {				/* Clip file size in case of disk full */
							ofs = 0; break;
    27ec:	c1 2c       	mov	r12, r1
    27ee:	d1 2c       	mov	r13, r1
    27f0:	76 01       	movw	r14, r12
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
    27f2:	f8 01       	movw	r30, r16
    27f4:	80 89       	ldd	r24, Z+16	; 0x10
    27f6:	91 89       	ldd	r25, Z+17	; 0x11
    27f8:	a2 89       	ldd	r26, Z+18	; 0x12
    27fa:	b3 89       	ldd	r27, Z+19	; 0x13
    27fc:	8c 0d       	add	r24, r12
    27fe:	9d 1d       	adc	r25, r13
    2800:	ae 1d       	adc	r26, r14
    2802:	bf 1d       	adc	r27, r15
    2804:	80 8b       	std	Z+16, r24	; 0x10
    2806:	91 8b       	std	Z+17, r25	; 0x11
    2808:	a2 8b       	std	Z+18, r26	; 0x12
    280a:	b3 8b       	std	Z+19, r27	; 0x13
				if (ofs % SS(fs)) {
    280c:	d7 01       	movw	r26, r14
    280e:	c6 01       	movw	r24, r12
    2810:	91 70       	andi	r25, 0x01	; 1
    2812:	aa 27       	eor	r26, r26
    2814:	bb 27       	eor	r27, r27
    2816:	89 2b       	or	r24, r25
    2818:	8a 2b       	or	r24, r26
    281a:	8b 2b       	or	r24, r27
    281c:	09 f4       	brne	.+2      	; 0x2820 <f_lseek+0x276>
    281e:	99 cf       	rjmp	.-206    	; 0x2752 <f_lseek+0x1a8>
					nsect = clst2sect(fs, clst);	/* Current sector */
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	0e 94 77 01 	call	0x2ee	; 0x2ee <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
    2828:	61 15       	cp	r22, r1
    282a:	71 05       	cpc	r23, r1
    282c:	81 05       	cpc	r24, r1
    282e:	91 05       	cpc	r25, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <f_lseek+0x28a>
    2832:	6e cf       	rjmp	.-292    	; 0x2710 <f_lseek+0x166>
					nsect += (DWORD)(ofs / SS(fs));
    2834:	29 e0       	ldi	r18, 0x09	; 9
    2836:	f6 94       	lsr	r15
    2838:	e7 94       	ror	r14
    283a:	d7 94       	ror	r13
    283c:	c7 94       	ror	r12
    283e:	2a 95       	dec	r18
    2840:	d1 f7       	brne	.-12     	; 0x2836 <f_lseek+0x28c>
    2842:	c6 0e       	add	r12, r22
    2844:	d7 1e       	adc	r13, r23
    2846:	e8 1e       	adc	r14, r24
    2848:	f9 1e       	adc	r15, r25
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    284a:	f8 01       	movw	r30, r16
    284c:	80 89       	ldd	r24, Z+16	; 0x10
    284e:	91 89       	ldd	r25, Z+17	; 0x11
    2850:	a2 89       	ldd	r26, Z+18	; 0x12
    2852:	b3 89       	ldd	r27, Z+19	; 0x13
    2854:	42 85       	ldd	r20, Z+10	; 0x0a
    2856:	53 85       	ldd	r21, Z+11	; 0x0b
    2858:	64 85       	ldd	r22, Z+12	; 0x0c
    285a:	75 85       	ldd	r23, Z+13	; 0x0d
    285c:	48 17       	cp	r20, r24
    285e:	59 07       	cpc	r21, r25
    2860:	6a 07       	cpc	r22, r26
    2862:	7b 07       	cpc	r23, r27
    2864:	38 f4       	brcc	.+14     	; 0x2874 <f_lseek+0x2ca>
			fp->obj.objsize = fp->fptr;
    2866:	82 87       	std	Z+10, r24	; 0x0a
    2868:	93 87       	std	Z+11, r25	; 0x0b
    286a:	a4 87       	std	Z+12, r26	; 0x0c
    286c:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA_MODIFIED;
    286e:	26 85       	ldd	r18, Z+14	; 0x0e
    2870:	20 64       	ori	r18, 0x40	; 64
    2872:	26 87       	std	Z+14, r18	; 0x0e
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    2874:	91 70       	andi	r25, 0x01	; 1
    2876:	aa 27       	eor	r26, r26
    2878:	bb 27       	eor	r27, r27
    287a:	89 2b       	or	r24, r25
    287c:	8a 2b       	or	r24, r26
    287e:	8b 2b       	or	r24, r27
    2880:	71 f0       	breq	.+28     	; 0x289e <f_lseek+0x2f4>
    2882:	f8 01       	movw	r30, r16
    2884:	80 8d       	ldd	r24, Z+24	; 0x18
    2886:	91 8d       	ldd	r25, Z+25	; 0x19
    2888:	a2 8d       	ldd	r26, Z+26	; 0x1a
    288a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    288c:	8c 15       	cp	r24, r12
    288e:	9d 05       	cpc	r25, r13
    2890:	ae 05       	cpc	r26, r14
    2892:	bf 05       	cpc	r27, r15
    2894:	21 f0       	breq	.+8      	; 0x289e <f_lseek+0x2f4>
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
#endif
			fp->sect = nsect;
    2896:	c0 8e       	std	Z+24, r12	; 0x18
    2898:	d1 8e       	std	Z+25, r13	; 0x19
    289a:	e2 8e       	std	Z+26, r14	; 0x1a
    289c:	f3 8e       	std	Z+27, r15	; 0x1b
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	07 c0       	rjmp	.+14     	; 0x28b0 <f_lseek+0x306>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	dc 01       	movw	r26, r24
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    28a8:	c1 2c       	mov	r12, r1
    28aa:	d1 2c       	mov	r13, r1
    28ac:	76 01       	movw	r14, r12
    28ae:	e2 cf       	rjmp	.-60     	; 0x2874 <f_lseek+0x2ca>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
    28b0:	26 96       	adiw	r28, 0x06	; 6
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	df 90       	pop	r13
    28ca:	cf 90       	pop	r12
    28cc:	bf 90       	pop	r11
    28ce:	af 90       	pop	r10
    28d0:	9f 90       	pop	r9
    28d2:	8f 90       	pop	r8
    28d4:	7f 90       	pop	r7
    28d6:	6f 90       	pop	r6
    28d8:	5f 90       	pop	r5
    28da:	4f 90       	pop	r4
    28dc:	08 95       	ret

000028de <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <f_opendir+0xa>
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <f_opendir+0xc>
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	7c 83       	std	Y+4, r23	; 0x04
    28f0:	6b 83       	std	Y+3, r22	; 0x03
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	d9 f1       	breq	.+118    	; 0x296c <f_opendir+0x8e>
    28f6:	8c 01       	movw	r16, r24

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	be 01       	movw	r22, r28
    28fc:	6f 5f       	subi	r22, 0xFF	; 255
    28fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2900:	ce 01       	movw	r24, r28
    2902:	03 96       	adiw	r24, 0x03	; 3
    2904:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <mount_volume>
	if (res == FR_OK) {
    2908:	81 11       	cpse	r24, r1
    290a:	2c c0       	rjmp	.+88     	; 0x2964 <f_opendir+0x86>
		dp->obj.fs = fs;
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	f8 01       	movw	r30, r16
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	80 83       	st	Z, r24
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
    2916:	6b 81       	ldd	r22, Y+3	; 0x03
    2918:	7c 81       	ldd	r23, Y+4	; 0x04
    291a:	c8 01       	movw	r24, r16
    291c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    2920:	81 11       	cpse	r24, r1
    2922:	2a c0       	rjmp	.+84     	; 0x2978 <f_opendir+0x9a>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    2924:	f8 01       	movw	r30, r16
    2926:	87 a1       	ldd	r24, Z+39	; 0x27
    2928:	87 fd       	sbrc	r24, 7
    292a:	0f c0       	rjmp	.+30     	; 0x294a <f_opendir+0x6c>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
    292c:	84 81       	ldd	r24, Z+4	; 0x04
    292e:	84 ff       	sbrs	r24, 4
    2930:	18 c0       	rjmp	.+48     	; 0x2962 <f_opendir+0x84>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
    2932:	62 8d       	ldd	r22, Z+26	; 0x1a
    2934:	73 8d       	ldd	r23, Z+27	; 0x1b
    2936:	e9 81       	ldd	r30, Y+1	; 0x01
    2938:	fa 81       	ldd	r31, Y+2	; 0x02
    293a:	80 81       	ld	r24, Z
    293c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ld_clust.isra.3>
    2940:	f8 01       	movw	r30, r16
    2942:	66 83       	std	Z+6, r22	; 0x06
    2944:	77 83       	std	Z+7, r23	; 0x07
    2946:	80 87       	std	Z+8, r24	; 0x08
    2948:	91 87       	std	Z+9, r25	; 0x09
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dp->obj.id = fs->id;
    294a:	e9 81       	ldd	r30, Y+1	; 0x01
    294c:	fa 81       	ldd	r31, Y+2	; 0x02
    294e:	85 81       	ldd	r24, Z+5	; 0x05
    2950:	96 81       	ldd	r25, Z+6	; 0x06
    2952:	f8 01       	movw	r30, r16
    2954:	93 83       	std	Z+3, r25	; 0x03
    2956:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dp, 0);			/* Rewind directory */
    2958:	c8 01       	movw	r24, r16
    295a:	0e 94 23 04 	call	0x846	; 0x846 <dir_sdi.constprop.15>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    295e:	84 30       	cpi	r24, 0x04	; 4
    2960:	39 f4       	brne	.+14     	; 0x2970 <f_opendir+0x92>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
    2962:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    2964:	f8 01       	movw	r30, r16
    2966:	11 82       	std	Z+1, r1	; 0x01
    2968:	10 82       	st	Z, r1
    296a:	09 c0       	rjmp	.+18     	; 0x297e <f_opendir+0xa0>
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    296c:	89 e0       	ldi	r24, 0x09	; 9
    296e:	07 c0       	rjmp	.+14     	; 0x297e <f_opendir+0xa0>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    2970:	81 11       	cpse	r24, r1
    2972:	f8 cf       	rjmp	.-16     	; 0x2964 <f_opendir+0x86>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	03 c0       	rjmp	.+6      	; 0x297e <f_opendir+0xa0>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2978:	84 30       	cpi	r24, 0x04	; 4
    297a:	99 f3       	breq	.-26     	; 0x2962 <f_opendir+0x84>
    297c:	f3 cf       	rjmp	.-26     	; 0x2964 <f_opendir+0x86>
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */

	LEAVE_FF(fs, res);
}
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret

00002990 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	00 d0       	rcall	.+0      	; 0x299a <f_closedir+0xa>
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
    29a0:	be 01       	movw	r22, r28
    29a2:	6f 5f       	subi	r22, 0xFF	; 255
    29a4:	7f 4f       	sbci	r23, 0xFF	; 255
    29a6:	0e 94 c6 01 	call	0x38c	; 0x38c <validate>
	if (res == FR_OK) {
    29aa:	81 11       	cpse	r24, r1
    29ac:	03 c0       	rjmp	.+6      	; 0x29b4 <f_closedir+0x24>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
    29ae:	f8 01       	movw	r30, r16
    29b0:	11 82       	std	Z+1, r1	; 0x01
    29b2:	10 82       	st	Z, r1
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	08 95       	ret

000029c2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    29c2:	cf 92       	push	r12
    29c4:	df 92       	push	r13
    29c6:	ff 92       	push	r15
    29c8:	0f 93       	push	r16
    29ca:	1f 93       	push	r17
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <f_readdir+0x10>
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	8c 01       	movw	r16, r24
    29d8:	6b 01       	movw	r12, r22
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
    29da:	be 01       	movw	r22, r28
    29dc:	6f 5f       	subi	r22, 0xFF	; 255
    29de:	7f 4f       	sbci	r23, 0xFF	; 255
    29e0:	0e 94 c6 01 	call	0x38c	; 0x38c <validate>
    29e4:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    29e6:	81 11       	cpse	r24, r1
    29e8:	23 c0       	rjmp	.+70     	; 0x2a30 <f_readdir+0x6e>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    29ea:	c8 01       	movw	r24, r16
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
	if (res == FR_OK) {
		if (!fno) {
    29ec:	c1 14       	cp	r12, r1
    29ee:	d1 04       	cpc	r13, r1
    29f0:	19 f4       	brne	.+6      	; 0x29f8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    29f2:	0e 94 23 04 	call	0x846	; 0x846 <dir_sdi.constprop.15>
    29f6:	1b c0       	rjmp	.+54     	; 0x2a2e <f_readdir+0x6c>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
    29f8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <dir_read.constprop.13>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
    29fc:	98 2f       	mov	r25, r24
    29fe:	9b 7f       	andi	r25, 0xFB	; 251
    2a00:	b1 f4       	brne	.+44     	; 0x2a2e <f_readdir+0x6c>
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
    2a02:	f6 01       	movw	r30, r12
    2a04:	11 86       	std	Z+9, r1	; 0x09
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    2a06:	f8 01       	movw	r30, r16
    2a08:	86 89       	ldd	r24, Z+22	; 0x16
    2a0a:	97 89       	ldd	r25, Z+23	; 0x17
    2a0c:	a0 8d       	ldd	r26, Z+24	; 0x18
    2a0e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2a10:	89 2b       	or	r24, r25
    2a12:	8a 2b       	or	r24, r26
    2a14:	8b 2b       	or	r24, r27
    2a16:	21 f0       	breq	.+8      	; 0x2a20 <f_readdir+0x5e>
    2a18:	b6 01       	movw	r22, r12
    2a1a:	c8 01       	movw	r24, r16
    2a1c:	0e 94 1d 02 	call	0x43a	; 0x43a <get_fileinfo.part.5>
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	70 e0       	ldi	r23, 0x00	; 0
    2a24:	c8 01       	movw	r24, r16
    2a26:	0e 94 ee 09 	call	0x13dc	; 0x13dc <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    2a2a:	84 30       	cpi	r24, 0x04	; 4
    2a2c:	09 f0       	breq	.+2      	; 0x2a30 <f_readdir+0x6e>
    2a2e:	f8 2e       	mov	r15, r24
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    2a30:	8f 2d       	mov	r24, r15
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	ff 90       	pop	r15
    2a40:	df 90       	pop	r13
    2a42:	cf 90       	pop	r12
    2a44:	08 95       	ret

00002a46 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    2a46:	ef 92       	push	r14
    2a48:	ff 92       	push	r15
    2a4a:	1f 93       	push	r17
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	aa 97       	sbiw	r28, 0x2a	; 42
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	9a a7       	std	Y+42, r25	; 0x2a
    2a62:	89 a7       	std	Y+41, r24	; 0x29
    2a64:	7b 01       	movw	r14, r22
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	be 01       	movw	r22, r28
    2a6a:	6f 5f       	subi	r22, 0xFF	; 255
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	ce 01       	movw	r24, r28
    2a70:	89 96       	adiw	r24, 0x29	; 41
    2a72:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <mount_volume>
    2a76:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2a78:	81 11       	cpse	r24, r1
    2a7a:	20 c0       	rjmp	.+64     	; 0x2abc <f_stat+0x76>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    2a7c:	69 a5       	ldd	r22, Y+41	; 0x29
    2a7e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a80:	ce 01       	movw	r24, r28
    2a82:	01 96       	adiw	r24, 0x01	; 1
    2a84:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <follow_path>
    2a88:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	17 c0       	rjmp	.+46     	; 0x2abc <f_stat+0x76>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
    2a8e:	88 a5       	ldd	r24, Y+40	; 0x28
    2a90:	87 fd       	sbrc	r24, 7
    2a92:	13 c0       	rjmp	.+38     	; 0x2aba <f_stat+0x74>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
    2a94:	e1 14       	cp	r14, r1
    2a96:	f1 04       	cpc	r15, r1
    2a98:	89 f0       	breq	.+34     	; 0x2abc <f_stat+0x76>
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
    2a9a:	f7 01       	movw	r30, r14
    2a9c:	11 86       	std	Z+9, r1	; 0x09
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    2a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa2:	a9 8d       	ldd	r26, Y+25	; 0x19
    2aa4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2aa6:	89 2b       	or	r24, r25
    2aa8:	8a 2b       	or	r24, r26
    2aaa:	8b 2b       	or	r24, r27
    2aac:	39 f0       	breq	.+14     	; 0x2abc <f_stat+0x76>
    2aae:	b7 01       	movw	r22, r14
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	01 96       	adiw	r24, 0x01	; 1
    2ab4:	0e 94 1d 02 	call	0x43a	; 0x43a <get_fileinfo.part.5>
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <f_stat+0x76>
	if (res == FR_OK) {
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
		if (res == FR_OK) {				/* Follow completed */
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
				res = FR_INVALID_NAME;
    2aba:	16 e0       	ldi	r17, 0x06	; 6
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
    2abc:	81 2f       	mov	r24, r17
    2abe:	aa 96       	adiw	r28, 0x2a	; 42
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	ff 90       	pop	r15
    2ad2:	ef 90       	pop	r14
    2ad4:	08 95       	ret

00002ad6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
    2ad6:	2f 92       	push	r2
    2ad8:	3f 92       	push	r3
    2ada:	4f 92       	push	r4
    2adc:	5f 92       	push	r5
    2ade:	6f 92       	push	r6
    2ae0:	7f 92       	push	r7
    2ae2:	8f 92       	push	r8
    2ae4:	9f 92       	push	r9
    2ae6:	af 92       	push	r10
    2ae8:	bf 92       	push	r11
    2aea:	cf 92       	push	r12
    2aec:	df 92       	push	r13
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	29 97       	sbiw	r28, 0x09	; 9
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	9c 83       	std	Y+4, r25	; 0x04
    2b0c:	8b 83       	std	Y+3, r24	; 0x03
    2b0e:	1b 01       	movw	r2, r22
    2b10:	7a 01       	movw	r14, r20
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	be 01       	movw	r22, r28
    2b16:	6f 5f       	subi	r22, 0xFF	; 255
    2b18:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	03 96       	adiw	r24, 0x03	; 3
    2b1e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <mount_volume>
    2b22:	8d 83       	std	Y+5, r24	; 0x05
	if (res == FR_OK) {
    2b24:	81 11       	cpse	r24, r1
    2b26:	bd c0       	rjmp	.+378    	; 0x2ca2 <f_getfree+0x1cc>
		*fatfs = fs;				/* Return ptr to the fs object */
    2b28:	09 81       	ldd	r16, Y+1	; 0x01
    2b2a:	1a 81       	ldd	r17, Y+2	; 0x02
    2b2c:	d7 01       	movw	r26, r14
    2b2e:	0d 93       	st	X+, r16
    2b30:	1c 93       	st	X, r17
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
    2b32:	f8 01       	movw	r30, r16
    2b34:	87 85       	ldd	r24, Z+15	; 0x0f
    2b36:	90 89       	ldd	r25, Z+16	; 0x10
    2b38:	a1 89       	ldd	r26, Z+17	; 0x11
    2b3a:	b2 89       	ldd	r27, Z+18	; 0x12
    2b3c:	43 88       	ldd	r4, Z+19	; 0x13
    2b3e:	54 88       	ldd	r5, Z+20	; 0x14
    2b40:	65 88       	ldd	r6, Z+21	; 0x15
    2b42:	76 88       	ldd	r7, Z+22	; 0x16
    2b44:	b3 01       	movw	r22, r6
    2b46:	a2 01       	movw	r20, r4
    2b48:	42 50       	subi	r20, 0x02	; 2
    2b4a:	51 09       	sbc	r21, r1
    2b4c:	61 09       	sbc	r22, r1
    2b4e:	71 09       	sbc	r23, r1
    2b50:	48 17       	cp	r20, r24
    2b52:	59 07       	cpc	r21, r25
    2b54:	6a 07       	cpc	r22, r26
    2b56:	7b 07       	cpc	r23, r27
    2b58:	30 f0       	brcs	.+12     	; 0x2b66 <f_getfree+0x90>
			*nclst = fs->free_clst;
    2b5a:	f1 01       	movw	r30, r2
    2b5c:	80 83       	st	Z, r24
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	a2 83       	std	Z+2, r26	; 0x02
    2b62:	b3 83       	std	Z+3, r27	; 0x03
    2b64:	9e c0       	rjmp	.+316    	; 0x2ca2 <f_getfree+0x1cc>
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
    2b66:	80 81       	ld	r24, Z
    2b68:	81 30       	cpi	r24, 0x01	; 1
    2b6a:	a1 f5       	brne	.+104    	; 0x2bd4 <f_getfree+0xfe>
    2b6c:	82 e0       	ldi	r24, 0x02	; 2
    2b6e:	48 2e       	mov	r4, r24
    2b70:	51 2c       	mov	r5, r1
    2b72:	61 2c       	mov	r6, r1
    2b74:	71 2c       	mov	r7, r1
    2b76:	c1 2c       	mov	r12, r1
    2b78:	d1 2c       	mov	r13, r1
    2b7a:	76 01       	movw	r14, r12
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
    2b7c:	b3 01       	movw	r22, r6
    2b7e:	a2 01       	movw	r20, r4
    2b80:	c8 01       	movw	r24, r16
    2b82:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    2b86:	6f 3f       	cpi	r22, 0xFF	; 255
    2b88:	bf ef       	ldi	r27, 0xFF	; 255
    2b8a:	7b 07       	cpc	r23, r27
    2b8c:	8b 07       	cpc	r24, r27
    2b8e:	9b 07       	cpc	r25, r27
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <f_getfree+0xbe>
    2b92:	71 c0       	rjmp	.+226    	; 0x2c76 <f_getfree+0x1a0>
					if (stat == 1) { res = FR_INT_ERR; break; }
    2b94:	61 30       	cpi	r22, 0x01	; 1
    2b96:	71 05       	cpc	r23, r1
    2b98:	81 05       	cpc	r24, r1
    2b9a:	91 05       	cpc	r25, r1
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <f_getfree+0xca>
    2b9e:	6e c0       	rjmp	.+220    	; 0x2c7c <f_getfree+0x1a6>
					if (stat == 0) nfree++;
    2ba0:	67 2b       	or	r22, r23
    2ba2:	68 2b       	or	r22, r24
    2ba4:	69 2b       	or	r22, r25
    2ba6:	29 f4       	brne	.+10     	; 0x2bb2 <f_getfree+0xdc>
    2ba8:	ef ef       	ldi	r30, 0xFF	; 255
    2baa:	ce 1a       	sub	r12, r30
    2bac:	de 0a       	sbc	r13, r30
    2bae:	ee 0a       	sbc	r14, r30
    2bb0:	fe 0a       	sbc	r15, r30
				} while (++clst < fs->n_fatent);
    2bb2:	ff ef       	ldi	r31, 0xFF	; 255
    2bb4:	4f 1a       	sub	r4, r31
    2bb6:	5f 0a       	sbc	r5, r31
    2bb8:	6f 0a       	sbc	r6, r31
    2bba:	7f 0a       	sbc	r7, r31
    2bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc0:	83 89       	ldd	r24, Z+19	; 0x13
    2bc2:	94 89       	ldd	r25, Z+20	; 0x14
    2bc4:	a5 89       	ldd	r26, Z+21	; 0x15
    2bc6:	b6 89       	ldd	r27, Z+22	; 0x16
    2bc8:	48 16       	cp	r4, r24
    2bca:	59 06       	cpc	r5, r25
    2bcc:	6a 06       	cpc	r6, r26
    2bce:	7b 06       	cpc	r7, r27
    2bd0:	a8 f2       	brcs	.-86     	; 0x2b7c <f_getfree+0xa6>
    2bd2:	58 c0       	rjmp	.+176    	; 0x2c84 <f_getfree+0x1ae>
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
    2bd4:	87 8c       	ldd	r8, Z+31	; 0x1f
    2bd6:	90 a0       	ldd	r9, Z+32	; 0x20
    2bd8:	a1 a0       	ldd	r10, Z+33	; 0x21
    2bda:	b2 a0       	ldd	r11, Z+34	; 0x22
					i = 0;					/* Offset in the sector */
    2bdc:	00 e0       	ldi	r16, 0x00	; 0
    2bde:	10 e0       	ldi	r17, 0x00	; 0
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
    2be0:	c1 2c       	mov	r12, r1
    2be2:	d1 2c       	mov	r13, r1
    2be4:	76 01       	movw	r14, r12
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
    2be6:	01 15       	cp	r16, r1
    2be8:	11 05       	cpc	r17, r1
    2bea:	a9 f4       	brne	.+42     	; 0x2c16 <f_getfree+0x140>
							res = move_window(fs, sect++);
    2bec:	d5 01       	movw	r26, r10
    2bee:	c4 01       	movw	r24, r8
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	a1 1d       	adc	r26, r1
    2bf4:	b1 1d       	adc	r27, r1
    2bf6:	8e 83       	std	Y+6, r24	; 0x06
    2bf8:	9f 83       	std	Y+7, r25	; 0x07
    2bfa:	a8 87       	std	Y+8, r26	; 0x08
    2bfc:	b9 87       	std	Y+9, r27	; 0x09
    2bfe:	b5 01       	movw	r22, r10
    2c00:	a4 01       	movw	r20, r8
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	9a 81       	ldd	r25, Y+2	; 0x02
    2c06:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
							if (res != FR_OK) break;
    2c0a:	81 11       	cpse	r24, r1
    2c0c:	3a c0       	rjmp	.+116    	; 0x2c82 <f_getfree+0x1ac>
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
							res = move_window(fs, sect++);
    2c0e:	8e 80       	ldd	r8, Y+6	; 0x06
    2c10:	9f 80       	ldd	r9, Y+7	; 0x07
    2c12:	a8 84       	ldd	r10, Y+8	; 0x08
    2c14:	b9 84       	ldd	r11, Y+9	; 0x09
							if (res != FR_OK) break;
						}
						if (fs->fs_type == FS_FAT16) {
    2c16:	e9 81       	ldd	r30, Y+1	; 0x01
    2c18:	fa 81       	ldd	r31, Y+2	; 0x02
    2c1a:	80 81       	ld	r24, Z
    2c1c:	82 30       	cpi	r24, 0x02	; 2
    2c1e:	71 f4       	brne	.+28     	; 0x2c3c <f_getfree+0x166>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    2c20:	e0 0f       	add	r30, r16
    2c22:	f1 1f       	adc	r31, r17
						if (i == 0) {
							res = move_window(fs, sect++);
							if (res != FR_OK) break;
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(fs->win + i) == 0) nfree++;
    2c24:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c26:	90 a9       	ldd	r25, Z+48	; 0x30
    2c28:	89 2b       	or	r24, r25
    2c2a:	29 f4       	brne	.+10     	; 0x2c36 <f_getfree+0x160>
    2c2c:	9f ef       	ldi	r25, 0xFF	; 255
    2c2e:	c9 1a       	sub	r12, r25
    2c30:	d9 0a       	sbc	r13, r25
    2c32:	e9 0a       	sbc	r14, r25
    2c34:	f9 0a       	sbc	r15, r25
							i += 2;
    2c36:	0e 5f       	subi	r16, 0xFE	; 254
    2c38:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3a:	14 c0       	rjmp	.+40     	; 0x2c64 <f_getfree+0x18e>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
    2c3c:	cf 01       	movw	r24, r30
    2c3e:	8f 96       	adiw	r24, 0x2f	; 47
    2c40:	80 0f       	add	r24, r16
    2c42:	91 1f       	adc	r25, r17
    2c44:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ld_dword>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	bf 70       	andi	r27, 0x0F	; 15
    2c4e:	89 2b       	or	r24, r25
    2c50:	8a 2b       	or	r24, r26
    2c52:	8b 2b       	or	r24, r27
    2c54:	29 f4       	brne	.+10     	; 0x2c60 <f_getfree+0x18a>
    2c56:	af ef       	ldi	r26, 0xFF	; 255
    2c58:	ca 1a       	sub	r12, r26
    2c5a:	da 0a       	sbc	r13, r26
    2c5c:	ea 0a       	sbc	r14, r26
    2c5e:	fa 0a       	sbc	r15, r26
							i += 4;
    2c60:	0c 5f       	subi	r16, 0xFC	; 252
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
						}
						i %= SS(fs);
    2c64:	11 70       	andi	r17, 0x01	; 1
					} while (--clst);
    2c66:	b1 e0       	ldi	r27, 0x01	; 1
    2c68:	4b 1a       	sub	r4, r27
    2c6a:	51 08       	sbc	r5, r1
    2c6c:	61 08       	sbc	r6, r1
    2c6e:	71 08       	sbc	r7, r1
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <f_getfree+0x19e>
    2c72:	b9 cf       	rjmp	.-142    	; 0x2be6 <f_getfree+0x110>
    2c74:	07 c0       	rjmp	.+14     	; 0x2c84 <f_getfree+0x1ae>
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    2c76:	e1 e0       	ldi	r30, 0x01	; 1
    2c78:	ed 83       	std	Y+5, r30	; 0x05
    2c7a:	04 c0       	rjmp	.+8      	; 0x2c84 <f_getfree+0x1ae>
					if (stat == 1) { res = FR_INT_ERR; break; }
    2c7c:	f2 e0       	ldi	r31, 0x02	; 2
    2c7e:	fd 83       	std	Y+5, r31	; 0x05
    2c80:	01 c0       	rjmp	.+2      	; 0x2c84 <f_getfree+0x1ae>
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
							res = move_window(fs, sect++);
    2c82:	8d 83       	std	Y+5, r24	; 0x05
						}
						i %= SS(fs);
					} while (--clst);
				}
			}
			*nclst = nfree;			/* Return the free clusters */
    2c84:	d1 01       	movw	r26, r2
    2c86:	cd 92       	st	X+, r12
    2c88:	dd 92       	st	X+, r13
    2c8a:	ed 92       	st	X+, r14
    2c8c:	fc 92       	st	X, r15
    2c8e:	13 97       	sbiw	r26, 0x03	; 3
			fs->free_clst = nfree;	/* Now free_clst is valid */
    2c90:	e9 81       	ldd	r30, Y+1	; 0x01
    2c92:	fa 81       	ldd	r31, Y+2	; 0x02
    2c94:	c7 86       	std	Z+15, r12	; 0x0f
    2c96:	d0 8a       	std	Z+16, r13	; 0x10
    2c98:	e1 8a       	std	Z+17, r14	; 0x11
    2c9a:	f2 8a       	std	Z+18, r15	; 0x12
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
    2c9c:	84 81       	ldd	r24, Z+4	; 0x04
    2c9e:	81 60       	ori	r24, 0x01	; 1
    2ca0:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	LEAVE_FF(fs, res);
}
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	29 96       	adiw	r28, 0x09	; 9
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	1f 91       	pop	r17
    2cb6:	0f 91       	pop	r16
    2cb8:	ff 90       	pop	r15
    2cba:	ef 90       	pop	r14
    2cbc:	df 90       	pop	r13
    2cbe:	cf 90       	pop	r12
    2cc0:	bf 90       	pop	r11
    2cc2:	af 90       	pop	r10
    2cc4:	9f 90       	pop	r9
    2cc6:	8f 90       	pop	r8
    2cc8:	7f 90       	pop	r7
    2cca:	6f 90       	pop	r6
    2ccc:	5f 90       	pop	r5
    2cce:	4f 90       	pop	r4
    2cd0:	3f 90       	pop	r3
    2cd2:	2f 90       	pop	r2
    2cd4:	08 95       	ret

00002cd6 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
    2cd6:	ef 92       	push	r14
    2cd8:	ff 92       	push	r15
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <f_truncate+0xe>
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	7c 01       	movw	r14, r24
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    2cea:	be 01       	movw	r22, r28
    2cec:	6f 5f       	subi	r22, 0xFF	; 255
    2cee:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf0:	0e 94 c6 01 	call	0x38c	; 0x38c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
    2cf4:	81 11       	cpse	r24, r1
    2cf6:	6c c0       	rjmp	.+216    	; 0x2dd0 <f_truncate+0xfa>
    2cf8:	f7 01       	movw	r30, r14
    2cfa:	17 85       	ldd	r17, Z+15	; 0x0f
    2cfc:	11 11       	cpse	r17, r1
    2cfe:	63 c0       	rjmp	.+198    	; 0x2dc6 <f_truncate+0xf0>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2d00:	86 85       	ldd	r24, Z+14	; 0x0e
    2d02:	81 ff       	sbrs	r24, 1
    2d04:	62 c0       	rjmp	.+196    	; 0x2dca <f_truncate+0xf4>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
    2d06:	80 89       	ldd	r24, Z+16	; 0x10
    2d08:	91 89       	ldd	r25, Z+17	; 0x11
    2d0a:	a2 89       	ldd	r26, Z+18	; 0x12
    2d0c:	b3 89       	ldd	r27, Z+19	; 0x13
    2d0e:	42 85       	ldd	r20, Z+10	; 0x0a
    2d10:	53 85       	ldd	r21, Z+11	; 0x0b
    2d12:	64 85       	ldd	r22, Z+12	; 0x0c
    2d14:	75 85       	ldd	r23, Z+13	; 0x0d
    2d16:	84 17       	cp	r24, r20
    2d18:	95 07       	cpc	r25, r21
    2d1a:	a6 07       	cpc	r26, r22
    2d1c:	b7 07       	cpc	r27, r23
    2d1e:	08 f0       	brcs	.+2      	; 0x2d22 <f_truncate+0x4c>
    2d20:	56 c0       	rjmp	.+172    	; 0x2dce <f_truncate+0xf8>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    2d22:	89 2b       	or	r24, r25
    2d24:	8a 2b       	or	r24, r26
    2d26:	8b 2b       	or	r24, r27
    2d28:	89 f4       	brne	.+34     	; 0x2d4c <f_truncate+0x76>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    2d2a:	46 81       	ldd	r20, Z+6	; 0x06
    2d2c:	57 81       	ldd	r21, Z+7	; 0x07
    2d2e:	60 85       	ldd	r22, Z+8	; 0x08
    2d30:	71 85       	ldd	r23, Z+9	; 0x09
    2d32:	00 e0       	ldi	r16, 0x00	; 0
    2d34:	10 e0       	ldi	r17, 0x00	; 0
    2d36:	98 01       	movw	r18, r16
    2d38:	c7 01       	movw	r24, r14
    2d3a:	0e 94 86 0c 	call	0x190c	; 0x190c <remove_chain>
    2d3e:	18 2f       	mov	r17, r24
			fp->obj.sclust = 0;
    2d40:	f7 01       	movw	r30, r14
    2d42:	16 82       	std	Z+6, r1	; 0x06
    2d44:	17 82       	std	Z+7, r1	; 0x07
    2d46:	10 86       	std	Z+8, r1	; 0x08
    2d48:	11 86       	std	Z+9, r1	; 0x09
    2d4a:	2e c0       	rjmp	.+92     	; 0x2da8 <f_truncate+0xd2>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
    2d4c:	f7 01       	movw	r30, r14
    2d4e:	44 89       	ldd	r20, Z+20	; 0x14
    2d50:	55 89       	ldd	r21, Z+21	; 0x15
    2d52:	66 89       	ldd	r22, Z+22	; 0x16
    2d54:	77 89       	ldd	r23, Z+23	; 0x17
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_fat.isra.10>
    2d5e:	ab 01       	movw	r20, r22
    2d60:	bc 01       	movw	r22, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    2d62:	4f 3f       	cpi	r20, 0xFF	; 255
    2d64:	ff ef       	ldi	r31, 0xFF	; 255
    2d66:	5f 07       	cpc	r21, r31
    2d68:	6f 07       	cpc	r22, r31
    2d6a:	7f 07       	cpc	r23, r31
    2d6c:	39 f0       	breq	.+14     	; 0x2d7c <f_truncate+0xa6>
			if (ncl == 1) res = FR_INT_ERR;
    2d6e:	41 30       	cpi	r20, 0x01	; 1
    2d70:	51 05       	cpc	r21, r1
    2d72:	61 05       	cpc	r22, r1
    2d74:	71 05       	cpc	r23, r1
    2d76:	21 f4       	brne	.+8      	; 0x2d80 <f_truncate+0xaa>
    2d78:	12 e0       	ldi	r17, 0x02	; 2
    2d7a:	16 c0       	rjmp	.+44     	; 0x2da8 <f_truncate+0xd2>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    2d7c:	11 e0       	ldi	r17, 0x01	; 1
    2d7e:	14 c0       	rjmp	.+40     	; 0x2da8 <f_truncate+0xd2>
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
    2d80:	e9 81       	ldd	r30, Y+1	; 0x01
    2d82:	fa 81       	ldd	r31, Y+2	; 0x02
    2d84:	83 89       	ldd	r24, Z+19	; 0x13
    2d86:	94 89       	ldd	r25, Z+20	; 0x14
    2d88:	a5 89       	ldd	r26, Z+21	; 0x15
    2d8a:	b6 89       	ldd	r27, Z+22	; 0x16
    2d8c:	48 17       	cp	r20, r24
    2d8e:	59 07       	cpc	r21, r25
    2d90:	6a 07       	cpc	r22, r26
    2d92:	7b 07       	cpc	r23, r27
    2d94:	48 f4       	brcc	.+18     	; 0x2da8 <f_truncate+0xd2>
				res = remove_chain(&fp->obj, ncl, fp->clust);
    2d96:	f7 01       	movw	r30, r14
    2d98:	04 89       	ldd	r16, Z+20	; 0x14
    2d9a:	15 89       	ldd	r17, Z+21	; 0x15
    2d9c:	26 89       	ldd	r18, Z+22	; 0x16
    2d9e:	37 89       	ldd	r19, Z+23	; 0x17
    2da0:	c7 01       	movw	r24, r14
    2da2:	0e 94 86 0c 	call	0x190c	; 0x190c <remove_chain>
    2da6:	18 2f       	mov	r17, r24
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
    2da8:	f7 01       	movw	r30, r14
    2daa:	80 89       	ldd	r24, Z+16	; 0x10
    2dac:	91 89       	ldd	r25, Z+17	; 0x11
    2dae:	a2 89       	ldd	r26, Z+18	; 0x12
    2db0:	b3 89       	ldd	r27, Z+19	; 0x13
    2db2:	82 87       	std	Z+10, r24	; 0x0a
    2db4:	93 87       	std	Z+11, r25	; 0x0b
    2db6:	a4 87       	std	Z+12, r26	; 0x0c
    2db8:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    2dba:	86 85       	ldd	r24, Z+14	; 0x0e
    2dbc:	80 64       	ori	r24, 0x40	; 64
    2dbe:	86 87       	std	Z+14, r24	; 0x0e
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
    2dc0:	11 23       	and	r17, r17
    2dc2:	29 f0       	breq	.+10     	; 0x2dce <f_truncate+0xf8>
    2dc4:	17 87       	std	Z+15, r17	; 0x0f
    2dc6:	81 2f       	mov	r24, r17
    2dc8:	03 c0       	rjmp	.+6      	; 0x2dd0 <f_truncate+0xfa>
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2dca:	87 e0       	ldi	r24, 0x07	; 7
    2dcc:	01 c0       	rjmp	.+2      	; 0x2dd0 <f_truncate+0xfa>
    2dce:	80 e0       	ldi	r24, 0x00	; 0
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	08 95       	ret

00002de2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    2de2:	bf 92       	push	r11
    2de4:	cf 92       	push	r12
    2de6:	df 92       	push	r13
    2de8:	ef 92       	push	r14
    2dea:	ff 92       	push	r15
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	c4 55       	subi	r28, 0x54	; 84
    2dfa:	d1 09       	sbc	r29, r1
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	65 96       	adiw	r28, 0x15	; 21
    2e08:	9f af       	std	Y+63, r25	; 0x3f
    2e0a:	8e af       	std	Y+62, r24	; 0x3e
    2e0c:	65 97       	sbiw	r28, 0x15	; 21
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    2e0e:	42 e0       	ldi	r20, 0x02	; 2
    2e10:	be 01       	movw	r22, r28
    2e12:	6f 5a       	subi	r22, 0xAF	; 175
    2e14:	7f 4f       	sbci	r23, 0xFF	; 255
    2e16:	ce 01       	movw	r24, r28
    2e18:	8d 5a       	subi	r24, 0xAD	; 173
    2e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <mount_volume>
	if (res == FR_OK) {
    2e20:	81 11       	cpse	r24, r1
    2e22:	6e c0       	rjmp	.+220    	; 0x2f00 <f_unlink+0x11e>
		dj.obj.fs = fs;
    2e24:	63 96       	adiw	r28, 0x13	; 19
    2e26:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e28:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e2a:	63 97       	sbiw	r28, 0x13	; 19
    2e2c:	9a a7       	std	Y+42, r25	; 0x2a
    2e2e:	89 a7       	std	Y+41, r24	; 0x29
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
    2e30:	65 96       	adiw	r28, 0x15	; 21
    2e32:	6e ad       	ldd	r22, Y+62	; 0x3e
    2e34:	7f ad       	ldd	r23, Y+63	; 0x3f
    2e36:	65 97       	sbiw	r28, 0x15	; 21
    2e38:	ce 01       	movw	r24, r28
    2e3a:	89 96       	adiw	r24, 0x29	; 41
    2e3c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <follow_path>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    2e40:	81 11       	cpse	r24, r1
    2e42:	5e c0       	rjmp	.+188    	; 0x2f00 <f_unlink+0x11e>
			if (dj.fn[NSFLAG] & NS_NONAME) {
    2e44:	61 96       	adiw	r28, 0x11	; 17
    2e46:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e48:	61 97       	sbiw	r28, 0x11	; 17
    2e4a:	87 fd       	sbrc	r24, 7
    2e4c:	28 c0       	rjmp	.+80     	; 0x2e9e <f_unlink+0xbc>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    2e4e:	bd a4       	ldd	r11, Y+45	; 0x2d
    2e50:	b0 fc       	sbrc	r11, 0
    2e52:	27 c0       	rjmp	.+78     	; 0x2ea2 <f_unlink+0xc0>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    2e54:	63 96       	adiw	r28, 0x13	; 19
    2e56:	0e ad       	ldd	r16, Y+62	; 0x3e
    2e58:	1f ad       	ldd	r17, Y+63	; 0x3f
    2e5a:	63 97       	sbiw	r28, 0x13	; 19
    2e5c:	25 96       	adiw	r28, 0x05	; 5
    2e5e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2e60:	7f ad       	ldd	r23, Y+63	; 0x3f
    2e62:	25 97       	sbiw	r28, 0x05	; 5
    2e64:	f8 01       	movw	r30, r16
    2e66:	80 81       	ld	r24, Z
    2e68:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ld_clust.isra.3>
    2e6c:	6b 01       	movw	r12, r22
    2e6e:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    2e70:	b4 fe       	sbrs	r11, 4
    2e72:	19 c0       	rjmp	.+50     	; 0x2ea6 <f_unlink+0xc4>
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    2e74:	1a 83       	std	Y+2, r17	; 0x02
    2e76:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    2e78:	cf 82       	std	Y+7, r12	; 0x07
    2e7a:	d8 86       	std	Y+8, r13	; 0x08
    2e7c:	e9 86       	std	Y+9, r14	; 0x09
    2e7e:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    2e80:	ce 01       	movw	r24, r28
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	0e 94 23 04 	call	0x846	; 0x846 <dir_sdi.constprop.15>
						if (res == FR_OK) {
    2e88:	81 11       	cpse	r24, r1
    2e8a:	3a c0       	rjmp	.+116    	; 0x2f00 <f_unlink+0x11e>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    2e94:	88 23       	and	r24, r24
    2e96:	29 f0       	breq	.+10     	; 0x2ea2 <f_unlink+0xc0>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    2e98:	84 30       	cpi	r24, 0x04	; 4
    2e9a:	29 f0       	breq	.+10     	; 0x2ea6 <f_unlink+0xc4>
    2e9c:	31 c0       	rjmp	.+98     	; 0x2f00 <f_unlink+0x11e>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    2e9e:	86 e0       	ldi	r24, 0x06	; 6
    2ea0:	2f c0       	rjmp	.+94     	; 0x2f00 <f_unlink+0x11e>
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    2ea2:	87 e0       	ldi	r24, 0x07	; 7
    2ea4:	2d c0       	rjmp	.+90     	; 0x2f00 <f_unlink+0x11e>
static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    2ea6:	09 a5       	ldd	r16, Y+41	; 0x29
    2ea8:	1a a5       	ldd	r17, Y+42	; 0x2a
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    2eaa:	23 96       	adiw	r28, 0x03	; 3
    2eac:	4c ad       	ldd	r20, Y+60	; 0x3c
    2eae:	5d ad       	ldd	r21, Y+61	; 0x3d
    2eb0:	6e ad       	ldd	r22, Y+62	; 0x3e
    2eb2:	7f ad       	ldd	r23, Y+63	; 0x3f
    2eb4:	23 97       	sbiw	r28, 0x03	; 3
    2eb6:	c8 01       	movw	r24, r16
    2eb8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
	if (res == FR_OK) {
    2ebc:	81 11       	cpse	r24, r1
    2ebe:	20 c0       	rjmp	.+64     	; 0x2f00 <f_unlink+0x11e>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
    2ec0:	25 96       	adiw	r28, 0x05	; 5
    2ec2:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ec4:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ec6:	25 97       	sbiw	r28, 0x05	; 5
    2ec8:	85 ee       	ldi	r24, 0xE5	; 229
    2eca:	80 83       	st	Z, r24
		fs->wflag = 1;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	f8 01       	movw	r30, r16
    2ed0:	83 83       	std	Z+3, r24	; 0x03
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    2ed2:	c1 14       	cp	r12, r1
    2ed4:	d1 04       	cpc	r13, r1
    2ed6:	e1 04       	cpc	r14, r1
    2ed8:	f1 04       	cpc	r15, r1
    2eda:	39 f4       	brne	.+14     	; 0x2eea <f_unlink+0x108>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    2edc:	63 96       	adiw	r28, 0x13	; 19
    2ede:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ee0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ee2:	63 97       	sbiw	r28, 0x13	; 19
    2ee4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <sync_fs>
    2ee8:	0b c0       	rjmp	.+22     	; 0x2f00 <f_unlink+0x11e>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    2eea:	00 e0       	ldi	r16, 0x00	; 0
    2eec:	10 e0       	ldi	r17, 0x00	; 0
    2eee:	98 01       	movw	r18, r16
    2ef0:	b7 01       	movw	r22, r14
    2ef2:	a6 01       	movw	r20, r12
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	89 96       	adiw	r24, 0x29	; 41
    2ef8:	0e 94 86 0c 	call	0x190c	; 0x190c <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    2efc:	88 23       	and	r24, r24
    2efe:	71 f3       	breq	.-36     	; 0x2edc <f_unlink+0xfa>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    2f00:	cc 5a       	subi	r28, 0xAC	; 172
    2f02:	df 4f       	sbci	r29, 0xFF	; 255
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	ff 90       	pop	r15
    2f18:	ef 90       	pop	r14
    2f1a:	df 90       	pop	r13
    2f1c:	cf 90       	pop	r12
    2f1e:	bf 90       	pop	r11
    2f20:	08 95       	ret

00002f22 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    2f22:	8f 92       	push	r8
    2f24:	9f 92       	push	r9
    2f26:	af 92       	push	r10
    2f28:	bf 92       	push	r11
    2f2a:	df 92       	push	r13
    2f2c:	ef 92       	push	r14
    2f2e:	ff 92       	push	r15
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	ea 97       	sbiw	r28, 0x3a	; 58
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	9a af       	std	Y+58, r25	; 0x3a
    2f4a:	89 af       	std	Y+57, r24	; 0x39
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    2f4c:	42 e0       	ldi	r20, 0x02	; 2
    2f4e:	be 01       	movw	r22, r28
    2f50:	69 5c       	subi	r22, 0xC9	; 201
    2f52:	7f 4f       	sbci	r23, 0xFF	; 255
    2f54:	ce 01       	movw	r24, r28
    2f56:	c9 96       	adiw	r24, 0x39	; 57
    2f58:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <mount_volume>
    2f5c:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    2f5e:	81 11       	cpse	r24, r1
    2f60:	ae c0       	rjmp	.+348    	; 0x30be <f_mkdir+0x19c>
		dj.obj.fs = fs;
    2f62:	8f a9       	ldd	r24, Y+55	; 0x37
    2f64:	98 ad       	ldd	r25, Y+56	; 0x38
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
    2f6a:	69 ad       	ldd	r22, Y+57	; 0x39
    2f6c:	7a ad       	ldd	r23, Y+58	; 0x3a
    2f6e:	ce 01       	movw	r24, r28
    2f70:	01 96       	adiw	r24, 0x01	; 1
    2f72:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <follow_path>
    2f76:	f8 2e       	mov	r15, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    2f78:	88 23       	and	r24, r24
    2f7a:	31 f1       	breq	.+76     	; 0x2fc8 <f_mkdir+0xa6>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
    2f7c:	84 e0       	ldi	r24, 0x04	; 4
    2f7e:	f8 12       	cpse	r15, r24
    2f80:	9e c0       	rjmp	.+316    	; 0x30be <f_mkdir+0x19c>
			sobj.fs = fs;						/* New object id to create a new chain */
    2f82:	8f a9       	ldd	r24, Y+55	; 0x37
    2f84:	98 ad       	ldd	r25, Y+56	; 0x38
    2f86:	9a a7       	std	Y+42, r25	; 0x2a
    2f88:	89 a7       	std	Y+41, r24	; 0x29
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	ba 01       	movw	r22, r20
    2f90:	ce 01       	movw	r24, r28
    2f92:	89 96       	adiw	r24, 0x29	; 41
    2f94:	0e 94 ad 08 	call	0x115a	; 0x115a <create_chain>
    2f98:	4b 01       	movw	r8, r22
    2f9a:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    2f9c:	61 15       	cp	r22, r1
    2f9e:	71 05       	cpc	r23, r1
    2fa0:	81 05       	cpc	r24, r1
    2fa2:	91 05       	cpc	r25, r1
    2fa4:	a1 f0       	breq	.+40     	; 0x2fce <f_mkdir+0xac>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    2fa6:	61 30       	cpi	r22, 0x01	; 1
    2fa8:	71 05       	cpc	r23, r1
    2faa:	81 05       	cpc	r24, r1
    2fac:	91 05       	cpc	r25, r1
    2fae:	91 f4       	brne	.+36     	; 0x2fd4 <f_mkdir+0xb2>
    2fb0:	82 e0       	ldi	r24, 0x02	; 2
    2fb2:	f8 2e       	mov	r15, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    2fb4:	00 e0       	ldi	r16, 0x00	; 0
    2fb6:	10 e0       	ldi	r17, 0x00	; 0
    2fb8:	98 01       	movw	r18, r16
    2fba:	b5 01       	movw	r22, r10
    2fbc:	a4 01       	movw	r20, r8
    2fbe:	ce 01       	movw	r24, r28
    2fc0:	89 96       	adiw	r24, 0x29	; 41
    2fc2:	0e 94 86 0c 	call	0x190c	; 0x190c <remove_chain>
    2fc6:	7b c0       	rjmp	.+246    	; 0x30be <f_mkdir+0x19c>
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    2fc8:	28 e0       	ldi	r18, 0x08	; 8
    2fca:	f2 2e       	mov	r15, r18
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
    2fcc:	78 c0       	rjmp	.+240    	; 0x30be <f_mkdir+0x19c>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    2fce:	97 e0       	ldi	r25, 0x07	; 7
    2fd0:	f9 2e       	mov	r15, r25
    2fd2:	f0 cf       	rjmp	.-32     	; 0x2fb4 <f_mkdir+0x92>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    2fd4:	6f 3f       	cpi	r22, 0xFF	; 255
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    2fda:	9f 4f       	sbci	r25, 0xFF	; 255
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <f_mkdir+0xbe>
    2fde:	6c c0       	rjmp	.+216    	; 0x30b8 <f_mkdir+0x196>
			tm = GET_FATTIME();
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    2fe0:	b5 01       	movw	r22, r10
    2fe2:	a4 01       	movw	r20, r8
    2fe4:	8f a9       	ldd	r24, Y+55	; 0x37
    2fe6:	98 ad       	ldd	r25, Y+56	; 0x38
    2fe8:	0e 94 a2 04 	call	0x944	; 0x944 <dir_clear>
    2fec:	f8 2e       	mov	r15, r24
				if (res == FR_OK) {
    2fee:	81 11       	cpse	r24, r1
    2ff0:	e1 cf       	rjmp	.-62     	; 0x2fb4 <f_mkdir+0x92>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    2ff2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ff4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	bf 96       	adiw	r30, 0x2f	; 47
    2ffa:	ca 96       	adiw	r24, 0x3a	; 58
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    2ffc:	20 e2       	ldi	r18, 0x20	; 32
    2ffe:	21 93       	st	Z+, r18
	} while (--cnt);
    3000:	e8 17       	cp	r30, r24
    3002:	f9 07       	cpc	r31, r25
    3004:	e1 f7       	brne	.-8      	; 0x2ffe <f_mkdir+0xdc>
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
				if (res == FR_OK) {
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
						fs->win[DIR_Name] = '.';
    3006:	8f a9       	ldd	r24, Y+55	; 0x37
    3008:	98 ad       	ldd	r25, Y+56	; 0x38
    300a:	1e e2       	ldi	r17, 0x2E	; 46
    300c:	fc 01       	movw	r30, r24
    300e:	17 a7       	std	Z+47, r17	; 0x2f
						fs->win[DIR_Attr] = AM_DIR;
    3010:	00 e1       	ldi	r16, 0x10	; 16
    3012:	02 af       	std	Z+58, r16	; 0x3a
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3014:	eb 5b       	subi	r30, 0xBB	; 187
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    301a:	31 96       	adiw	r30, 0x01	; 1
    301c:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    301e:	31 96       	adiw	r30, 0x01	; 1
    3020:	32 e3       	ldi	r19, 0x32	; 50
    3022:	d3 2e       	mov	r13, r19
    3024:	d0 82       	st	Z, r13
	*ptr++ = (BYTE)val;
    3026:	31 96       	adiw	r30, 0x01	; 1
    3028:	40 e5       	ldi	r20, 0x50	; 80
    302a:	e4 2e       	mov	r14, r20
    302c:	e0 82       	st	Z, r14
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
						fs->win[DIR_Name] = '.';
						fs->win[DIR_Attr] = AM_DIR;
						st_dword(fs->win + DIR_ModTime, tm);
						st_clust(fs, fs->win, dcl);
    302e:	bc 01       	movw	r22, r24
    3030:	61 5d       	subi	r22, 0xD1	; 209
    3032:	7f 4f       	sbci	r23, 0xFF	; 255
    3034:	a5 01       	movw	r20, r10
    3036:	94 01       	movw	r18, r8
    3038:	0e 94 10 02 	call	0x420	; 0x420 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    303c:	8f a9       	ldd	r24, Y+55	; 0x37
    303e:	98 ad       	ldd	r25, Y+56	; 0x38
    3040:	bc 01       	movw	r22, r24
    3042:	61 5d       	subi	r22, 0xD1	; 209
    3044:	7f 4f       	sbci	r23, 0xFF	; 255
    3046:	40 e2       	ldi	r20, 0x20	; 32
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	81 5b       	subi	r24, 0xB1	; 177
    304c:	9f 4f       	sbci	r25, 0xFF	; 255
    304e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    3052:	8f a9       	ldd	r24, Y+55	; 0x37
    3054:	98 ad       	ldd	r25, Y+56	; 0x38
    3056:	fc 01       	movw	r30, r24
    3058:	e0 5b       	subi	r30, 0xB0	; 176
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    305e:	2f 81       	ldd	r18, Y+7	; 0x07
    3060:	38 85       	ldd	r19, Y+8	; 0x08
    3062:	49 85       	ldd	r20, Y+9	; 0x09
    3064:	5a 85       	ldd	r21, Y+10	; 0x0a
    3066:	bc 01       	movw	r22, r24
    3068:	61 5b       	subi	r22, 0xB1	; 177
    306a:	7f 4f       	sbci	r23, 0xFF	; 255
    306c:	0e 94 10 02 	call	0x420	; 0x420 <st_clust.isra.4>
						fs->wflag = 1;
    3070:	ef a9       	ldd	r30, Y+55	; 0x37
    3072:	f8 ad       	ldd	r31, Y+56	; 0x38
    3074:	11 e0       	ldi	r17, 0x01	; 1
    3076:	13 83       	std	Z+3, r17	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    3078:	ce 01       	movw	r24, r28
    307a:	01 96       	adiw	r24, 0x01	; 1
    307c:	0e 94 2d 0c 	call	0x185a	; 0x185a <dir_register>
    3080:	f8 2e       	mov	r15, r24
				}
			}
			if (res == FR_OK) {
    3082:	81 11       	cpse	r24, r1
    3084:	97 cf       	rjmp	.-210    	; 0x2fb4 <f_mkdir+0x92>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    3086:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3088:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    308a:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    308c:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    308e:	d0 8e       	std	Z+24, r13	; 0x18
	*ptr++ = (BYTE)val;
    3090:	e1 8e       	std	Z+25, r14	; 0x19
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    3092:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3094:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3096:	a5 01       	movw	r20, r10
    3098:	94 01       	movw	r18, r8
    309a:	8f a9       	ldd	r24, Y+55	; 0x37
    309c:	98 ad       	ldd	r25, Y+56	; 0x38
    309e:	0e 94 10 02 	call	0x420	; 0x420 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    30a2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    30a4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    30a6:	03 87       	std	Z+11, r16	; 0x0b
					fs->wflag = 1;
    30a8:	8f a9       	ldd	r24, Y+55	; 0x37
    30aa:	98 ad       	ldd	r25, Y+56	; 0x38
    30ac:	fc 01       	movw	r30, r24
    30ae:	13 83       	std	Z+3, r17	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    30b0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <sync_fs>
    30b4:	f8 2e       	mov	r15, r24
    30b6:	03 c0       	rjmp	.+6      	; 0x30be <f_mkdir+0x19c>
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    30b8:	ff 24       	eor	r15, r15
    30ba:	f3 94       	inc	r15
    30bc:	7b cf       	rjmp	.-266    	; 0x2fb4 <f_mkdir+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    30be:	8f 2d       	mov	r24, r15
    30c0:	ea 96       	adiw	r28, 0x3a	; 58
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	df 91       	pop	r29
    30ce:	cf 91       	pop	r28
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	ff 90       	pop	r15
    30d6:	ef 90       	pop	r14
    30d8:	df 90       	pop	r13
    30da:	bf 90       	pop	r11
    30dc:	af 90       	pop	r10
    30de:	9f 90       	pop	r9
    30e0:	8f 90       	pop	r8
    30e2:	08 95       	ret

000030e4 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    30e4:	df 92       	push	r13
    30e6:	ef 92       	push	r14
    30e8:	ff 92       	push	r15
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	cf 93       	push	r28
    30f0:	df 93       	push	r29
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	c6 57       	subi	r28, 0x76	; 118
    30f8:	d1 09       	sbc	r29, r1
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	e5 96       	adiw	r28, 0x35	; 53
    3106:	9f af       	std	Y+63, r25	; 0x3f
    3108:	8e af       	std	Y+62, r24	; 0x3e
    310a:	e5 97       	sbiw	r28, 0x35	; 53
    310c:	e7 96       	adiw	r28, 0x37	; 55
    310e:	7f af       	std	Y+63, r23	; 0x3f
    3110:	6e af       	std	Y+62, r22	; 0x3e
    3112:	e7 97       	sbiw	r28, 0x37	; 55
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    3114:	ce 01       	movw	r24, r28
    3116:	8b 58       	subi	r24, 0x8B	; 139
    3118:	9f 4f       	sbci	r25, 0xFF	; 255
    311a:	0e 94 9f 01 	call	0x33e	; 0x33e <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    311e:	42 e0       	ldi	r20, 0x02	; 2
    3120:	be 01       	movw	r22, r28
    3122:	6f 58       	subi	r22, 0x8F	; 143
    3124:	7f 4f       	sbci	r23, 0xFF	; 255
    3126:	ce 01       	movw	r24, r28
    3128:	8d 58       	subi	r24, 0x8D	; 141
    312a:	9f 4f       	sbci	r25, 0xFF	; 255
    312c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <mount_volume>
	if (res == FR_OK) {
    3130:	81 11       	cpse	r24, r1
    3132:	da c0       	rjmp	.+436    	; 0x32e8 <f_rename+0x204>
		djo.obj.fs = fs;
    3134:	e3 96       	adiw	r28, 0x33	; 51
    3136:	8e ad       	ldd	r24, Y+62	; 0x3e
    3138:	9f ad       	ldd	r25, Y+63	; 0x3f
    313a:	e3 97       	sbiw	r28, 0x33	; 51
    313c:	9a a7       	std	Y+42, r25	; 0x2a
    313e:	89 a7       	std	Y+41, r24	; 0x29
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
    3140:	e5 96       	adiw	r28, 0x35	; 53
    3142:	6e ad       	ldd	r22, Y+62	; 0x3e
    3144:	7f ad       	ldd	r23, Y+63	; 0x3f
    3146:	e5 97       	sbiw	r28, 0x35	; 53
    3148:	ce 01       	movw	r24, r28
    314a:	89 96       	adiw	r24, 0x29	; 41
    314c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    3150:	81 11       	cpse	r24, r1
    3152:	ca c0       	rjmp	.+404    	; 0x32e8 <f_rename+0x204>
    3154:	61 96       	adiw	r28, 0x11	; 17
    3156:	8f ad       	ldd	r24, Y+63	; 0x3f
    3158:	61 97       	sbiw	r28, 0x11	; 17
    315a:	80 7a       	andi	r24, 0xA0	; 160
    315c:	09 f0       	breq	.+2      	; 0x3160 <f_rename+0x7c>
    315e:	a2 c0       	rjmp	.+324    	; 0x32a4 <f_rename+0x1c0>
    3160:	25 96       	adiw	r28, 0x05	; 5
    3162:	6e ad       	ldd	r22, Y+62	; 0x3e
    3164:	7f ad       	ldd	r23, Y+63	; 0x3f
    3166:	25 97       	sbiw	r28, 0x05	; 5
    3168:	40 e2       	ldi	r20, 0x20	; 32
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	ce 01       	movw	r24, r28
    316e:	8f 5a       	subi	r24, 0xAF	; 175
    3170:	9f 4f       	sbci	r25, 0xFF	; 255
    3172:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <mem_cpy.part.0>
    3176:	48 e2       	ldi	r20, 0x28	; 40
    3178:	50 e0       	ldi	r21, 0x00	; 0
    317a:	be 01       	movw	r22, r28
    317c:	67 5d       	subi	r22, 0xD7	; 215
    317e:	7f 4f       	sbci	r23, 0xFF	; 255
    3180:	ce 01       	movw	r24, r28
    3182:	01 96       	adiw	r24, 0x01	; 1
    3184:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    3188:	e7 96       	adiw	r28, 0x37	; 55
    318a:	6e ad       	ldd	r22, Y+62	; 0x3e
    318c:	7f ad       	ldd	r23, Y+63	; 0x3f
    318e:	e7 97       	sbiw	r28, 0x37	; 55
    3190:	ce 01       	movw	r24, r28
    3192:	01 96       	adiw	r24, 0x01	; 1
    3194:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    3198:	81 11       	cpse	r24, r1
    319a:	1d c0       	rjmp	.+58     	; 0x31d6 <f_rename+0xf2>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    319c:	4f 81       	ldd	r20, Y+7	; 0x07
    319e:	58 85       	ldd	r21, Y+8	; 0x08
    31a0:	69 85       	ldd	r22, Y+9	; 0x09
    31a2:	7a 85       	ldd	r23, Y+10	; 0x0a
    31a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31a6:	98 a9       	ldd	r25, Y+48	; 0x30
    31a8:	a9 a9       	ldd	r26, Y+49	; 0x31
    31aa:	ba a9       	ldd	r27, Y+50	; 0x32
    31ac:	48 17       	cp	r20, r24
    31ae:	59 07       	cpc	r21, r25
    31b0:	6a 07       	cpc	r22, r26
    31b2:	7b 07       	cpc	r23, r27
    31b4:	09 f0       	breq	.+2      	; 0x31b8 <f_rename+0xd4>
    31b6:	95 c0       	rjmp	.+298    	; 0x32e2 <f_rename+0x1fe>
    31b8:	4f 85       	ldd	r20, Y+15	; 0x0f
    31ba:	58 89       	ldd	r21, Y+16	; 0x10
    31bc:	69 89       	ldd	r22, Y+17	; 0x11
    31be:	7a 89       	ldd	r23, Y+18	; 0x12
    31c0:	8f a9       	ldd	r24, Y+55	; 0x37
    31c2:	98 ad       	ldd	r25, Y+56	; 0x38
    31c4:	a9 ad       	ldd	r26, Y+57	; 0x39
    31c6:	ba ad       	ldd	r27, Y+58	; 0x3a
    31c8:	48 17       	cp	r20, r24
    31ca:	59 07       	cpc	r21, r25
    31cc:	6a 07       	cpc	r22, r26
    31ce:	7b 07       	cpc	r23, r27
    31d0:	09 f0       	breq	.+2      	; 0x31d4 <f_rename+0xf0>
    31d2:	87 c0       	rjmp	.+270    	; 0x32e2 <f_rename+0x1fe>
    31d4:	03 c0       	rjmp	.+6      	; 0x31dc <f_rename+0xf8>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    31d6:	84 30       	cpi	r24, 0x04	; 4
    31d8:	09 f0       	breq	.+2      	; 0x31dc <f_rename+0xf8>
    31da:	86 c0       	rjmp	.+268    	; 0x32e8 <f_rename+0x204>
					res = dir_register(&djn);			/* Register the new entry */
    31dc:	ce 01       	movw	r24, r28
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	0e 94 2d 0c 	call	0x185a	; 0x185a <dir_register>
					if (res == FR_OK) {
    31e4:	81 11       	cpse	r24, r1
    31e6:	80 c0       	rjmp	.+256    	; 0x32e8 <f_rename+0x204>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    31e8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    31ea:	1c 8d       	ldd	r17, Y+28	; 0x1c
    31ec:	61 e5       	ldi	r22, 0x51	; 81
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	6c 0f       	add	r22, r28
    31f2:	7d 1f       	adc	r23, r29
    31f4:	63 5f       	subi	r22, 0xF3	; 243
    31f6:	7f 4f       	sbci	r23, 0xFF	; 255
    31f8:	43 e1       	ldi	r20, 0x13	; 19
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	c8 01       	movw	r24, r16
    31fe:	0d 96       	adiw	r24, 0x0d	; 13
    3200:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    3204:	6d 96       	adiw	r28, 0x1d	; 29
    3206:	8f ad       	ldd	r24, Y+63	; 0x3f
    3208:	6d 97       	sbiw	r28, 0x1d	; 29
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    320a:	84 ff       	sbrs	r24, 4
    320c:	80 62       	ori	r24, 0x20	; 32
    320e:	f8 01       	movw	r30, r16
    3210:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    3212:	e3 96       	adiw	r28, 0x33	; 51
    3214:	ee ac       	ldd	r14, Y+62	; 0x3e
    3216:	ff ac       	ldd	r15, Y+63	; 0x3f
    3218:	e3 97       	sbiw	r28, 0x33	; 51
    321a:	dd 24       	eor	r13, r13
    321c:	d3 94       	inc	r13
    321e:	f7 01       	movw	r30, r14
    3220:	d3 82       	std	Z+3, r13	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    3222:	f8 01       	movw	r30, r16
    3224:	83 85       	ldd	r24, Z+11	; 0x0b
    3226:	84 ff       	sbrs	r24, 4
    3228:	3f c0       	rjmp	.+126    	; 0x32a8 <f_rename+0x1c4>
    322a:	4f a5       	ldd	r20, Y+47	; 0x2f
    322c:	58 a9       	ldd	r21, Y+48	; 0x30
    322e:	69 a9       	ldd	r22, Y+49	; 0x31
    3230:	7a a9       	ldd	r23, Y+50	; 0x32
    3232:	8f 81       	ldd	r24, Y+7	; 0x07
    3234:	98 85       	ldd	r25, Y+8	; 0x08
    3236:	a9 85       	ldd	r26, Y+9	; 0x09
    3238:	ba 85       	ldd	r27, Y+10	; 0x0a
    323a:	48 17       	cp	r20, r24
    323c:	59 07       	cpc	r21, r25
    323e:	6a 07       	cpc	r22, r26
    3240:	7b 07       	cpc	r23, r27
    3242:	91 f1       	breq	.+100    	; 0x32a8 <f_rename+0x1c4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    3244:	b8 01       	movw	r22, r16
    3246:	f7 01       	movw	r30, r14
    3248:	80 81       	ld	r24, Z
    324a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ld_clust.isra.3>
    324e:	ab 01       	movw	r20, r22
    3250:	bc 01       	movw	r22, r24
    3252:	c7 01       	movw	r24, r14
    3254:	0e 94 77 01 	call	0x2ee	; 0x2ee <clst2sect>
    3258:	ab 01       	movw	r20, r22
    325a:	bc 01       	movw	r22, r24
							if (sect == 0) {
    325c:	41 15       	cp	r20, r1
    325e:	51 05       	cpc	r21, r1
    3260:	61 05       	cpc	r22, r1
    3262:	71 05       	cpc	r23, r1
    3264:	09 f4       	brne	.+2      	; 0x3268 <f_rename+0x184>
    3266:	3f c0       	rjmp	.+126    	; 0x32e6 <f_rename+0x202>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    3268:	c7 01       	movw	r24, r14
    326a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    326e:	81 11       	cpse	r24, r1
    3270:	3b c0       	rjmp	.+118    	; 0x32e8 <f_rename+0x204>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    3272:	e3 96       	adiw	r28, 0x33	; 51
    3274:	8e ad       	ldd	r24, Y+62	; 0x3e
    3276:	9f ad       	ldd	r25, Y+63	; 0x3f
    3278:	e3 97       	sbiw	r28, 0x33	; 51
								if (res == FR_OK && dir[1] == '.') {
    327a:	fc 01       	movw	r30, r24
    327c:	e0 5b       	subi	r30, 0xB0	; 176
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	20 81       	ld	r18, Z
    3282:	2e 32       	cpi	r18, 0x2E	; 46
    3284:	89 f4       	brne	.+34     	; 0x32a8 <f_rename+0x1c4>
									st_clust(fs, dir, djn.obj.sclust);
    3286:	2f 81       	ldd	r18, Y+7	; 0x07
    3288:	38 85       	ldd	r19, Y+8	; 0x08
    328a:	49 85       	ldd	r20, Y+9	; 0x09
    328c:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    328e:	bc 01       	movw	r22, r24
    3290:	61 5b       	subi	r22, 0xB1	; 177
    3292:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    3294:	0e 94 10 02 	call	0x420	; 0x420 <st_clust.isra.4>
									fs->wflag = 1;
    3298:	e3 96       	adiw	r28, 0x33	; 51
    329a:	ee ad       	ldd	r30, Y+62	; 0x3e
    329c:	ff ad       	ldd	r31, Y+63	; 0x3f
    329e:	e3 97       	sbiw	r28, 0x33	; 51
    32a0:	d3 82       	std	Z+3, r13	; 0x03
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <f_rename+0x1c4>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    32a4:	86 e0       	ldi	r24, 0x06	; 6
    32a6:	20 c0       	rjmp	.+64     	; 0x32e8 <f_rename+0x204>
static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    32a8:	09 a5       	ldd	r16, Y+41	; 0x29
    32aa:	1a a5       	ldd	r17, Y+42	; 0x2a
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    32ac:	23 96       	adiw	r28, 0x03	; 3
    32ae:	4c ad       	ldd	r20, Y+60	; 0x3c
    32b0:	5d ad       	ldd	r21, Y+61	; 0x3d
    32b2:	6e ad       	ldd	r22, Y+62	; 0x3e
    32b4:	7f ad       	ldd	r23, Y+63	; 0x3f
    32b6:	23 97       	sbiw	r28, 0x03	; 3
    32b8:	c8 01       	movw	r24, r16
    32ba:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <move_window>
	if (res == FR_OK) {
    32be:	81 11       	cpse	r24, r1
    32c0:	13 c0       	rjmp	.+38     	; 0x32e8 <f_rename+0x204>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
    32c2:	25 96       	adiw	r28, 0x05	; 5
    32c4:	ee ad       	ldd	r30, Y+62	; 0x3e
    32c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    32c8:	25 97       	sbiw	r28, 0x05	; 5
    32ca:	85 ee       	ldi	r24, 0xE5	; 229
    32cc:	80 83       	st	Z, r24
		fs->wflag = 1;
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	f8 01       	movw	r30, r16
    32d2:	83 83       	std	Z+3, r24	; 0x03
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
				if (res == FR_OK) {
					res = sync_fs(fs);
    32d4:	e3 96       	adiw	r28, 0x33	; 51
    32d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    32d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    32da:	e3 97       	sbiw	r28, 0x33	; 51
    32dc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <sync_fs>
    32e0:	03 c0       	rjmp	.+6      	; 0x32e8 <f_rename+0x204>
    32e2:	88 e0       	ldi	r24, 0x08	; 8
    32e4:	01 c0       	rjmp	.+2      	; 0x32e8 <f_rename+0x204>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    32e6:	82 e0       	ldi	r24, 0x02	; 2
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    32e8:	ca 58       	subi	r28, 0x8A	; 138
    32ea:	df 4f       	sbci	r29, 0xFF	; 255
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	de bf       	out	0x3e, r29	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	cd bf       	out	0x3d, r28	; 61
    32f6:	df 91       	pop	r29
    32f8:	cf 91       	pop	r28
    32fa:	1f 91       	pop	r17
    32fc:	0f 91       	pop	r16
    32fe:	ff 90       	pop	r15
    3300:	ef 90       	pop	r14
    3302:	df 90       	pop	r13
    3304:	08 95       	ret

00003306 <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;
    3306:	1d b8       	out	0x0d, r1	; 13
	DDRB &=~((1<<SS)|(1<<MOSI)|(1<<SCK));
    3308:	87 b3       	in	r24, 0x17	; 23
    330a:	8f 74       	andi	r24, 0x4F	; 79
    330c:	87 bb       	out	0x17, r24	; 23
	PORTB&=~(1<<SS);
    330e:	c4 98       	cbi	0x18, 4	; 24
    3310:	08 95       	ret

00003312 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    3312:	8f b9       	out	0x0f, r24	; 15
	 while(! (SPSR & (1<<SPIF))); //SPIF=1 transmisja zakonczona
    3314:	77 9b       	sbis	0x0e, 7	; 14
    3316:	fe cf       	rjmp	.-4      	; 0x3314 <xchg_spi+0x2>
	return SPDR;
    3318:	8f b1       	in	r24, 0x0f	; 15
}
    331a:	08 95       	ret

0000331c <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    331c:	c4 9a       	sbi	0x18, 4	; 24
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    331e:	8f ef       	ldi	r24, 0xFF	; 255
    3320:	0c 94 89 19 	jmp	0x3312	; 0x3312 <xchg_spi>

00003324 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	8c 01       	movw	r16, r24
    332e:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    3330:	84 e1       	ldi	r24, 0x14	; 20
    3332:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    3336:	8f ef       	ldi	r24, 0xFF	; 255
    3338:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    333c:	8f 3f       	cpi	r24, 0xFF	; 255
    333e:	29 f4       	brne	.+10     	; 0x334a <rcvr_datablock+0x26>
    3340:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Timer1>
    3344:	81 11       	cpse	r24, r1
    3346:	f7 cf       	rjmp	.-18     	; 0x3336 <rcvr_datablock+0x12>
    3348:	1b c0       	rjmp	.+54     	; 0x3380 <rcvr_datablock+0x5c>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    334a:	8e 3f       	cpi	r24, 0xFE	; 254
    334c:	c9 f4       	brne	.+50     	; 0x3380 <rcvr_datablock+0x5c>
    334e:	f8 01       	movw	r30, r16
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF;  while(! (SPSR & (1<<SPIF))); *p++ = SPDR;
    3350:	8f ef       	ldi	r24, 0xFF	; 255
    3352:	8f b9       	out	0x0f, r24	; 15
    3354:	77 9b       	sbis	0x0e, 7	; 14
    3356:	fe cf       	rjmp	.-4      	; 0x3354 <rcvr_datablock+0x30>
    3358:	9f b1       	in	r25, 0x0f	; 15
    335a:	90 83       	st	Z, r25
		SPDR = 0xFF;  while(! (SPSR & (1<<SPIF))); *p++ = SPDR;
    335c:	8f b9       	out	0x0f, r24	; 15
    335e:	77 9b       	sbis	0x0e, 7	; 14
    3360:	fe cf       	rjmp	.-4      	; 0x335e <rcvr_datablock+0x3a>
    3362:	9f b1       	in	r25, 0x0f	; 15
    3364:	91 83       	std	Z+1, r25	; 0x01
	} while (cnt -= 2);
    3366:	22 97       	sbiw	r28, 0x02	; 2
    3368:	32 96       	adiw	r30, 0x02	; 2
    336a:	20 97       	sbiw	r28, 0x00	; 0
    336c:	91 f7       	brne	.-28     	; 0x3352 <rcvr_datablock+0x2e>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    336e:	8f ef       	ldi	r24, 0xFF	; 255
    3370:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	xchg_spi(0xFF);
    3374:	8f ef       	ldi	r24, 0xFF	; 255
    3376:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <rcvr_datablock+0x60>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	08 95       	ret

0000338e <wait_ready.constprop.2>:
)
{
	BYTE d;


	Timer2 = wt / 10;
    338e:	82 e3       	ldi	r24, 0x32	; 50
    3390:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <Timer2>
	do
		d = xchg_spi(0xFF);
    3394:	8f ef       	ldi	r24, 0xFF	; 255
    3396:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
    339a:	28 2f       	mov	r18, r24
	while (d != 0xFF && Timer2);
    339c:	8f 3f       	cpi	r24, 0xFF	; 255
    339e:	21 f0       	breq	.+8      	; 0x33a8 <wait_ready.constprop.2+0x1a>
    33a0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Timer2>
    33a4:	81 11       	cpse	r24, r1
    33a6:	f6 cf       	rjmp	.-20     	; 0x3394 <wait_ready.constprop.2+0x6>

	return (d == 0xFF) ? 1 : 0;
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	2f 3f       	cpi	r18, 0xFF	; 255
    33ae:	11 f0       	breq	.+4      	; 0x33b4 <wait_ready.constprop.2+0x26>
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
}
    33b4:	08 95       	ret

000033b6 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
	CS_LOW();		/* Set CS# low */
    33ba:	c4 98       	cbi	0x18, 4	; 24
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    33bc:	8f ef       	ldi	r24, 0xFF	; 255
    33be:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    33c2:	0e 94 c7 19 	call	0x338e	; 0x338e <wait_ready.constprop.2>
    33c6:	ec 01       	movw	r28, r24
    33c8:	89 2b       	or	r24, r25
    33ca:	19 f4       	brne	.+6      	; 0x33d2 <select+0x1c>

	deselect();
    33cc:	0e 94 8e 19 	call	0x331c	; 0x331c <deselect>
	return 0;	/* Timeout */
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <select+0x20>
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    33d2:	c1 e0       	ldi	r28, 0x01	; 1
    33d4:	d0 e0       	ldi	r29, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    33d6:	ce 01       	movw	r24, r28
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	08 95       	ret

000033de <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    33de:	ff 92       	push	r15
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	c8 2f       	mov	r28, r24
    33ea:	d4 2f       	mov	r29, r20
    33ec:	15 2f       	mov	r17, r21
    33ee:	06 2f       	mov	r16, r22
    33f0:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    33f2:	87 ff       	sbrs	r24, 7
    33f4:	09 c0       	rjmp	.+18     	; 0x3408 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    33f6:	40 e0       	ldi	r20, 0x00	; 0
    33f8:	50 e0       	ldi	r21, 0x00	; 0
    33fa:	ba 01       	movw	r22, r20
    33fc:	87 e3       	ldi	r24, 0x37	; 55
    33fe:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
		if (res > 1) return res;
    3402:	82 30       	cpi	r24, 0x02	; 2
    3404:	a8 f5       	brcc	.+106    	; 0x3470 <send_cmd+0x92>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    3406:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    3408:	cc 30       	cpi	r28, 0x0C	; 12
    340a:	99 f4       	brne	.+38     	; 0x3432 <send_cmd+0x54>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    340c:	8c 2f       	mov	r24, r28
    340e:	80 64       	ori	r24, 0x40	; 64
    3410:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    3414:	8f 2d       	mov	r24, r15
    3416:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    341a:	80 2f       	mov	r24, r16
    341c:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    3420:	81 2f       	mov	r24, r17
    3422:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    3426:	8d 2f       	mov	r24, r29
    3428:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    342c:	cc 23       	and	r28, r28
    342e:	f1 f0       	breq	.+60     	; 0x346c <send_cmd+0x8e>
    3430:	08 c0       	rjmp	.+16     	; 0x3442 <send_cmd+0x64>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
    3432:	0e 94 8e 19 	call	0x331c	; 0x331c <deselect>
		if (!select()) return 0xFF;
    3436:	0e 94 db 19 	call	0x33b6	; 0x33b6 <select>
    343a:	89 2b       	or	r24, r25
    343c:	39 f7       	brne	.-50     	; 0x340c <send_cmd+0x2e>
    343e:	8f ef       	ldi	r24, 0xFF	; 255
    3440:	17 c0       	rjmp	.+46     	; 0x3470 <send_cmd+0x92>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    3442:	c8 30       	cpi	r28, 0x08	; 8
    3444:	11 f4       	brne	.+4      	; 0x344a <send_cmd+0x6c>
    3446:	87 e8       	ldi	r24, 0x87	; 135
    3448:	01 c0       	rjmp	.+2      	; 0x344c <send_cmd+0x6e>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    344a:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    344c:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    3450:	cc 30       	cpi	r28, 0x0C	; 12
    3452:	19 f4       	brne	.+6      	; 0x345a <send_cmd+0x7c>
    3454:	8f ef       	ldi	r24, 0xFF	; 255
    3456:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    345a:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    345c:	8f ef       	ldi	r24, 0xFF	; 255
    345e:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	while ((res & 0x80) && --n);
    3462:	87 ff       	sbrs	r24, 7
    3464:	05 c0       	rjmp	.+10     	; 0x3470 <send_cmd+0x92>
    3466:	c1 50       	subi	r28, 0x01	; 1
    3468:	c9 f7       	brne	.-14     	; 0x345c <send_cmd+0x7e>
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <send_cmd+0x92>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    346c:	85 e9       	ldi	r24, 0x95	; 149
    346e:	f3 cf       	rjmp	.-26     	; 0x3456 <send_cmd+0x78>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    3470:	df 91       	pop	r29
    3472:	cf 91       	pop	r28
    3474:	1f 91       	pop	r17
    3476:	0f 91       	pop	r16
    3478:	ff 90       	pop	r15
    347a:	08 95       	ret

0000347c <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    347c:	1f 93       	push	r17
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	18 2f       	mov	r17, r24
    3484:	d9 2f       	mov	r29, r25
    3486:	c6 2f       	mov	r28, r22
	BYTE resp;


	if (!wait_ready(500)) return 0;
    3488:	0e 94 c7 19 	call	0x338e	; 0x338e <wait_ready.constprop.2>
    348c:	00 97       	sbiw	r24, 0x00	; 0
    348e:	49 f1       	breq	.+82     	; 0x34e2 <xmit_datablock+0x66>

	xchg_spi(token);					/* Xmit data token */
    3490:	8c 2f       	mov	r24, r28
    3492:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    3496:	cd 3f       	cpi	r28, 0xFD	; 253
    3498:	11 f1       	breq	.+68     	; 0x34de <xmit_datablock+0x62>
    349a:	e1 2f       	mov	r30, r17
    349c:	fd 2f       	mov	r31, r29
    349e:	cf 01       	movw	r24, r30
    34a0:	9e 5f       	subi	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++;  while(! (SPSR & (1<<SPIF)));
    34a2:	20 81       	ld	r18, Z
    34a4:	2f b9       	out	0x0f, r18	; 15
    34a6:	77 9b       	sbis	0x0e, 7	; 14
    34a8:	fe cf       	rjmp	.-4      	; 0x34a6 <xmit_datablock+0x2a>
		SPDR = *p++;  while(! (SPSR & (1<<SPIF)));
    34aa:	21 81       	ldd	r18, Z+1	; 0x01
    34ac:	2f b9       	out	0x0f, r18	; 15
    34ae:	77 9b       	sbis	0x0e, 7	; 14
    34b0:	fe cf       	rjmp	.-4      	; 0x34ae <xmit_datablock+0x32>
    34b2:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    34b4:	e8 17       	cp	r30, r24
    34b6:	f9 07       	cpc	r31, r25
    34b8:	a1 f7       	brne	.-24     	; 0x34a2 <xmit_datablock+0x26>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    34ba:	8f ef       	ldi	r24, 0xFF	; 255
    34bc:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
		xchg_spi(0xFF);
    34c0:	8f ef       	ldi	r24, 0xFF	; 255
    34c2:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    34c6:	8f ef       	ldi	r24, 0xFF	; 255
    34c8:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    34cc:	8f 71       	andi	r24, 0x1F	; 31
    34ce:	31 e0       	ldi	r19, 0x01	; 1
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	85 30       	cpi	r24, 0x05	; 5
    34d4:	09 f0       	breq	.+2      	; 0x34d8 <xmit_datablock+0x5c>
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	83 2f       	mov	r24, r19
    34da:	92 2f       	mov	r25, r18
    34dc:	02 c0       	rjmp	.+4      	; 0x34e2 <xmit_datablock+0x66>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	90 e0       	ldi	r25, 0x00	; 0
}
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
    34e6:	1f 91       	pop	r17
    34e8:	08 95       	ret

000034ea <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    34ea:	cf 92       	push	r12
    34ec:	df 92       	push	r13
    34ee:	ef 92       	push	r14
    34f0:	ff 92       	push	r15
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <disk_initialize+0x12>
    34fc:	00 d0       	rcall	.+0      	; 0x34fe <disk_initialize+0x14>
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    3502:	81 11       	cpse	r24, r1
    3504:	b6 c0       	rjmp	.+364    	; 0x3672 <disk_initialize+0x188>
	power_off();						/* Turn off the socket power to reset the card */
    3506:	0e 94 83 19 	call	0x3306	; 0x3306 <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    350a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Stat>
    350e:	81 fd       	sbrc	r24, 1
    3510:	ad c0       	rjmp	.+346    	; 0x366c <disk_initialize+0x182>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  DDRB|=(1<<SS)|(1<<MOSI)|(1<<SCK);
    3512:	87 b3       	in	r24, 0x17	; 23
    3514:	80 6b       	ori	r24, 0xB0	; 176
    3516:	87 bb       	out	0x17, r24	; 23
  PORTB|=(1<<SS);
    3518:	c4 9a       	sbi	0x18, 4	; 24
  DDRB&=~(MISO);	
    351a:	87 b3       	in	r24, 0x17	; 23
    351c:	89 7f       	andi	r24, 0xF9	; 249
    351e:	87 bb       	out	0x17, r24	; 23
  SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
    3520:	81 e5       	ldi	r24, 0x51	; 81
    3522:	8d b9       	out	0x0d, r24	; 13
  
	/* Start 100Hz system timer (TC2.OC) */
	OCR2 = F_CPU / 1024 / 100 - 1;
    3524:	8b e9       	ldi	r24, 0x9B	; 155
    3526:	83 bd       	out	0x23, r24	; 35
	
	TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);
    3528:	8f e0       	ldi	r24, 0x0F	; 15
    352a:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2);
    352c:	89 b7       	in	r24, 0x39	; 57
    352e:	80 68       	ori	r24, 0x80	; 128
    3530:	89 bf       	out	0x39, r24	; 57

	sei();
    3532:	78 94       	sei

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    3534:	82 e5       	ldi	r24, 0x52	; 82
    3536:	8d b9       	out	0x0d, r24	; 13
    3538:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    353a:	8f ef       	ldi	r24, 0xFF	; 255
    353c:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
    3540:	11 50       	subi	r17, 0x01	; 1
    3542:	d9 f7       	brne	.-10     	; 0x353a <disk_initialize+0x50>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    3544:	40 e0       	ldi	r20, 0x00	; 0
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	ba 01       	movw	r22, r20
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    3550:	81 30       	cpi	r24, 0x01	; 1
    3552:	09 f0       	breq	.+2      	; 0x3556 <disk_initialize+0x6c>
    3554:	78 c0       	rjmp	.+240    	; 0x3646 <disk_initialize+0x15c>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    3556:	84 e6       	ldi	r24, 0x64	; 100
    3558:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    355c:	4a ea       	ldi	r20, 0xAA	; 170
    355e:	51 e0       	ldi	r21, 0x01	; 1
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	88 e0       	ldi	r24, 0x08	; 8
    3566:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    356a:	81 30       	cpi	r24, 0x01	; 1
    356c:	09 f0       	breq	.+2      	; 0x3570 <disk_initialize+0x86>
    356e:	43 c0       	rjmp	.+134    	; 0x35f6 <disk_initialize+0x10c>
    3570:	8e 01       	movw	r16, r28
    3572:	0f 5f       	subi	r16, 0xFF	; 255
    3574:	1f 4f       	sbci	r17, 0xFF	; 255
    3576:	6e 01       	movw	r12, r28
    3578:	85 e0       	ldi	r24, 0x05	; 5
    357a:	c8 0e       	add	r12, r24
    357c:	d1 1c       	adc	r13, r1
    357e:	78 01       	movw	r14, r16
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    3580:	8f ef       	ldi	r24, 0xFF	; 255
    3582:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
    3586:	f7 01       	movw	r30, r14
    3588:	81 93       	st	Z+, r24
    358a:	7f 01       	movw	r14, r30
    358c:	ce 16       	cp	r12, r30
    358e:	df 06       	cpc	r13, r31
    3590:	b9 f7       	brne	.-18     	; 0x3580 <disk_initialize+0x96>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    3592:	8b 81       	ldd	r24, Y+3	; 0x03
    3594:	81 30       	cpi	r24, 0x01	; 1
    3596:	09 f0       	breq	.+2      	; 0x359a <disk_initialize+0xb0>
    3598:	56 c0       	rjmp	.+172    	; 0x3646 <disk_initialize+0x15c>
    359a:	8c 81       	ldd	r24, Y+4	; 0x04
    359c:	8a 3a       	cpi	r24, 0xAA	; 170
    359e:	09 f0       	breq	.+2      	; 0x35a2 <disk_initialize+0xb8>
    35a0:	52 c0       	rjmp	.+164    	; 0x3646 <disk_initialize+0x15c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    35a2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Timer1>
    35a6:	81 11       	cpse	r24, r1
    35a8:	06 c0       	rjmp	.+12     	; 0x35b6 <disk_initialize+0xcc>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    35aa:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Timer1>
    35ae:	88 23       	and	r24, r24
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <disk_initialize+0xca>
    35b2:	49 c0       	rjmp	.+146    	; 0x3646 <disk_initialize+0x15c>
    35b4:	0a c0       	rjmp	.+20     	; 0x35ca <disk_initialize+0xe0>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    35b6:	40 e0       	ldi	r20, 0x00	; 0
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	70 e4       	ldi	r23, 0x40	; 64
    35be:	89 ea       	ldi	r24, 0xA9	; 169
    35c0:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    35c4:	81 11       	cpse	r24, r1
    35c6:	ed cf       	rjmp	.-38     	; 0x35a2 <disk_initialize+0xb8>
    35c8:	f0 cf       	rjmp	.-32     	; 0x35aa <disk_initialize+0xc0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    35ca:	40 e0       	ldi	r20, 0x00	; 0
    35cc:	50 e0       	ldi	r21, 0x00	; 0
    35ce:	ba 01       	movw	r22, r20
    35d0:	8a e3       	ldi	r24, 0x3A	; 58
    35d2:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    35d6:	81 11       	cpse	r24, r1
    35d8:	36 c0       	rjmp	.+108    	; 0x3646 <disk_initialize+0x15c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    35da:	8f ef       	ldi	r24, 0xFF	; 255
    35dc:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
    35e0:	f8 01       	movw	r30, r16
    35e2:	81 93       	st	Z+, r24
    35e4:	8f 01       	movw	r16, r30
    35e6:	ce 16       	cp	r12, r30
    35e8:	df 06       	cpc	r13, r31
    35ea:	b9 f7       	brne	.-18     	; 0x35da <disk_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	86 fd       	sbrc	r24, 6
    35f0:	2c c0       	rjmp	.+88     	; 0x364a <disk_initialize+0x160>
    35f2:	14 e0       	ldi	r17, 0x04	; 4
    35f4:	2b c0       	rjmp	.+86     	; 0x364c <disk_initialize+0x162>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    35f6:	40 e0       	ldi	r20, 0x00	; 0
    35f8:	50 e0       	ldi	r21, 0x00	; 0
    35fa:	ba 01       	movw	r22, r20
    35fc:	89 ea       	ldi	r24, 0xA9	; 169
    35fe:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    3602:	82 30       	cpi	r24, 0x02	; 2
    3604:	18 f0       	brcs	.+6      	; 0x360c <disk_initialize+0x122>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    3606:	11 e0       	ldi	r17, 0x01	; 1
    3608:	01 e0       	ldi	r16, 0x01	; 1
    360a:	02 c0       	rjmp	.+4      	; 0x3610 <disk_initialize+0x126>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    360c:	12 e0       	ldi	r17, 0x02	; 2
    360e:	09 ea       	ldi	r16, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    3610:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Timer1>
    3614:	81 11       	cpse	r24, r1
    3616:	05 c0       	rjmp	.+10     	; 0x3622 <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3618:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Timer1>
    361c:	88 23       	and	r24, r24
    361e:	99 f0       	breq	.+38     	; 0x3646 <disk_initialize+0x15c>
    3620:	09 c0       	rjmp	.+18     	; 0x3634 <disk_initialize+0x14a>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    3622:	40 e0       	ldi	r20, 0x00	; 0
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	ba 01       	movw	r22, r20
    3628:	80 2f       	mov	r24, r16
    362a:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    362e:	81 11       	cpse	r24, r1
    3630:	ef cf       	rjmp	.-34     	; 0x3610 <disk_initialize+0x126>
    3632:	f2 cf       	rjmp	.-28     	; 0x3618 <disk_initialize+0x12e>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3634:	40 e0       	ldi	r20, 0x00	; 0
    3636:	52 e0       	ldi	r21, 0x02	; 2
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	70 e0       	ldi	r23, 0x00	; 0
    363c:	80 e1       	ldi	r24, 0x10	; 16
    363e:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    3642:	88 23       	and	r24, r24
    3644:	19 f0       	breq	.+6      	; 0x364c <disk_initialize+0x162>
				ty = 0;
    3646:	10 e0       	ldi	r17, 0x00	; 0
    3648:	01 c0       	rjmp	.+2      	; 0x364c <disk_initialize+0x162>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    364a:	1c e0       	ldi	r17, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    364c:	10 93 84 01 	sts	0x0184, r17	; 0x800184 <CardType>
	deselect();
    3650:	0e 94 8e 19 	call	0x331c	; 0x331c <deselect>

	if (ty) {			/* Initialization succeded */
    3654:	11 23       	and	r17, r17
    3656:	41 f0       	breq	.+16     	; 0x3668 <disk_initialize+0x17e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    3658:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Stat>
    365c:	8e 7f       	andi	r24, 0xFE	; 254
    365e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Stat>
		FCLK_FAST();
    3662:	80 e5       	ldi	r24, 0x50	; 80
    3664:	8d b9       	out	0x0d, r24	; 13
    3666:	02 c0       	rjmp	.+4      	; 0x366c <disk_initialize+0x182>
	} else {			/* Initialization failed */
		power_off();
    3668:	0e 94 83 19 	call	0x3306	; 0x3306 <power_off>
	}

	return Stat;
    366c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Stat>
    3670:	01 c0       	rjmp	.+2      	; 0x3674 <disk_initialize+0x18a>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    3672:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
    367a:	0f 90       	pop	r0
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	ff 90       	pop	r15
    3686:	ef 90       	pop	r14
    3688:	df 90       	pop	r13
    368a:	cf 90       	pop	r12
    368c:	08 95       	ret

0000368e <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    368e:	81 11       	cpse	r24, r1
    3690:	03 c0       	rjmp	.+6      	; 0x3698 <disk_status+0xa>
	return Stat;
    3692:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Stat>
    3696:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    3698:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    369a:	08 95       	ret

0000369c <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    369c:	ef 92       	push	r14
    369e:	ff 92       	push	r15
    36a0:	0f 93       	push	r16
    36a2:	1f 93       	push	r17
    36a4:	cf 93       	push	r28
    36a6:	7b 01       	movw	r14, r22
    36a8:	ba 01       	movw	r22, r20
    36aa:	a9 01       	movw	r20, r18
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    36ac:	81 11       	cpse	r24, r1
    36ae:	38 c0       	rjmp	.+112    	; 0x3720 <disk_read+0x84>
    36b0:	01 15       	cp	r16, r1
    36b2:	11 05       	cpc	r17, r1
    36b4:	a9 f1       	breq	.+106    	; 0x3720 <disk_read+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    36b6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Stat>
    36ba:	80 fd       	sbrc	r24, 0
    36bc:	33 c0       	rjmp	.+102    	; 0x3724 <disk_read+0x88>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    36be:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <CardType>
    36c2:	83 fd       	sbrc	r24, 3
    36c4:	07 c0       	rjmp	.+14     	; 0x36d4 <disk_read+0x38>
    36c6:	89 e0       	ldi	r24, 0x09	; 9
    36c8:	44 0f       	add	r20, r20
    36ca:	55 1f       	adc	r21, r21
    36cc:	66 1f       	adc	r22, r22
    36ce:	77 1f       	adc	r23, r23
    36d0:	8a 95       	dec	r24
    36d2:	d1 f7       	brne	.-12     	; 0x36c8 <disk_read+0x2c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    36d4:	02 30       	cpi	r16, 0x02	; 2
    36d6:	11 05       	cpc	r17, r1
    36d8:	10 f4       	brcc	.+4      	; 0x36de <disk_read+0x42>
    36da:	c1 e1       	ldi	r28, 0x11	; 17
    36dc:	01 c0       	rjmp	.+2      	; 0x36e0 <disk_read+0x44>
    36de:	c2 e1       	ldi	r28, 0x12	; 18
	if (send_cmd(cmd, sector) == 0) {
    36e0:	8c 2f       	mov	r24, r28
    36e2:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    36e6:	81 11       	cpse	r24, r1
    36e8:	14 c0       	rjmp	.+40     	; 0x3712 <disk_read+0x76>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    36ea:	60 e0       	ldi	r22, 0x00	; 0
    36ec:	72 e0       	ldi	r23, 0x02	; 2
    36ee:	c7 01       	movw	r24, r14
    36f0:	0e 94 92 19 	call	0x3324	; 0x3324 <rcvr_datablock>
    36f4:	89 2b       	or	r24, r25
    36f6:	29 f0       	breq	.+10     	; 0x3702 <disk_read+0x66>
			buff += 512;
    36f8:	8e ef       	ldi	r24, 0xFE	; 254
    36fa:	f8 1a       	sub	r15, r24
		} while (--count);
    36fc:	01 50       	subi	r16, 0x01	; 1
    36fe:	11 09       	sbc	r17, r1
    3700:	a1 f7       	brne	.-24     	; 0x36ea <disk_read+0x4e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    3702:	c2 31       	cpi	r28, 0x12	; 18
    3704:	31 f4       	brne	.+12     	; 0x3712 <disk_read+0x76>
    3706:	40 e0       	ldi	r20, 0x00	; 0
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	ba 01       	movw	r22, r20
    370c:	8c e0       	ldi	r24, 0x0C	; 12
    370e:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
	}
	deselect();
    3712:	0e 94 8e 19 	call	0x331c	; 0x331c <deselect>

	return count ? RES_ERROR : RES_OK;
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	01 2b       	or	r16, r17
    371a:	29 f4       	brne	.+10     	; 0x3726 <disk_read+0x8a>
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	03 c0       	rjmp	.+6      	; 0x3726 <disk_read+0x8a>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    3720:	84 e0       	ldi	r24, 0x04	; 4
    3722:	01 c0       	rjmp	.+2      	; 0x3726 <disk_read+0x8a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3724:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3726:	cf 91       	pop	r28
    3728:	1f 91       	pop	r17
    372a:	0f 91       	pop	r16
    372c:	ff 90       	pop	r15
    372e:	ef 90       	pop	r14
    3730:	08 95       	ret

00003732 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3732:	cf 92       	push	r12
    3734:	df 92       	push	r13
    3736:	ef 92       	push	r14
    3738:	ff 92       	push	r15
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	eb 01       	movw	r28, r22
    3744:	69 01       	movw	r12, r18
    3746:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    3748:	81 11       	cpse	r24, r1
    374a:	56 c0       	rjmp	.+172    	; 0x37f8 <disk_write+0xc6>
    374c:	01 15       	cp	r16, r1
    374e:	11 05       	cpc	r17, r1
    3750:	09 f4       	brne	.+2      	; 0x3754 <disk_write+0x22>
    3752:	52 c0       	rjmp	.+164    	; 0x37f8 <disk_write+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3754:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Stat>
    3758:	80 fd       	sbrc	r24, 0
    375a:	50 c0       	rjmp	.+160    	; 0x37fc <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    375c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Stat>
    3760:	82 fd       	sbrc	r24, 2
    3762:	4e c0       	rjmp	.+156    	; 0x3800 <disk_write+0xce>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    3764:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <CardType>
    3768:	83 fd       	sbrc	r24, 3
    376a:	07 c0       	rjmp	.+14     	; 0x377a <disk_write+0x48>
    376c:	99 e0       	ldi	r25, 0x09	; 9
    376e:	cc 0c       	add	r12, r12
    3770:	dd 1c       	adc	r13, r13
    3772:	ee 1c       	adc	r14, r14
    3774:	ff 1c       	adc	r15, r15
    3776:	9a 95       	dec	r25
    3778:	d1 f7       	brne	.-12     	; 0x376e <disk_write+0x3c>

	if (count == 1) {	/* Single block write */
    377a:	01 30       	cpi	r16, 0x01	; 1
    377c:	11 05       	cpc	r17, r1
    377e:	99 f4       	brne	.+38     	; 0x37a6 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    3780:	b7 01       	movw	r22, r14
    3782:	a6 01       	movw	r20, r12
    3784:	88 e1       	ldi	r24, 0x18	; 24
    3786:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    378a:	81 11       	cpse	r24, r1
    378c:	2c c0       	rjmp	.+88     	; 0x37e6 <disk_write+0xb4>
			&& xmit_datablock(buff, 0xFE))
    378e:	6e ef       	ldi	r22, 0xFE	; 254
    3790:	ce 01       	movw	r24, r28
    3792:	0e 94 3e 1a 	call	0x347c	; 0x347c <xmit_datablock>
    3796:	31 e0       	ldi	r19, 0x01	; 1
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	89 2b       	or	r24, r25
    379c:	09 f0       	breq	.+2      	; 0x37a0 <disk_write+0x6e>
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	03 2f       	mov	r16, r19
    37a2:	12 2f       	mov	r17, r18
    37a4:	22 c0       	rjmp	.+68     	; 0x37ea <disk_write+0xb8>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    37a6:	86 70       	andi	r24, 0x06	; 6
    37a8:	31 f0       	breq	.+12     	; 0x37b6 <disk_write+0x84>
    37aa:	a8 01       	movw	r20, r16
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	87 e9       	ldi	r24, 0x97	; 151
    37b2:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    37b6:	b7 01       	movw	r22, r14
    37b8:	a6 01       	movw	r20, r12
    37ba:	89 e1       	ldi	r24, 0x19	; 25
    37bc:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    37c0:	81 11       	cpse	r24, r1
    37c2:	13 c0       	rjmp	.+38     	; 0x37ea <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    37c4:	6c ef       	ldi	r22, 0xFC	; 252
    37c6:	ce 01       	movw	r24, r28
    37c8:	0e 94 3e 1a 	call	0x347c	; 0x347c <xmit_datablock>
    37cc:	89 2b       	or	r24, r25
    37ce:	21 f0       	breq	.+8      	; 0x37d8 <disk_write+0xa6>
				buff += 512;
    37d0:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    37d2:	01 50       	subi	r16, 0x01	; 1
    37d4:	11 09       	sbc	r17, r1
    37d6:	b1 f7       	brne	.-20     	; 0x37c4 <disk_write+0x92>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    37d8:	6d ef       	ldi	r22, 0xFD	; 253
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	0e 94 3e 1a 	call	0x347c	; 0x347c <xmit_datablock>
    37e2:	89 2b       	or	r24, r25
    37e4:	11 f4       	brne	.+4      	; 0x37ea <disk_write+0xb8>
				count = 1;
    37e6:	01 e0       	ldi	r16, 0x01	; 1
    37e8:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    37ea:	0e 94 8e 19 	call	0x331c	; 0x331c <deselect>

	return count ? RES_ERROR : RES_OK;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	01 2b       	or	r16, r17
    37f2:	39 f4       	brne	.+14     	; 0x3802 <disk_write+0xd0>
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	05 c0       	rjmp	.+10     	; 0x3802 <disk_write+0xd0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    37f8:	84 e0       	ldi	r24, 0x04	; 4
    37fa:	03 c0       	rjmp	.+6      	; 0x3802 <disk_write+0xd0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    37fc:	83 e0       	ldi	r24, 0x03	; 3
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3800:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3802:	df 91       	pop	r29
    3804:	cf 91       	pop	r28
    3806:	1f 91       	pop	r17
    3808:	0f 91       	pop	r16
    380a:	ff 90       	pop	r15
    380c:	ef 90       	pop	r14
    380e:	df 90       	pop	r13
    3810:	cf 90       	pop	r12
    3812:	08 95       	ret

00003814 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	60 97       	sbiw	r28, 0x10	; 16
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    3830:	81 11       	cpse	r24, r1
    3832:	34 c1       	rjmp	.+616    	; 0x3a9c <disk_ioctl+0x288>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3834:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Stat>
    3838:	80 fd       	sbrc	r24, 0
    383a:	32 c1       	rjmp	.+612    	; 0x3aa0 <disk_ioctl+0x28c>
    383c:	8a 01       	movw	r16, r20

	switch (cmd) {
    383e:	86 2f       	mov	r24, r22
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	8f 30       	cpi	r24, 0x0F	; 15
    3844:	91 05       	cpc	r25, r1
    3846:	08 f0       	brcs	.+2      	; 0x384a <disk_ioctl+0x36>
    3848:	24 c1       	rjmp	.+584    	; 0x3a92 <disk_ioctl+0x27e>
    384a:	fc 01       	movw	r30, r24
    384c:	e6 5d       	subi	r30, 0xD6	; 214
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	0c 94 da 1e 	jmp	0x3db4	; 0x3db4 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    3854:	0e 94 db 19 	call	0x33b6	; 0x33b6 <select>
    3858:	18 c1       	rjmp	.+560    	; 0x3a8a <disk_ioctl+0x276>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    385a:	40 e0       	ldi	r20, 0x00	; 0
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	ba 01       	movw	r22, r20
    3860:	89 e0       	ldi	r24, 0x09	; 9
    3862:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    3866:	88 23       	and	r24, r24
    3868:	11 f0       	breq	.+4      	; 0x386e <disk_ioctl+0x5a>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    386a:	11 e0       	ldi	r17, 0x01	; 1
    386c:	13 c1       	rjmp	.+550    	; 0x3a94 <disk_ioctl+0x280>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    386e:	60 e1       	ldi	r22, 0x10	; 16
    3870:	70 e0       	ldi	r23, 0x00	; 0
    3872:	ce 01       	movw	r24, r28
    3874:	01 96       	adiw	r24, 0x01	; 1
    3876:	0e 94 92 19 	call	0x3324	; 0x3324 <rcvr_datablock>
    387a:	89 2b       	or	r24, r25
    387c:	b1 f3       	breq	.-20     	; 0x386a <disk_ioctl+0x56>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    387e:	99 81       	ldd	r25, Y+1	; 0x01
    3880:	92 95       	swap	r25
    3882:	96 95       	lsr	r25
    3884:	96 95       	lsr	r25
    3886:	93 70       	andi	r25, 0x03	; 3
    3888:	29 85       	ldd	r18, Y+9	; 0x09
    388a:	4a 85       	ldd	r20, Y+10	; 0x0a
    388c:	88 85       	ldd	r24, Y+8	; 0x08
    388e:	91 30       	cpi	r25, 0x01	; 1
    3890:	d9 f4       	brne	.+54     	; 0x38c8 <disk_ioctl+0xb4>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	32 2f       	mov	r19, r18
    3896:	22 27       	eor	r18, r18
    3898:	24 0f       	add	r18, r20
    389a:	31 1d       	adc	r19, r1
    389c:	8f 73       	andi	r24, 0x3F	; 63
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a0 e0       	ldi	r26, 0x00	; 0
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
    38a4:	dc 01       	movw	r26, r24
    38a6:	99 27       	eor	r25, r25
    38a8:	88 27       	eor	r24, r24
    38aa:	01 96       	adiw	r24, 0x01	; 1
    38ac:	a1 1d       	adc	r26, r1
    38ae:	b1 1d       	adc	r27, r1
    38b0:	82 0f       	add	r24, r18
    38b2:	93 1f       	adc	r25, r19
    38b4:	a1 1d       	adc	r26, r1
    38b6:	b1 1d       	adc	r27, r1
    38b8:	fa e0       	ldi	r31, 0x0A	; 10
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	aa 1f       	adc	r26, r26
    38c0:	bb 1f       	adc	r27, r27
    38c2:	fa 95       	dec	r31
    38c4:	d1 f7       	brne	.-12     	; 0x38ba <disk_ioctl+0xa6>
    38c6:	58 c0       	rjmp	.+176    	; 0x3978 <disk_ioctl+0x164>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    38c8:	22 95       	swap	r18
    38ca:	26 95       	lsr	r18
    38cc:	26 95       	lsr	r18
    38ce:	23 70       	andi	r18, 0x03	; 3
    38d0:	f4 e0       	ldi	r31, 0x04	; 4
    38d2:	8f 9f       	mul	r24, r31
    38d4:	c0 01       	movw	r24, r0
    38d6:	11 24       	eor	r1, r1
    38d8:	82 0f       	add	r24, r18
    38da:	91 1d       	adc	r25, r1
    38dc:	01 96       	adiw	r24, 0x01	; 1
    38de:	2f 81       	ldd	r18, Y+7	; 0x07
    38e0:	23 70       	andi	r18, 0x03	; 3
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	32 2f       	mov	r19, r18
    38e6:	22 27       	eor	r18, r18
    38e8:	33 0f       	add	r19, r19
    38ea:	33 0f       	add	r19, r19
    38ec:	82 0f       	add	r24, r18
    38ee:	93 1f       	adc	r25, r19
    38f0:	a0 e0       	ldi	r26, 0x00	; 0
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	2e 81       	ldd	r18, Y+6	; 0x06
    38f6:	32 2f       	mov	r19, r18
    38f8:	3f 70       	andi	r19, 0x0F	; 15
    38fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    38fc:	22 1f       	adc	r18, r18
    38fe:	22 27       	eor	r18, r18
    3900:	22 1f       	adc	r18, r18
    3902:	23 0f       	add	r18, r19
    3904:	43 70       	andi	r20, 0x03	; 3
    3906:	44 0f       	add	r20, r20
    3908:	42 0f       	add	r20, r18
    390a:	47 50       	subi	r20, 0x07	; 7
    390c:	04 c0       	rjmp	.+8      	; 0x3916 <disk_ioctl+0x102>
    390e:	88 0f       	add	r24, r24
    3910:	99 1f       	adc	r25, r25
    3912:	aa 1f       	adc	r26, r26
    3914:	bb 1f       	adc	r27, r27
    3916:	4a 95       	dec	r20
    3918:	d2 f7       	brpl	.-12     	; 0x390e <disk_ioctl+0xfa>
    391a:	2e c0       	rjmp	.+92     	; 0x3978 <disk_ioctl+0x164>
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    391c:	f0 90 84 01 	lds	r15, 0x0184	; 0x800184 <CardType>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	50 e0       	ldi	r21, 0x00	; 0
    3924:	ba 01       	movw	r22, r20
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    3926:	f2 fe       	sbrs	r15, 2
    3928:	2e c0       	rjmp	.+92     	; 0x3986 <disk_ioctl+0x172>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    392a:	8d e8       	ldi	r24, 0x8D	; 141
    392c:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    3930:	81 11       	cpse	r24, r1
    3932:	9b cf       	rjmp	.-202    	; 0x386a <disk_ioctl+0x56>
				xchg_spi(0xFF);
    3934:	8f ef       	ldi	r24, 0xFF	; 255
    3936:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    393a:	60 e1       	ldi	r22, 0x10	; 16
    393c:	70 e0       	ldi	r23, 0x00	; 0
    393e:	ce 01       	movw	r24, r28
    3940:	01 96       	adiw	r24, 0x01	; 1
    3942:	0e 94 92 19 	call	0x3324	; 0x3324 <rcvr_datablock>
    3946:	89 2b       	or	r24, r25
    3948:	09 f4       	brne	.+2      	; 0x394c <disk_ioctl+0x138>
    394a:	8f cf       	rjmp	.-226    	; 0x386a <disk_ioctl+0x56>
    394c:	50 e3       	ldi	r21, 0x30	; 48
    394e:	f5 2e       	mov	r15, r21
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    3950:	8f ef       	ldi	r24, 0xFF	; 255
    3952:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
    3956:	fa 94       	dec	r15
    3958:	f1 10       	cpse	r15, r1
    395a:	fa cf       	rjmp	.-12     	; 0x3950 <disk_ioctl+0x13c>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    395c:	2b 85       	ldd	r18, Y+11	; 0x0b
    395e:	22 95       	swap	r18
    3960:	2f 70       	andi	r18, 0x0F	; 15
    3962:	80 e1       	ldi	r24, 0x10	; 16
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	a0 e0       	ldi	r26, 0x00	; 0
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	04 c0       	rjmp	.+8      	; 0x3974 <disk_ioctl+0x160>
    396c:	88 0f       	add	r24, r24
    396e:	99 1f       	adc	r25, r25
    3970:	aa 1f       	adc	r26, r26
    3972:	bb 1f       	adc	r27, r27
    3974:	2a 95       	dec	r18
    3976:	d2 f7       	brpl	.-12     	; 0x396c <disk_ioctl+0x158>
    3978:	f8 01       	movw	r30, r16
    397a:	80 83       	st	Z, r24
    397c:	91 83       	std	Z+1, r25	; 0x01
    397e:	a2 83       	std	Z+2, r26	; 0x02
    3980:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
    3982:	10 e0       	ldi	r17, 0x00	; 0
    3984:	87 c0       	rjmp	.+270    	; 0x3a94 <disk_ioctl+0x280>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    3986:	89 e0       	ldi	r24, 0x09	; 9
    3988:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    398c:	81 11       	cpse	r24, r1
    398e:	6d cf       	rjmp	.-294    	; 0x386a <disk_ioctl+0x56>
    3990:	60 e1       	ldi	r22, 0x10	; 16
    3992:	70 e0       	ldi	r23, 0x00	; 0
    3994:	ce 01       	movw	r24, r28
    3996:	01 96       	adiw	r24, 0x01	; 1
    3998:	0e 94 92 19 	call	0x3324	; 0x3324 <rcvr_datablock>
    399c:	89 2b       	or	r24, r25
    399e:	09 f4       	brne	.+2      	; 0x39a2 <disk_ioctl+0x18e>
    39a0:	64 cf       	rjmp	.-312    	; 0x386a <disk_ioctl+0x56>
    39a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    39a4:	8c 85       	ldd	r24, Y+12	; 0x0c
				if (CardType & CT_SD1) {	/* SDv1 */
    39a6:	f1 fe       	sbrs	r15, 1
    39a8:	16 c0       	rjmp	.+44     	; 0x39d6 <disk_ioctl+0x1c2>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    39aa:	88 1f       	adc	r24, r24
    39ac:	88 27       	eor	r24, r24
    39ae:	88 1f       	adc	r24, r24
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	01 96       	adiw	r24, 0x01	; 1
    39b4:	2f 73       	andi	r18, 0x3F	; 63
    39b6:	82 0f       	add	r24, r18
    39b8:	91 1d       	adc	r25, r1
    39ba:	82 0f       	add	r24, r18
    39bc:	91 1d       	adc	r25, r1
    39be:	2e 85       	ldd	r18, Y+14	; 0x0e
    39c0:	22 95       	swap	r18
    39c2:	26 95       	lsr	r18
    39c4:	26 95       	lsr	r18
    39c6:	23 70       	andi	r18, 0x03	; 3
    39c8:	21 50       	subi	r18, 0x01	; 1
    39ca:	02 c0       	rjmp	.+4      	; 0x39d0 <disk_ioctl+0x1bc>
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	2a 95       	dec	r18
    39d2:	e2 f7       	brpl	.-8      	; 0x39cc <disk_ioctl+0x1b8>
    39d4:	1c c0       	rjmp	.+56     	; 0x3a0e <disk_ioctl+0x1fa>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    39d6:	38 2f       	mov	r19, r24
    39d8:	33 70       	andi	r19, 0x03	; 3
    39da:	82 95       	swap	r24
    39dc:	86 95       	lsr	r24
    39de:	87 70       	andi	r24, 0x07	; 7
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	f8 e0       	ldi	r31, 0x08	; 8
    39e4:	3f 9f       	mul	r19, r31
    39e6:	80 0d       	add	r24, r0
    39e8:	91 1d       	adc	r25, r1
    39ea:	11 24       	eor	r1, r1
    39ec:	01 96       	adiw	r24, 0x01	; 1
    39ee:	2c 77       	andi	r18, 0x7C	; 124
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	35 95       	asr	r19
    39f4:	27 95       	ror	r18
    39f6:	35 95       	asr	r19
    39f8:	27 95       	ror	r18
    39fa:	2f 5f       	subi	r18, 0xFF	; 255
    39fc:	3f 4f       	sbci	r19, 0xFF	; 255
    39fe:	82 9f       	mul	r24, r18
    3a00:	a0 01       	movw	r20, r0
    3a02:	83 9f       	mul	r24, r19
    3a04:	50 0d       	add	r21, r0
    3a06:	92 9f       	mul	r25, r18
    3a08:	50 0d       	add	r21, r0
    3a0a:	11 24       	eor	r1, r1
    3a0c:	ca 01       	movw	r24, r20
    3a0e:	a0 e0       	ldi	r26, 0x00	; 0
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	b2 cf       	rjmp	.-156    	; 0x3978 <disk_ioctl+0x164>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    3a14:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <CardType>
    3a18:	fa 01       	movw	r30, r20
    3a1a:	80 83       	st	Z, r24
    3a1c:	b2 cf       	rjmp	.-156    	; 0x3982 <disk_ioctl+0x16e>
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    3a1e:	40 e0       	ldi	r20, 0x00	; 0
    3a20:	50 e0       	ldi	r21, 0x00	; 0
    3a22:	ba 01       	movw	r22, r20
    3a24:	89 e0       	ldi	r24, 0x09	; 9
    3a26:	04 c0       	rjmp	.+8      	; 0x3a30 <disk_ioctl+0x21c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    3a28:	40 e0       	ldi	r20, 0x00	; 0
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	ba 01       	movw	r22, r20
    3a2e:	8a e0       	ldi	r24, 0x0A	; 10
    3a30:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    3a34:	81 11       	cpse	r24, r1
    3a36:	19 cf       	rjmp	.-462    	; 0x386a <disk_ioctl+0x56>
			&& rcvr_datablock(ptr, 16))
    3a38:	60 e1       	ldi	r22, 0x10	; 16
    3a3a:	70 e0       	ldi	r23, 0x00	; 0
    3a3c:	23 c0       	rjmp	.+70     	; 0x3a84 <disk_ioctl+0x270>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    3a3e:	40 e0       	ldi	r20, 0x00	; 0
    3a40:	50 e0       	ldi	r21, 0x00	; 0
    3a42:	ba 01       	movw	r22, r20
    3a44:	8a e3       	ldi	r24, 0x3A	; 58
    3a46:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    3a4a:	81 11       	cpse	r24, r1
    3a4c:	0e cf       	rjmp	.-484    	; 0x386a <disk_ioctl+0x56>
    3a4e:	78 01       	movw	r14, r16
    3a50:	f4 e0       	ldi	r31, 0x04	; 4
    3a52:	ef 0e       	add	r14, r31
    3a54:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    3a56:	8f ef       	ldi	r24, 0xFF	; 255
    3a58:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
    3a5c:	f8 01       	movw	r30, r16
    3a5e:	81 93       	st	Z+, r24
    3a60:	8f 01       	movw	r16, r30
    3a62:	ee 15       	cp	r30, r14
    3a64:	ff 05       	cpc	r31, r15
    3a66:	b9 f7       	brne	.-18     	; 0x3a56 <disk_ioctl+0x242>
    3a68:	8c cf       	rjmp	.-232    	; 0x3982 <disk_ioctl+0x16e>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    3a6a:	40 e0       	ldi	r20, 0x00	; 0
    3a6c:	50 e0       	ldi	r21, 0x00	; 0
    3a6e:	ba 01       	movw	r22, r20
    3a70:	8d e8       	ldi	r24, 0x8D	; 141
    3a72:	0e 94 ef 19 	call	0x33de	; 0x33de <send_cmd>
    3a76:	81 11       	cpse	r24, r1
    3a78:	f8 ce       	rjmp	.-528    	; 0x386a <disk_ioctl+0x56>
			xchg_spi(0xFF);
    3a7a:	8f ef       	ldi	r24, 0xFF	; 255
    3a7c:	0e 94 89 19 	call	0x3312	; 0x3312 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    3a80:	60 e4       	ldi	r22, 0x40	; 64
    3a82:	70 e0       	ldi	r23, 0x00	; 0
    3a84:	c8 01       	movw	r24, r16
    3a86:	0e 94 92 19 	call	0x3324	; 0x3324 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    3a8a:	11 e0       	ldi	r17, 0x01	; 1
    3a8c:	89 2b       	or	r24, r25
    3a8e:	11 f0       	breq	.+4      	; 0x3a94 <disk_ioctl+0x280>
    3a90:	78 cf       	rjmp	.-272    	; 0x3982 <disk_ioctl+0x16e>
		Stat |= STA_NOINIT;
		res = RES_OK;
		break;
*/
	default:
		res = RES_PARERR;
    3a92:	14 e0       	ldi	r17, 0x04	; 4
	}

	deselect();
    3a94:	0e 94 8e 19 	call	0x331c	; 0x331c <deselect>

	return res;
    3a98:	81 2f       	mov	r24, r17
    3a9a:	03 c0       	rjmp	.+6      	; 0x3aa2 <disk_ioctl+0x28e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    3a9c:	84 e0       	ldi	r24, 0x04	; 4
    3a9e:	01 c0       	rjmp	.+2      	; 0x3aa2 <disk_ioctl+0x28e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3aa0:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    3aa2:	60 96       	adiw	r28, 0x10	; 16
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	f8 94       	cli
    3aa8:	de bf       	out	0x3e, r29	; 62
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	cd bf       	out	0x3d, r28	; 61
    3aae:	df 91       	pop	r29
    3ab0:	cf 91       	pop	r28
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	ff 90       	pop	r15
    3ab8:	ef 90       	pop	r14
    3aba:	08 95       	ret

00003abc <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    3abc:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Timer1>
	if (n) Timer1 = --n;
    3ac0:	88 23       	and	r24, r24
    3ac2:	19 f0       	breq	.+6      	; 0x3aca <disk_timerproc+0xe>
    3ac4:	81 50       	subi	r24, 0x01	; 1
    3ac6:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Timer1>
	n = Timer2;
    3aca:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Timer2>
	if (n) Timer2 = --n;
    3ace:	88 23       	and	r24, r24
    3ad0:	19 f0       	breq	.+6      	; 0x3ad8 <disk_timerproc+0x1c>
    3ad2:	81 50       	subi	r24, 0x01	; 1
    3ad4:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <Timer2>

	s = Stat;
    3ad8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Stat>
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
    3adc:	89 7f       	andi	r24, 0xF9	; 249
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    3ade:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Stat>
    3ae2:	08 95       	ret

00003ae4 <__vector_4>:
}

ISR(TIMER2_COMP_vect)
{
    3ae4:	1f 92       	push	r1
    3ae6:	0f 92       	push	r0
    3ae8:	0f b6       	in	r0, 0x3f	; 63
    3aea:	0f 92       	push	r0
    3aec:	11 24       	eor	r1, r1
    3aee:	2f 93       	push	r18
    3af0:	3f 93       	push	r19
    3af2:	4f 93       	push	r20
    3af4:	5f 93       	push	r21
    3af6:	6f 93       	push	r22
    3af8:	7f 93       	push	r23
    3afa:	8f 93       	push	r24
    3afc:	9f 93       	push	r25
    3afe:	af 93       	push	r26
    3b00:	bf 93       	push	r27
    3b02:	ef 93       	push	r30
    3b04:	ff 93       	push	r31
	//Timer++;			/* Performance counter for this module */
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
    3b06:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <disk_timerproc>
}
    3b0a:	ff 91       	pop	r31
    3b0c:	ef 91       	pop	r30
    3b0e:	bf 91       	pop	r27
    3b10:	af 91       	pop	r26
    3b12:	9f 91       	pop	r25
    3b14:	8f 91       	pop	r24
    3b16:	7f 91       	pop	r23
    3b18:	6f 91       	pop	r22
    3b1a:	5f 91       	pop	r21
    3b1c:	4f 91       	pop	r20
    3b1e:	3f 91       	pop	r19
    3b20:	2f 91       	pop	r18
    3b22:	0f 90       	pop	r0
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	0f 90       	pop	r0
    3b28:	1f 90       	pop	r1
    3b2a:	18 95       	reti

00003b2c <main>:
UINT bw;         /* File read/write count */
FILINFO fno; //not used but argument wanted for a function
uint8_t count;
int main(void){
	//Filozofia trochę inna niż zazwyczaj, bo zmieniamy kierunek DDR
	lcdinit();
    3b2c:	0e 94 b8 00 	call	0x170	; 0x170 <lcdinit>
	blinking(0);
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <blinking>
	
	//KARTA SD SECTION
			/* Give a work area to the default drive */
			fr = f_mount(&FatFs, "", 1);
    3b36:	41 e0       	ldi	r20, 0x01	; 1
    3b38:	68 e5       	ldi	r22, 0x58	; 88
    3b3a:	71 e0       	ldi	r23, 0x01	; 1
    3b3c:	8d e9       	ldi	r24, 0x9D	; 157
    3b3e:	91 e0       	ldi	r25, 0x01	; 1
    3b40:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <f_mount>
    3b44:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <fr>
			if (fr == 0){
				lcd_set_xy(0,0);
    3b48:	60 e0       	ldi	r22, 0x00	; 0
	blinking(0);
	
	//KARTA SD SECTION
			/* Give a work area to the default drive */
			fr = f_mount(&FatFs, "", 1);
			if (fr == 0){
    3b4a:	81 11       	cpse	r24, r1
    3b4c:	07 c0       	rjmp	.+14     	; 0x3b5c <main+0x30>
				lcd_set_xy(0,0);
    3b4e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_set_xy>
				fprintf(&lcd_stream, "Zamontowano");
    3b52:	60 e6       	ldi	r22, 0x60	; 96
    3b54:	70 e0       	ldi	r23, 0x00	; 0
    3b56:	8f ee       	ldi	r24, 0xEF	; 239
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	07 c0       	rjmp	.+14     	; 0x3b6a <main+0x3e>
			}
				
			else{
				lcd_set_xy(0,0);
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_set_xy>
				fprintf(&lcd_stream, "Klopoty");
    3b62:	60 e6       	ldi	r22, 0x60	; 96
    3b64:	70 e0       	ldi	r23, 0x00	; 0
    3b66:	8b ef       	ldi	r24, 0xFB	; 251
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <fputs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b6e:	2f ef       	ldi	r18, 0xFF	; 255
    3b70:	87 ea       	ldi	r24, 0xA7	; 167
    3b72:	91 e6       	ldi	r25, 0x61	; 97
    3b74:	21 50       	subi	r18, 0x01	; 1
    3b76:	80 40       	sbci	r24, 0x00	; 0
    3b78:	90 40       	sbci	r25, 0x00	; 0
    3b7a:	e1 f7       	brne	.-8      	; 0x3b74 <main+0x48>
    3b7c:	00 c0       	rjmp	.+0      	; 0x3b7e <main+0x52>
    3b7e:	00 00       	nop
			}
			_delay_ms(2000);
			
			//Checking if file exists
			sprintf(buffer, "data%d.txt", count);
    3b80:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <count>
    3b84:	1f 92       	push	r1
    3b86:	8f 93       	push	r24
    3b88:	83 e0       	ldi	r24, 0x03	; 3
    3b8a:	91 e0       	ldi	r25, 0x01	; 1
    3b8c:	9f 93       	push	r25
    3b8e:	8f 93       	push	r24
    3b90:	8c ec       	ldi	r24, 0xCC	; 204
    3b92:	93 e0       	ldi	r25, 0x03	; 3
    3b94:	9f 93       	push	r25
    3b96:	8f 93       	push	r24
    3b98:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <sprintf>
			fr = f_stat(buffer, &fno);
    3b9c:	67 e8       	ldi	r22, 0x87	; 135
    3b9e:	71 e0       	ldi	r23, 0x01	; 1
    3ba0:	8c ec       	ldi	r24, 0xCC	; 204
    3ba2:	93 e0       	ldi	r25, 0x03	; 3
    3ba4:	0e 94 23 15 	call	0x2a46	; 0x2a46 <f_stat>
    3ba8:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <fr>
			while(!fr){
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
				count++;
				sprintf(buffer, "data%d.txt", count);
    3bb8:	c3 e0       	ldi	r28, 0x03	; 3
    3bba:	d1 e0       	ldi	r29, 0x01	; 1
    3bbc:	0c ec       	ldi	r16, 0xCC	; 204
    3bbe:	13 e0       	ldi	r17, 0x03	; 3
			_delay_ms(2000);
			
			//Checking if file exists
			sprintf(buffer, "data%d.txt", count);
			fr = f_stat(buffer, &fno);
			while(!fr){
    3bc0:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <fr>
    3bc4:	81 11       	cpse	r24, r1
    3bc6:	1c c0       	rjmp	.+56     	; 0x3c00 <main+0xd4>
				count++;
    3bc8:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <count>
    3bcc:	8f 5f       	subi	r24, 0xFF	; 255
    3bce:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <count>
				sprintf(buffer, "data%d.txt", count);
    3bd2:	1f 92       	push	r1
    3bd4:	8f 93       	push	r24
    3bd6:	df 93       	push	r29
    3bd8:	cf 93       	push	r28
    3bda:	1f 93       	push	r17
    3bdc:	0f 93       	push	r16
    3bde:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <sprintf>
				fr = f_stat(buffer, &fno);
    3be2:	67 e8       	ldi	r22, 0x87	; 135
    3be4:	71 e0       	ldi	r23, 0x01	; 1
    3be6:	8c ec       	ldi	r24, 0xCC	; 204
    3be8:	93 e0       	ldi	r25, 0x03	; 3
    3bea:	0e 94 23 15 	call	0x2a46	; 0x2a46 <f_stat>
    3bee:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <fr>
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	e0 cf       	rjmp	.-64     	; 0x3bc0 <main+0x94>
			}
			
			/* Open a text file */
			fr = f_open(&fil, buffer, FA_CREATE_ALWAYS | FA_WRITE); 
    3c00:	4a e0       	ldi	r20, 0x0A	; 10
    3c02:	6c ec       	ldi	r22, 0xCC	; 204
    3c04:	73 e0       	ldi	r23, 0x03	; 3
    3c06:	84 ee       	ldi	r24, 0xE4	; 228
    3c08:	93 e0       	ldi	r25, 0x03	; 3
    3c0a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <f_open>
    3c0e:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <fr>
			if (fr == 0){
				lcd_set_xy(0,0);
    3c12:	60 e0       	ldi	r22, 0x00	; 0
				fr = f_stat(buffer, &fno);
			}
			
			/* Open a text file */
			fr = f_open(&fil, buffer, FA_CREATE_ALWAYS | FA_WRITE); 
			if (fr == 0){
    3c14:	81 11       	cpse	r24, r1
    3c16:	07 c0       	rjmp	.+14     	; 0x3c26 <main+0xfa>
				lcd_set_xy(0,0);
    3c18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_set_xy>
				fprintf(&lcd_stream, "Wzieto otwarto plik c:");
    3c1c:	60 e6       	ldi	r22, 0x60	; 96
    3c1e:	70 e0       	ldi	r23, 0x00	; 0
    3c20:	8e e0       	ldi	r24, 0x0E	; 14
    3c22:	91 e0       	ldi	r25, 0x01	; 1
    3c24:	07 c0       	rjmp	.+14     	; 0x3c34 <main+0x108>
			}
				
			else{
				lcd_set_xy(0,0);
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_set_xy>
				fprintf(&lcd_stream, "Nie otwarto pliku :c");
    3c2c:	60 e6       	ldi	r22, 0x60	; 96
    3c2e:	70 e0       	ldi	r23, 0x00	; 0
    3c30:	85 e2       	ldi	r24, 0x25	; 37
    3c32:	91 e0       	ldi	r25, 0x01	; 1
    3c34:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <fputs>
			}
			
			PORTD |= (1<<7);
    3c38:	97 9a       	sbi	0x12, 7	; 18
			count = 0;	
    3c3a:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <count>
		uint8_t mlodsze = OW_recv();
		uint8_t starsze = OW_recv();
		uint16_t temperatura = (starsze<<8)|(mlodsze);
		
		uint8_t star = temperatura >> 4;
		uint16_t mlod = (temperatura & (0x0f))*625;
    3c3e:	91 e7       	ldi	r25, 0x71	; 113
    3c40:	89 2e       	mov	r8, r25
    3c42:	92 e0       	ldi	r25, 0x02	; 2
    3c44:	99 2e       	mov	r9, r25
		
		lcd_set_xy(0,1);
		fprintf(&lcd_stream, "T = %d.%04d %c C", star, mlod, 0b11011111);
    3c46:	2f ed       	ldi	r18, 0xDF	; 223
    3c48:	52 2e       	mov	r5, r18
    3c4a:	3a e3       	ldi	r19, 0x3A	; 58
    3c4c:	a3 2e       	mov	r10, r19
    3c4e:	31 e0       	ldi	r19, 0x01	; 1
    3c50:	b3 2e       	mov	r11, r19
    3c52:	40 e6       	ldi	r20, 0x60	; 96
    3c54:	c4 2e       	mov	r12, r20
    3c56:	40 e0       	ldi	r20, 0x00	; 0
    3c58:	d4 2e       	mov	r13, r20
		sprintf(buffer, "%d \t %d.%04d\n", count, star, mlod);
    3c5a:	5b e4       	ldi	r21, 0x4B	; 75
    3c5c:	65 2e       	mov	r6, r21
    3c5e:	51 e0       	ldi	r21, 0x01	; 1
    3c60:	75 2e       	mov	r7, r21
    3c62:	6c ec       	ldi	r22, 0xCC	; 204
    3c64:	e6 2e       	mov	r14, r22
    3c66:	63 e0       	ldi	r22, 0x03	; 3
    3c68:	f6 2e       	mov	r15, r22
			count = 0;	
	//END SECTION SD
		
	while(1)
	{
		OW_reset();
    3c6a:	0e 94 04 01 	call	0x208	; 0x208 <OW_reset>
		//skip rom to jest hej wy termometry
		OW_send(0xCC); //SKIP ROM
    3c6e:	8c ec       	ldi	r24, 0xCC	; 204
    3c70:	0e 94 45 01 	call	0x28a	; 0x28a <OW_send>
		OW_send(0x44); //CONVERT T mierzcie temperature
    3c74:	84 e4       	ldi	r24, 0x44	; 68
    3c76:	0e 94 45 01 	call	0x28a	; 0x28a <OW_send>
    3c7a:	9f ef       	ldi	r25, 0xFF	; 255
    3c7c:	23 ed       	ldi	r18, 0xD3	; 211
    3c7e:	80 e3       	ldi	r24, 0x30	; 48
    3c80:	91 50       	subi	r25, 0x01	; 1
    3c82:	20 40       	sbci	r18, 0x00	; 0
    3c84:	80 40       	sbci	r24, 0x00	; 0
    3c86:	e1 f7       	brne	.-8      	; 0x3c80 <main+0x154>
    3c88:	00 c0       	rjmp	.+0      	; 0x3c8a <main+0x15e>
    3c8a:	00 00       	nop
		_delay_ms(1000); //co sekunde pomiar temperatury
		
		
		
		OW_reset();
    3c8c:	0e 94 04 01 	call	0x208	; 0x208 <OW_reset>
		OW_send(0xCC);//hej wy
    3c90:	8c ec       	ldi	r24, 0xCC	; 204
    3c92:	0e 94 45 01 	call	0x28a	; 0x28a <OW_send>
		OW_send(0xBE); //dajta temperature
    3c96:	8e eb       	ldi	r24, 0xBE	; 190
    3c98:	0e 94 45 01 	call	0x28a	; 0x28a <OW_send>
		uint8_t mlodsze = OW_recv();
    3c9c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OW_recv>
    3ca0:	c8 2f       	mov	r28, r24
		uint8_t starsze = OW_recv();
    3ca2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <OW_recv>
		uint16_t temperatura = (starsze<<8)|(mlodsze);
    3ca6:	d0 e0       	ldi	r29, 0x00	; 0
    3ca8:	d8 2b       	or	r29, r24
		
		uint8_t star = temperatura >> 4;
		uint16_t mlod = (temperatura & (0x0f))*625;
    3caa:	ce 01       	movw	r24, r28
    3cac:	8f 70       	andi	r24, 0x0F	; 15
    3cae:	99 27       	eor	r25, r25
    3cb0:	88 9d       	mul	r24, r8
    3cb2:	80 01       	movw	r16, r0
    3cb4:	89 9d       	mul	r24, r9
    3cb6:	10 0d       	add	r17, r0
    3cb8:	98 9d       	mul	r25, r8
    3cba:	10 0d       	add	r17, r0
    3cbc:	11 24       	eor	r1, r1
		
		lcd_set_xy(0,1);
    3cbe:	61 e0       	ldi	r22, 0x01	; 1
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_set_xy>
		fprintf(&lcd_stream, "T = %d.%04d %c C", star, mlod, 0b11011111);
    3cc6:	84 e0       	ldi	r24, 0x04	; 4
    3cc8:	d6 95       	lsr	r29
    3cca:	c7 95       	ror	r28
    3ccc:	8a 95       	dec	r24
    3cce:	e1 f7       	brne	.-8      	; 0x3cc8 <main+0x19c>
    3cd0:	dd 27       	eor	r29, r29
    3cd2:	1f 92       	push	r1
    3cd4:	5f 92       	push	r5
    3cd6:	1f 93       	push	r17
    3cd8:	0f 93       	push	r16
    3cda:	df 93       	push	r29
    3cdc:	cf 93       	push	r28
    3cde:	bf 92       	push	r11
    3ce0:	af 92       	push	r10
    3ce2:	df 92       	push	r13
    3ce4:	cf 92       	push	r12
    3ce6:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <fprintf>
		sprintf(buffer, "%d \t %d.%04d\n", count, star, mlod);
    3cea:	1f 93       	push	r17
    3cec:	0f 93       	push	r16
    3cee:	df 93       	push	r29
    3cf0:	cf 93       	push	r28
    3cf2:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <count>
    3cf6:	1f 92       	push	r1
    3cf8:	8f 93       	push	r24
    3cfa:	7f 92       	push	r7
    3cfc:	6f 92       	push	r6
    3cfe:	ff 92       	push	r15
    3d00:	ef 92       	push	r14
    3d02:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <sprintf>
		f_write(&fil, buffer, strlen(buffer), &bw);
    3d06:	f7 01       	movw	r30, r14
    3d08:	01 90       	ld	r0, Z+
    3d0a:	00 20       	and	r0, r0
    3d0c:	e9 f7       	brne	.-6      	; 0x3d08 <main+0x1dc>
    3d0e:	31 97       	sbiw	r30, 0x01	; 1
    3d10:	af 01       	movw	r20, r30
    3d12:	4c 5c       	subi	r20, 0xCC	; 204
    3d14:	53 40       	sbci	r21, 0x03	; 3
    3d16:	20 ee       	ldi	r18, 0xE0	; 224
    3d18:	33 e0       	ldi	r19, 0x03	; 3
    3d1a:	6c ec       	ldi	r22, 0xCC	; 204
    3d1c:	73 e0       	ldi	r23, 0x03	; 3
    3d1e:	84 ee       	ldi	r24, 0xE4	; 228
    3d20:	93 e0       	ldi	r25, 0x03	; 3
    3d22:	0e 94 b6 10 	call	0x216c	; 0x216c <f_write>
		count ++;
    3d26:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <count>
    3d2a:	8f 5f       	subi	r24, 0xFF	; 255
    3d2c:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <count>
		if(!(PIND&(1<<7))){
    3d30:	8d b7       	in	r24, 0x3d	; 61
    3d32:	9e b7       	in	r25, 0x3e	; 62
    3d34:	44 96       	adiw	r24, 0x14	; 20
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	f8 94       	cli
    3d3a:	9e bf       	out	0x3e, r25	; 62
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	8d bf       	out	0x3d, r24	; 61
    3d40:	87 99       	sbic	0x10, 7	; 16
    3d42:	93 cf       	rjmp	.-218    	; 0x3c6a <main+0x13e>
			f_close(&fil);
    3d44:	84 ee       	ldi	r24, 0xE4	; 228
    3d46:	93 e0       	ldi	r25, 0x03	; 3
    3d48:	0e 94 b7 12 	call	0x256e	; 0x256e <f_close>
			f_unmount("");
    3d4c:	40 e0       	ldi	r20, 0x00	; 0
    3d4e:	68 e5       	ldi	r22, 0x58	; 88
    3d50:	71 e0       	ldi	r23, 0x01	; 1
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <f_mount>
			lcd_set_xy(0,0);
    3d5a:	60 e0       	ldi	r22, 0x00	; 0
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_set_xy>
			fprintf(&lcd_stream, "Zegnaj.... :c");
    3d62:	60 e6       	ldi	r22, 0x60	; 96
    3d64:	70 e0       	ldi	r23, 0x00	; 0
    3d66:	89 e5       	ldi	r24, 0x59	; 89
    3d68:	91 e0       	ldi	r25, 0x01	; 1
    3d6a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <fputs>
    3d6e:	ff cf       	rjmp	.-2      	; 0x3d6e <main+0x242>

00003d70 <__udivmodsi4>:
    3d70:	a1 e2       	ldi	r26, 0x21	; 33
    3d72:	1a 2e       	mov	r1, r26
    3d74:	aa 1b       	sub	r26, r26
    3d76:	bb 1b       	sub	r27, r27
    3d78:	fd 01       	movw	r30, r26
    3d7a:	0d c0       	rjmp	.+26     	; 0x3d96 <__udivmodsi4_ep>

00003d7c <__udivmodsi4_loop>:
    3d7c:	aa 1f       	adc	r26, r26
    3d7e:	bb 1f       	adc	r27, r27
    3d80:	ee 1f       	adc	r30, r30
    3d82:	ff 1f       	adc	r31, r31
    3d84:	a2 17       	cp	r26, r18
    3d86:	b3 07       	cpc	r27, r19
    3d88:	e4 07       	cpc	r30, r20
    3d8a:	f5 07       	cpc	r31, r21
    3d8c:	20 f0       	brcs	.+8      	; 0x3d96 <__udivmodsi4_ep>
    3d8e:	a2 1b       	sub	r26, r18
    3d90:	b3 0b       	sbc	r27, r19
    3d92:	e4 0b       	sbc	r30, r20
    3d94:	f5 0b       	sbc	r31, r21

00003d96 <__udivmodsi4_ep>:
    3d96:	66 1f       	adc	r22, r22
    3d98:	77 1f       	adc	r23, r23
    3d9a:	88 1f       	adc	r24, r24
    3d9c:	99 1f       	adc	r25, r25
    3d9e:	1a 94       	dec	r1
    3da0:	69 f7       	brne	.-38     	; 0x3d7c <__udivmodsi4_loop>
    3da2:	60 95       	com	r22
    3da4:	70 95       	com	r23
    3da6:	80 95       	com	r24
    3da8:	90 95       	com	r25
    3daa:	9b 01       	movw	r18, r22
    3dac:	ac 01       	movw	r20, r24
    3dae:	bd 01       	movw	r22, r26
    3db0:	cf 01       	movw	r24, r30
    3db2:	08 95       	ret

00003db4 <__tablejump2__>:
    3db4:	ee 0f       	add	r30, r30
    3db6:	ff 1f       	adc	r31, r31
    3db8:	05 90       	lpm	r0, Z+
    3dba:	f4 91       	lpm	r31, Z
    3dbc:	e0 2d       	mov	r30, r0
    3dbe:	09 94       	ijmp

00003dc0 <__muluhisi3>:
    3dc0:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <__umulhisi3>
    3dc4:	a5 9f       	mul	r26, r21
    3dc6:	90 0d       	add	r25, r0
    3dc8:	b4 9f       	mul	r27, r20
    3dca:	90 0d       	add	r25, r0
    3dcc:	a4 9f       	mul	r26, r20
    3dce:	80 0d       	add	r24, r0
    3dd0:	91 1d       	adc	r25, r1
    3dd2:	11 24       	eor	r1, r1
    3dd4:	08 95       	ret

00003dd6 <__umulhisi3>:
    3dd6:	a2 9f       	mul	r26, r18
    3dd8:	b0 01       	movw	r22, r0
    3dda:	b3 9f       	mul	r27, r19
    3ddc:	c0 01       	movw	r24, r0
    3dde:	a3 9f       	mul	r26, r19
    3de0:	70 0d       	add	r23, r0
    3de2:	81 1d       	adc	r24, r1
    3de4:	11 24       	eor	r1, r1
    3de6:	91 1d       	adc	r25, r1
    3de8:	b2 9f       	mul	r27, r18
    3dea:	70 0d       	add	r23, r0
    3dec:	81 1d       	adc	r24, r1
    3dee:	11 24       	eor	r1, r1
    3df0:	91 1d       	adc	r25, r1
    3df2:	08 95       	ret

00003df4 <fprintf>:
    3df4:	a0 e0       	ldi	r26, 0x00	; 0
    3df6:	b0 e0       	ldi	r27, 0x00	; 0
    3df8:	e0 e0       	ldi	r30, 0x00	; 0
    3dfa:	ff e1       	ldi	r31, 0x1F	; 31
    3dfc:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__prologue_saves__+0x20>
    3e00:	ae 01       	movw	r20, r28
    3e02:	47 5f       	subi	r20, 0xF7	; 247
    3e04:	5f 4f       	sbci	r21, 0xFF	; 255
    3e06:	6f 81       	ldd	r22, Y+7	; 0x07
    3e08:	78 85       	ldd	r23, Y+8	; 0x08
    3e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0e:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <vfprintf>
    3e12:	e2 e0       	ldi	r30, 0x02	; 2
    3e14:	0c 94 15 22 	jmp	0x442a	; 0x442a <__epilogue_restores__+0x20>

00003e18 <fputs>:
    3e18:	ef 92       	push	r14
    3e1a:	ff 92       	push	r15
    3e1c:	0f 93       	push	r16
    3e1e:	1f 93       	push	r17
    3e20:	cf 93       	push	r28
    3e22:	df 93       	push	r29
    3e24:	db 01       	movw	r26, r22
    3e26:	13 96       	adiw	r26, 0x03	; 3
    3e28:	2c 91       	ld	r18, X
    3e2a:	21 ff       	sbrs	r18, 1
    3e2c:	18 c0       	rjmp	.+48     	; 0x3e5e <fputs+0x46>
    3e2e:	8b 01       	movw	r16, r22
    3e30:	7c 01       	movw	r14, r24
    3e32:	d0 e0       	ldi	r29, 0x00	; 0
    3e34:	c0 e0       	ldi	r28, 0x00	; 0
    3e36:	f7 01       	movw	r30, r14
    3e38:	81 91       	ld	r24, Z+
    3e3a:	7f 01       	movw	r14, r30
    3e3c:	88 23       	and	r24, r24
    3e3e:	61 f0       	breq	.+24     	; 0x3e58 <fputs+0x40>
    3e40:	d8 01       	movw	r26, r16
    3e42:	18 96       	adiw	r26, 0x08	; 8
    3e44:	ed 91       	ld	r30, X+
    3e46:	fc 91       	ld	r31, X
    3e48:	19 97       	sbiw	r26, 0x09	; 9
    3e4a:	b8 01       	movw	r22, r16
    3e4c:	09 95       	icall
    3e4e:	89 2b       	or	r24, r25
    3e50:	91 f3       	breq	.-28     	; 0x3e36 <fputs+0x1e>
    3e52:	df ef       	ldi	r29, 0xFF	; 255
    3e54:	cf ef       	ldi	r28, 0xFF	; 255
    3e56:	ef cf       	rjmp	.-34     	; 0x3e36 <fputs+0x1e>
    3e58:	8d 2f       	mov	r24, r29
    3e5a:	9c 2f       	mov	r25, r28
    3e5c:	02 c0       	rjmp	.+4      	; 0x3e62 <fputs+0x4a>
    3e5e:	8f ef       	ldi	r24, 0xFF	; 255
    3e60:	9f ef       	ldi	r25, 0xFF	; 255
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	e6 e0       	ldi	r30, 0x06	; 6
    3e68:	0c 94 11 22 	jmp	0x4422	; 0x4422 <__epilogue_restores__+0x18>

00003e6c <sprintf>:
    3e6c:	ae e0       	ldi	r26, 0x0E	; 14
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	ec e3       	ldi	r30, 0x3C	; 60
    3e72:	ff e1       	ldi	r31, 0x1F	; 31
    3e74:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__prologue_saves__+0x1c>
    3e78:	0d 89       	ldd	r16, Y+21	; 0x15
    3e7a:	1e 89       	ldd	r17, Y+22	; 0x16
    3e7c:	86 e0       	ldi	r24, 0x06	; 6
    3e7e:	8c 83       	std	Y+4, r24	; 0x04
    3e80:	1a 83       	std	Y+2, r17	; 0x02
    3e82:	09 83       	std	Y+1, r16	; 0x01
    3e84:	8f ef       	ldi	r24, 0xFF	; 255
    3e86:	9f e7       	ldi	r25, 0x7F	; 127
    3e88:	9e 83       	std	Y+6, r25	; 0x06
    3e8a:	8d 83       	std	Y+5, r24	; 0x05
    3e8c:	ae 01       	movw	r20, r28
    3e8e:	47 5e       	subi	r20, 0xE7	; 231
    3e90:	5f 4f       	sbci	r21, 0xFF	; 255
    3e92:	6f 89       	ldd	r22, Y+23	; 0x17
    3e94:	78 8d       	ldd	r23, Y+24	; 0x18
    3e96:	ce 01       	movw	r24, r28
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <vfprintf>
    3e9e:	ef 81       	ldd	r30, Y+7	; 0x07
    3ea0:	f8 85       	ldd	r31, Y+8	; 0x08
    3ea2:	e0 0f       	add	r30, r16
    3ea4:	f1 1f       	adc	r31, r17
    3ea6:	10 82       	st	Z, r1
    3ea8:	2e 96       	adiw	r28, 0x0e	; 14
    3eaa:	e4 e0       	ldi	r30, 0x04	; 4
    3eac:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__epilogue_restores__+0x1c>

00003eb0 <vfprintf>:
    3eb0:	ab e0       	ldi	r26, 0x0B	; 11
    3eb2:	b0 e0       	ldi	r27, 0x00	; 0
    3eb4:	ee e5       	ldi	r30, 0x5E	; 94
    3eb6:	ff e1       	ldi	r31, 0x1F	; 31
    3eb8:	0c 94 e9 21 	jmp	0x43d2	; 0x43d2 <__prologue_saves__>
    3ebc:	6c 01       	movw	r12, r24
    3ebe:	7b 01       	movw	r14, r22
    3ec0:	8a 01       	movw	r16, r20
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	17 82       	std	Z+7, r1	; 0x07
    3ec6:	16 82       	std	Z+6, r1	; 0x06
    3ec8:	83 81       	ldd	r24, Z+3	; 0x03
    3eca:	81 ff       	sbrs	r24, 1
    3ecc:	cc c1       	rjmp	.+920    	; 0x4266 <vfprintf+0x3b6>
    3ece:	ce 01       	movw	r24, r28
    3ed0:	01 96       	adiw	r24, 0x01	; 1
    3ed2:	3c 01       	movw	r6, r24
    3ed4:	f6 01       	movw	r30, r12
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	f7 01       	movw	r30, r14
    3eda:	93 fd       	sbrc	r25, 3
    3edc:	85 91       	lpm	r24, Z+
    3ede:	93 ff       	sbrs	r25, 3
    3ee0:	81 91       	ld	r24, Z+
    3ee2:	7f 01       	movw	r14, r30
    3ee4:	88 23       	and	r24, r24
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <vfprintf+0x3a>
    3ee8:	ba c1       	rjmp	.+884    	; 0x425e <vfprintf+0x3ae>
    3eea:	85 32       	cpi	r24, 0x25	; 37
    3eec:	39 f4       	brne	.+14     	; 0x3efc <vfprintf+0x4c>
    3eee:	93 fd       	sbrc	r25, 3
    3ef0:	85 91       	lpm	r24, Z+
    3ef2:	93 ff       	sbrs	r25, 3
    3ef4:	81 91       	ld	r24, Z+
    3ef6:	7f 01       	movw	r14, r30
    3ef8:	85 32       	cpi	r24, 0x25	; 37
    3efa:	29 f4       	brne	.+10     	; 0x3f06 <vfprintf+0x56>
    3efc:	b6 01       	movw	r22, r12
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    3f04:	e7 cf       	rjmp	.-50     	; 0x3ed4 <vfprintf+0x24>
    3f06:	91 2c       	mov	r9, r1
    3f08:	21 2c       	mov	r2, r1
    3f0a:	31 2c       	mov	r3, r1
    3f0c:	ff e1       	ldi	r31, 0x1F	; 31
    3f0e:	f3 15       	cp	r31, r3
    3f10:	d8 f0       	brcs	.+54     	; 0x3f48 <vfprintf+0x98>
    3f12:	8b 32       	cpi	r24, 0x2B	; 43
    3f14:	79 f0       	breq	.+30     	; 0x3f34 <vfprintf+0x84>
    3f16:	38 f4       	brcc	.+14     	; 0x3f26 <vfprintf+0x76>
    3f18:	80 32       	cpi	r24, 0x20	; 32
    3f1a:	79 f0       	breq	.+30     	; 0x3f3a <vfprintf+0x8a>
    3f1c:	83 32       	cpi	r24, 0x23	; 35
    3f1e:	a1 f4       	brne	.+40     	; 0x3f48 <vfprintf+0x98>
    3f20:	23 2d       	mov	r18, r3
    3f22:	20 61       	ori	r18, 0x10	; 16
    3f24:	1d c0       	rjmp	.+58     	; 0x3f60 <vfprintf+0xb0>
    3f26:	8d 32       	cpi	r24, 0x2D	; 45
    3f28:	61 f0       	breq	.+24     	; 0x3f42 <vfprintf+0x92>
    3f2a:	80 33       	cpi	r24, 0x30	; 48
    3f2c:	69 f4       	brne	.+26     	; 0x3f48 <vfprintf+0x98>
    3f2e:	23 2d       	mov	r18, r3
    3f30:	21 60       	ori	r18, 0x01	; 1
    3f32:	16 c0       	rjmp	.+44     	; 0x3f60 <vfprintf+0xb0>
    3f34:	83 2d       	mov	r24, r3
    3f36:	82 60       	ori	r24, 0x02	; 2
    3f38:	38 2e       	mov	r3, r24
    3f3a:	e3 2d       	mov	r30, r3
    3f3c:	e4 60       	ori	r30, 0x04	; 4
    3f3e:	3e 2e       	mov	r3, r30
    3f40:	2a c0       	rjmp	.+84     	; 0x3f96 <vfprintf+0xe6>
    3f42:	f3 2d       	mov	r31, r3
    3f44:	f8 60       	ori	r31, 0x08	; 8
    3f46:	1d c0       	rjmp	.+58     	; 0x3f82 <vfprintf+0xd2>
    3f48:	37 fc       	sbrc	r3, 7
    3f4a:	2d c0       	rjmp	.+90     	; 0x3fa6 <vfprintf+0xf6>
    3f4c:	20 ed       	ldi	r18, 0xD0	; 208
    3f4e:	28 0f       	add	r18, r24
    3f50:	2a 30       	cpi	r18, 0x0A	; 10
    3f52:	40 f0       	brcs	.+16     	; 0x3f64 <vfprintf+0xb4>
    3f54:	8e 32       	cpi	r24, 0x2E	; 46
    3f56:	b9 f4       	brne	.+46     	; 0x3f86 <vfprintf+0xd6>
    3f58:	36 fc       	sbrc	r3, 6
    3f5a:	81 c1       	rjmp	.+770    	; 0x425e <vfprintf+0x3ae>
    3f5c:	23 2d       	mov	r18, r3
    3f5e:	20 64       	ori	r18, 0x40	; 64
    3f60:	32 2e       	mov	r3, r18
    3f62:	19 c0       	rjmp	.+50     	; 0x3f96 <vfprintf+0xe6>
    3f64:	36 fe       	sbrs	r3, 6
    3f66:	06 c0       	rjmp	.+12     	; 0x3f74 <vfprintf+0xc4>
    3f68:	8a e0       	ldi	r24, 0x0A	; 10
    3f6a:	98 9e       	mul	r9, r24
    3f6c:	20 0d       	add	r18, r0
    3f6e:	11 24       	eor	r1, r1
    3f70:	92 2e       	mov	r9, r18
    3f72:	11 c0       	rjmp	.+34     	; 0x3f96 <vfprintf+0xe6>
    3f74:	ea e0       	ldi	r30, 0x0A	; 10
    3f76:	2e 9e       	mul	r2, r30
    3f78:	20 0d       	add	r18, r0
    3f7a:	11 24       	eor	r1, r1
    3f7c:	22 2e       	mov	r2, r18
    3f7e:	f3 2d       	mov	r31, r3
    3f80:	f0 62       	ori	r31, 0x20	; 32
    3f82:	3f 2e       	mov	r3, r31
    3f84:	08 c0       	rjmp	.+16     	; 0x3f96 <vfprintf+0xe6>
    3f86:	8c 36       	cpi	r24, 0x6C	; 108
    3f88:	21 f4       	brne	.+8      	; 0x3f92 <vfprintf+0xe2>
    3f8a:	83 2d       	mov	r24, r3
    3f8c:	80 68       	ori	r24, 0x80	; 128
    3f8e:	38 2e       	mov	r3, r24
    3f90:	02 c0       	rjmp	.+4      	; 0x3f96 <vfprintf+0xe6>
    3f92:	88 36       	cpi	r24, 0x68	; 104
    3f94:	41 f4       	brne	.+16     	; 0x3fa6 <vfprintf+0xf6>
    3f96:	f7 01       	movw	r30, r14
    3f98:	93 fd       	sbrc	r25, 3
    3f9a:	85 91       	lpm	r24, Z+
    3f9c:	93 ff       	sbrs	r25, 3
    3f9e:	81 91       	ld	r24, Z+
    3fa0:	7f 01       	movw	r14, r30
    3fa2:	81 11       	cpse	r24, r1
    3fa4:	b3 cf       	rjmp	.-154    	; 0x3f0c <vfprintf+0x5c>
    3fa6:	98 2f       	mov	r25, r24
    3fa8:	9f 7d       	andi	r25, 0xDF	; 223
    3faa:	95 54       	subi	r25, 0x45	; 69
    3fac:	93 30       	cpi	r25, 0x03	; 3
    3fae:	28 f4       	brcc	.+10     	; 0x3fba <vfprintf+0x10a>
    3fb0:	0c 5f       	subi	r16, 0xFC	; 252
    3fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb4:	9f e3       	ldi	r25, 0x3F	; 63
    3fb6:	99 83       	std	Y+1, r25	; 0x01
    3fb8:	0d c0       	rjmp	.+26     	; 0x3fd4 <vfprintf+0x124>
    3fba:	83 36       	cpi	r24, 0x63	; 99
    3fbc:	31 f0       	breq	.+12     	; 0x3fca <vfprintf+0x11a>
    3fbe:	83 37       	cpi	r24, 0x73	; 115
    3fc0:	71 f0       	breq	.+28     	; 0x3fde <vfprintf+0x12e>
    3fc2:	83 35       	cpi	r24, 0x53	; 83
    3fc4:	09 f0       	breq	.+2      	; 0x3fc8 <vfprintf+0x118>
    3fc6:	59 c0       	rjmp	.+178    	; 0x407a <vfprintf+0x1ca>
    3fc8:	21 c0       	rjmp	.+66     	; 0x400c <vfprintf+0x15c>
    3fca:	f8 01       	movw	r30, r16
    3fcc:	80 81       	ld	r24, Z
    3fce:	89 83       	std	Y+1, r24	; 0x01
    3fd0:	0e 5f       	subi	r16, 0xFE	; 254
    3fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd4:	88 24       	eor	r8, r8
    3fd6:	83 94       	inc	r8
    3fd8:	91 2c       	mov	r9, r1
    3fda:	53 01       	movw	r10, r6
    3fdc:	13 c0       	rjmp	.+38     	; 0x4004 <vfprintf+0x154>
    3fde:	28 01       	movw	r4, r16
    3fe0:	f2 e0       	ldi	r31, 0x02	; 2
    3fe2:	4f 0e       	add	r4, r31
    3fe4:	51 1c       	adc	r5, r1
    3fe6:	f8 01       	movw	r30, r16
    3fe8:	a0 80       	ld	r10, Z
    3fea:	b1 80       	ldd	r11, Z+1	; 0x01
    3fec:	36 fe       	sbrs	r3, 6
    3fee:	03 c0       	rjmp	.+6      	; 0x3ff6 <vfprintf+0x146>
    3ff0:	69 2d       	mov	r22, r9
    3ff2:	70 e0       	ldi	r23, 0x00	; 0
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <vfprintf+0x14a>
    3ff6:	6f ef       	ldi	r22, 0xFF	; 255
    3ff8:	7f ef       	ldi	r23, 0xFF	; 255
    3ffa:	c5 01       	movw	r24, r10
    3ffc:	0e 94 44 21 	call	0x4288	; 0x4288 <strnlen>
    4000:	4c 01       	movw	r8, r24
    4002:	82 01       	movw	r16, r4
    4004:	f3 2d       	mov	r31, r3
    4006:	ff 77       	andi	r31, 0x7F	; 127
    4008:	3f 2e       	mov	r3, r31
    400a:	16 c0       	rjmp	.+44     	; 0x4038 <vfprintf+0x188>
    400c:	28 01       	movw	r4, r16
    400e:	22 e0       	ldi	r18, 0x02	; 2
    4010:	42 0e       	add	r4, r18
    4012:	51 1c       	adc	r5, r1
    4014:	f8 01       	movw	r30, r16
    4016:	a0 80       	ld	r10, Z
    4018:	b1 80       	ldd	r11, Z+1	; 0x01
    401a:	36 fe       	sbrs	r3, 6
    401c:	03 c0       	rjmp	.+6      	; 0x4024 <vfprintf+0x174>
    401e:	69 2d       	mov	r22, r9
    4020:	70 e0       	ldi	r23, 0x00	; 0
    4022:	02 c0       	rjmp	.+4      	; 0x4028 <vfprintf+0x178>
    4024:	6f ef       	ldi	r22, 0xFF	; 255
    4026:	7f ef       	ldi	r23, 0xFF	; 255
    4028:	c5 01       	movw	r24, r10
    402a:	0e 94 39 21 	call	0x4272	; 0x4272 <strnlen_P>
    402e:	4c 01       	movw	r8, r24
    4030:	f3 2d       	mov	r31, r3
    4032:	f0 68       	ori	r31, 0x80	; 128
    4034:	3f 2e       	mov	r3, r31
    4036:	82 01       	movw	r16, r4
    4038:	33 fc       	sbrc	r3, 3
    403a:	1b c0       	rjmp	.+54     	; 0x4072 <vfprintf+0x1c2>
    403c:	82 2d       	mov	r24, r2
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	88 16       	cp	r8, r24
    4042:	99 06       	cpc	r9, r25
    4044:	b0 f4       	brcc	.+44     	; 0x4072 <vfprintf+0x1c2>
    4046:	b6 01       	movw	r22, r12
    4048:	80 e2       	ldi	r24, 0x20	; 32
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    4050:	2a 94       	dec	r2
    4052:	f4 cf       	rjmp	.-24     	; 0x403c <vfprintf+0x18c>
    4054:	f5 01       	movw	r30, r10
    4056:	37 fc       	sbrc	r3, 7
    4058:	85 91       	lpm	r24, Z+
    405a:	37 fe       	sbrs	r3, 7
    405c:	81 91       	ld	r24, Z+
    405e:	5f 01       	movw	r10, r30
    4060:	b6 01       	movw	r22, r12
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    4068:	21 10       	cpse	r2, r1
    406a:	2a 94       	dec	r2
    406c:	21 e0       	ldi	r18, 0x01	; 1
    406e:	82 1a       	sub	r8, r18
    4070:	91 08       	sbc	r9, r1
    4072:	81 14       	cp	r8, r1
    4074:	91 04       	cpc	r9, r1
    4076:	71 f7       	brne	.-36     	; 0x4054 <vfprintf+0x1a4>
    4078:	e8 c0       	rjmp	.+464    	; 0x424a <vfprintf+0x39a>
    407a:	84 36       	cpi	r24, 0x64	; 100
    407c:	11 f0       	breq	.+4      	; 0x4082 <vfprintf+0x1d2>
    407e:	89 36       	cpi	r24, 0x69	; 105
    4080:	41 f5       	brne	.+80     	; 0x40d2 <vfprintf+0x222>
    4082:	f8 01       	movw	r30, r16
    4084:	37 fe       	sbrs	r3, 7
    4086:	07 c0       	rjmp	.+14     	; 0x4096 <vfprintf+0x1e6>
    4088:	60 81       	ld	r22, Z
    408a:	71 81       	ldd	r23, Z+1	; 0x01
    408c:	82 81       	ldd	r24, Z+2	; 0x02
    408e:	93 81       	ldd	r25, Z+3	; 0x03
    4090:	0c 5f       	subi	r16, 0xFC	; 252
    4092:	1f 4f       	sbci	r17, 0xFF	; 255
    4094:	08 c0       	rjmp	.+16     	; 0x40a6 <vfprintf+0x1f6>
    4096:	60 81       	ld	r22, Z
    4098:	71 81       	ldd	r23, Z+1	; 0x01
    409a:	07 2e       	mov	r0, r23
    409c:	00 0c       	add	r0, r0
    409e:	88 0b       	sbc	r24, r24
    40a0:	99 0b       	sbc	r25, r25
    40a2:	0e 5f       	subi	r16, 0xFE	; 254
    40a4:	1f 4f       	sbci	r17, 0xFF	; 255
    40a6:	f3 2d       	mov	r31, r3
    40a8:	ff 76       	andi	r31, 0x6F	; 111
    40aa:	3f 2e       	mov	r3, r31
    40ac:	97 ff       	sbrs	r25, 7
    40ae:	09 c0       	rjmp	.+18     	; 0x40c2 <vfprintf+0x212>
    40b0:	90 95       	com	r25
    40b2:	80 95       	com	r24
    40b4:	70 95       	com	r23
    40b6:	61 95       	neg	r22
    40b8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ba:	8f 4f       	sbci	r24, 0xFF	; 255
    40bc:	9f 4f       	sbci	r25, 0xFF	; 255
    40be:	f0 68       	ori	r31, 0x80	; 128
    40c0:	3f 2e       	mov	r3, r31
    40c2:	2a e0       	ldi	r18, 0x0A	; 10
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	a3 01       	movw	r20, r6
    40c8:	0e 94 8b 21 	call	0x4316	; 0x4316 <__ultoa_invert>
    40cc:	88 2e       	mov	r8, r24
    40ce:	86 18       	sub	r8, r6
    40d0:	45 c0       	rjmp	.+138    	; 0x415c <vfprintf+0x2ac>
    40d2:	85 37       	cpi	r24, 0x75	; 117
    40d4:	31 f4       	brne	.+12     	; 0x40e2 <vfprintf+0x232>
    40d6:	23 2d       	mov	r18, r3
    40d8:	2f 7e       	andi	r18, 0xEF	; 239
    40da:	b2 2e       	mov	r11, r18
    40dc:	2a e0       	ldi	r18, 0x0A	; 10
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	25 c0       	rjmp	.+74     	; 0x412c <vfprintf+0x27c>
    40e2:	93 2d       	mov	r25, r3
    40e4:	99 7f       	andi	r25, 0xF9	; 249
    40e6:	b9 2e       	mov	r11, r25
    40e8:	8f 36       	cpi	r24, 0x6F	; 111
    40ea:	c1 f0       	breq	.+48     	; 0x411c <vfprintf+0x26c>
    40ec:	18 f4       	brcc	.+6      	; 0x40f4 <vfprintf+0x244>
    40ee:	88 35       	cpi	r24, 0x58	; 88
    40f0:	79 f0       	breq	.+30     	; 0x4110 <vfprintf+0x260>
    40f2:	b5 c0       	rjmp	.+362    	; 0x425e <vfprintf+0x3ae>
    40f4:	80 37       	cpi	r24, 0x70	; 112
    40f6:	19 f0       	breq	.+6      	; 0x40fe <vfprintf+0x24e>
    40f8:	88 37       	cpi	r24, 0x78	; 120
    40fa:	21 f0       	breq	.+8      	; 0x4104 <vfprintf+0x254>
    40fc:	b0 c0       	rjmp	.+352    	; 0x425e <vfprintf+0x3ae>
    40fe:	e9 2f       	mov	r30, r25
    4100:	e0 61       	ori	r30, 0x10	; 16
    4102:	be 2e       	mov	r11, r30
    4104:	b4 fe       	sbrs	r11, 4
    4106:	0d c0       	rjmp	.+26     	; 0x4122 <vfprintf+0x272>
    4108:	fb 2d       	mov	r31, r11
    410a:	f4 60       	ori	r31, 0x04	; 4
    410c:	bf 2e       	mov	r11, r31
    410e:	09 c0       	rjmp	.+18     	; 0x4122 <vfprintf+0x272>
    4110:	34 fe       	sbrs	r3, 4
    4112:	0a c0       	rjmp	.+20     	; 0x4128 <vfprintf+0x278>
    4114:	29 2f       	mov	r18, r25
    4116:	26 60       	ori	r18, 0x06	; 6
    4118:	b2 2e       	mov	r11, r18
    411a:	06 c0       	rjmp	.+12     	; 0x4128 <vfprintf+0x278>
    411c:	28 e0       	ldi	r18, 0x08	; 8
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	05 c0       	rjmp	.+10     	; 0x412c <vfprintf+0x27c>
    4122:	20 e1       	ldi	r18, 0x10	; 16
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	02 c0       	rjmp	.+4      	; 0x412c <vfprintf+0x27c>
    4128:	20 e1       	ldi	r18, 0x10	; 16
    412a:	32 e0       	ldi	r19, 0x02	; 2
    412c:	f8 01       	movw	r30, r16
    412e:	b7 fe       	sbrs	r11, 7
    4130:	07 c0       	rjmp	.+14     	; 0x4140 <vfprintf+0x290>
    4132:	60 81       	ld	r22, Z
    4134:	71 81       	ldd	r23, Z+1	; 0x01
    4136:	82 81       	ldd	r24, Z+2	; 0x02
    4138:	93 81       	ldd	r25, Z+3	; 0x03
    413a:	0c 5f       	subi	r16, 0xFC	; 252
    413c:	1f 4f       	sbci	r17, 0xFF	; 255
    413e:	06 c0       	rjmp	.+12     	; 0x414c <vfprintf+0x29c>
    4140:	60 81       	ld	r22, Z
    4142:	71 81       	ldd	r23, Z+1	; 0x01
    4144:	80 e0       	ldi	r24, 0x00	; 0
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	0e 5f       	subi	r16, 0xFE	; 254
    414a:	1f 4f       	sbci	r17, 0xFF	; 255
    414c:	a3 01       	movw	r20, r6
    414e:	0e 94 8b 21 	call	0x4316	; 0x4316 <__ultoa_invert>
    4152:	88 2e       	mov	r8, r24
    4154:	86 18       	sub	r8, r6
    4156:	fb 2d       	mov	r31, r11
    4158:	ff 77       	andi	r31, 0x7F	; 127
    415a:	3f 2e       	mov	r3, r31
    415c:	36 fe       	sbrs	r3, 6
    415e:	0d c0       	rjmp	.+26     	; 0x417a <vfprintf+0x2ca>
    4160:	23 2d       	mov	r18, r3
    4162:	2e 7f       	andi	r18, 0xFE	; 254
    4164:	a2 2e       	mov	r10, r18
    4166:	89 14       	cp	r8, r9
    4168:	58 f4       	brcc	.+22     	; 0x4180 <vfprintf+0x2d0>
    416a:	34 fe       	sbrs	r3, 4
    416c:	0b c0       	rjmp	.+22     	; 0x4184 <vfprintf+0x2d4>
    416e:	32 fc       	sbrc	r3, 2
    4170:	09 c0       	rjmp	.+18     	; 0x4184 <vfprintf+0x2d4>
    4172:	83 2d       	mov	r24, r3
    4174:	8e 7e       	andi	r24, 0xEE	; 238
    4176:	a8 2e       	mov	r10, r24
    4178:	05 c0       	rjmp	.+10     	; 0x4184 <vfprintf+0x2d4>
    417a:	b8 2c       	mov	r11, r8
    417c:	a3 2c       	mov	r10, r3
    417e:	03 c0       	rjmp	.+6      	; 0x4186 <vfprintf+0x2d6>
    4180:	b8 2c       	mov	r11, r8
    4182:	01 c0       	rjmp	.+2      	; 0x4186 <vfprintf+0x2d6>
    4184:	b9 2c       	mov	r11, r9
    4186:	a4 fe       	sbrs	r10, 4
    4188:	0f c0       	rjmp	.+30     	; 0x41a8 <vfprintf+0x2f8>
    418a:	fe 01       	movw	r30, r28
    418c:	e8 0d       	add	r30, r8
    418e:	f1 1d       	adc	r31, r1
    4190:	80 81       	ld	r24, Z
    4192:	80 33       	cpi	r24, 0x30	; 48
    4194:	21 f4       	brne	.+8      	; 0x419e <vfprintf+0x2ee>
    4196:	9a 2d       	mov	r25, r10
    4198:	99 7e       	andi	r25, 0xE9	; 233
    419a:	a9 2e       	mov	r10, r25
    419c:	09 c0       	rjmp	.+18     	; 0x41b0 <vfprintf+0x300>
    419e:	a2 fe       	sbrs	r10, 2
    41a0:	06 c0       	rjmp	.+12     	; 0x41ae <vfprintf+0x2fe>
    41a2:	b3 94       	inc	r11
    41a4:	b3 94       	inc	r11
    41a6:	04 c0       	rjmp	.+8      	; 0x41b0 <vfprintf+0x300>
    41a8:	8a 2d       	mov	r24, r10
    41aa:	86 78       	andi	r24, 0x86	; 134
    41ac:	09 f0       	breq	.+2      	; 0x41b0 <vfprintf+0x300>
    41ae:	b3 94       	inc	r11
    41b0:	a3 fc       	sbrc	r10, 3
    41b2:	11 c0       	rjmp	.+34     	; 0x41d6 <vfprintf+0x326>
    41b4:	a0 fe       	sbrs	r10, 0
    41b6:	06 c0       	rjmp	.+12     	; 0x41c4 <vfprintf+0x314>
    41b8:	b2 14       	cp	r11, r2
    41ba:	88 f4       	brcc	.+34     	; 0x41de <vfprintf+0x32e>
    41bc:	28 0c       	add	r2, r8
    41be:	92 2c       	mov	r9, r2
    41c0:	9b 18       	sub	r9, r11
    41c2:	0e c0       	rjmp	.+28     	; 0x41e0 <vfprintf+0x330>
    41c4:	b2 14       	cp	r11, r2
    41c6:	60 f4       	brcc	.+24     	; 0x41e0 <vfprintf+0x330>
    41c8:	b6 01       	movw	r22, r12
    41ca:	80 e2       	ldi	r24, 0x20	; 32
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    41d2:	b3 94       	inc	r11
    41d4:	f7 cf       	rjmp	.-18     	; 0x41c4 <vfprintf+0x314>
    41d6:	b2 14       	cp	r11, r2
    41d8:	18 f4       	brcc	.+6      	; 0x41e0 <vfprintf+0x330>
    41da:	2b 18       	sub	r2, r11
    41dc:	02 c0       	rjmp	.+4      	; 0x41e2 <vfprintf+0x332>
    41de:	98 2c       	mov	r9, r8
    41e0:	21 2c       	mov	r2, r1
    41e2:	a4 fe       	sbrs	r10, 4
    41e4:	10 c0       	rjmp	.+32     	; 0x4206 <vfprintf+0x356>
    41e6:	b6 01       	movw	r22, r12
    41e8:	80 e3       	ldi	r24, 0x30	; 48
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    41f0:	a2 fe       	sbrs	r10, 2
    41f2:	17 c0       	rjmp	.+46     	; 0x4222 <vfprintf+0x372>
    41f4:	a1 fc       	sbrc	r10, 1
    41f6:	03 c0       	rjmp	.+6      	; 0x41fe <vfprintf+0x34e>
    41f8:	88 e7       	ldi	r24, 0x78	; 120
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	02 c0       	rjmp	.+4      	; 0x4202 <vfprintf+0x352>
    41fe:	88 e5       	ldi	r24, 0x58	; 88
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	b6 01       	movw	r22, r12
    4204:	0c c0       	rjmp	.+24     	; 0x421e <vfprintf+0x36e>
    4206:	8a 2d       	mov	r24, r10
    4208:	86 78       	andi	r24, 0x86	; 134
    420a:	59 f0       	breq	.+22     	; 0x4222 <vfprintf+0x372>
    420c:	a1 fe       	sbrs	r10, 1
    420e:	02 c0       	rjmp	.+4      	; 0x4214 <vfprintf+0x364>
    4210:	8b e2       	ldi	r24, 0x2B	; 43
    4212:	01 c0       	rjmp	.+2      	; 0x4216 <vfprintf+0x366>
    4214:	80 e2       	ldi	r24, 0x20	; 32
    4216:	a7 fc       	sbrc	r10, 7
    4218:	8d e2       	ldi	r24, 0x2D	; 45
    421a:	b6 01       	movw	r22, r12
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    4222:	89 14       	cp	r8, r9
    4224:	38 f4       	brcc	.+14     	; 0x4234 <vfprintf+0x384>
    4226:	b6 01       	movw	r22, r12
    4228:	80 e3       	ldi	r24, 0x30	; 48
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    4230:	9a 94       	dec	r9
    4232:	f7 cf       	rjmp	.-18     	; 0x4222 <vfprintf+0x372>
    4234:	8a 94       	dec	r8
    4236:	f3 01       	movw	r30, r6
    4238:	e8 0d       	add	r30, r8
    423a:	f1 1d       	adc	r31, r1
    423c:	80 81       	ld	r24, Z
    423e:	b6 01       	movw	r22, r12
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    4246:	81 10       	cpse	r8, r1
    4248:	f5 cf       	rjmp	.-22     	; 0x4234 <vfprintf+0x384>
    424a:	22 20       	and	r2, r2
    424c:	09 f4       	brne	.+2      	; 0x4250 <vfprintf+0x3a0>
    424e:	42 ce       	rjmp	.-892    	; 0x3ed4 <vfprintf+0x24>
    4250:	b6 01       	movw	r22, r12
    4252:	80 e2       	ldi	r24, 0x20	; 32
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    425a:	2a 94       	dec	r2
    425c:	f6 cf       	rjmp	.-20     	; 0x424a <vfprintf+0x39a>
    425e:	f6 01       	movw	r30, r12
    4260:	86 81       	ldd	r24, Z+6	; 0x06
    4262:	97 81       	ldd	r25, Z+7	; 0x07
    4264:	02 c0       	rjmp	.+4      	; 0x426a <vfprintf+0x3ba>
    4266:	8f ef       	ldi	r24, 0xFF	; 255
    4268:	9f ef       	ldi	r25, 0xFF	; 255
    426a:	2b 96       	adiw	r28, 0x0b	; 11
    426c:	e2 e1       	ldi	r30, 0x12	; 18
    426e:	0c 94 05 22 	jmp	0x440a	; 0x440a <__epilogue_restores__>

00004272 <strnlen_P>:
    4272:	fc 01       	movw	r30, r24
    4274:	05 90       	lpm	r0, Z+
    4276:	61 50       	subi	r22, 0x01	; 1
    4278:	70 40       	sbci	r23, 0x00	; 0
    427a:	01 10       	cpse	r0, r1
    427c:	d8 f7       	brcc	.-10     	; 0x4274 <strnlen_P+0x2>
    427e:	80 95       	com	r24
    4280:	90 95       	com	r25
    4282:	8e 0f       	add	r24, r30
    4284:	9f 1f       	adc	r25, r31
    4286:	08 95       	ret

00004288 <strnlen>:
    4288:	fc 01       	movw	r30, r24
    428a:	61 50       	subi	r22, 0x01	; 1
    428c:	70 40       	sbci	r23, 0x00	; 0
    428e:	01 90       	ld	r0, Z+
    4290:	01 10       	cpse	r0, r1
    4292:	d8 f7       	brcc	.-10     	; 0x428a <strnlen+0x2>
    4294:	80 95       	com	r24
    4296:	90 95       	com	r25
    4298:	8e 0f       	add	r24, r30
    429a:	9f 1f       	adc	r25, r31
    429c:	08 95       	ret

0000429e <fputc>:
    429e:	0f 93       	push	r16
    42a0:	1f 93       	push	r17
    42a2:	cf 93       	push	r28
    42a4:	df 93       	push	r29
    42a6:	fb 01       	movw	r30, r22
    42a8:	23 81       	ldd	r18, Z+3	; 0x03
    42aa:	21 fd       	sbrc	r18, 1
    42ac:	03 c0       	rjmp	.+6      	; 0x42b4 <fputc+0x16>
    42ae:	8f ef       	ldi	r24, 0xFF	; 255
    42b0:	9f ef       	ldi	r25, 0xFF	; 255
    42b2:	2c c0       	rjmp	.+88     	; 0x430c <fputc+0x6e>
    42b4:	22 ff       	sbrs	r18, 2
    42b6:	16 c0       	rjmp	.+44     	; 0x42e4 <fputc+0x46>
    42b8:	46 81       	ldd	r20, Z+6	; 0x06
    42ba:	57 81       	ldd	r21, Z+7	; 0x07
    42bc:	24 81       	ldd	r18, Z+4	; 0x04
    42be:	35 81       	ldd	r19, Z+5	; 0x05
    42c0:	42 17       	cp	r20, r18
    42c2:	53 07       	cpc	r21, r19
    42c4:	44 f4       	brge	.+16     	; 0x42d6 <fputc+0x38>
    42c6:	a0 81       	ld	r26, Z
    42c8:	b1 81       	ldd	r27, Z+1	; 0x01
    42ca:	9d 01       	movw	r18, r26
    42cc:	2f 5f       	subi	r18, 0xFF	; 255
    42ce:	3f 4f       	sbci	r19, 0xFF	; 255
    42d0:	31 83       	std	Z+1, r19	; 0x01
    42d2:	20 83       	st	Z, r18
    42d4:	8c 93       	st	X, r24
    42d6:	26 81       	ldd	r18, Z+6	; 0x06
    42d8:	37 81       	ldd	r19, Z+7	; 0x07
    42da:	2f 5f       	subi	r18, 0xFF	; 255
    42dc:	3f 4f       	sbci	r19, 0xFF	; 255
    42de:	37 83       	std	Z+7, r19	; 0x07
    42e0:	26 83       	std	Z+6, r18	; 0x06
    42e2:	14 c0       	rjmp	.+40     	; 0x430c <fputc+0x6e>
    42e4:	8b 01       	movw	r16, r22
    42e6:	ec 01       	movw	r28, r24
    42e8:	fb 01       	movw	r30, r22
    42ea:	00 84       	ldd	r0, Z+8	; 0x08
    42ec:	f1 85       	ldd	r31, Z+9	; 0x09
    42ee:	e0 2d       	mov	r30, r0
    42f0:	09 95       	icall
    42f2:	89 2b       	or	r24, r25
    42f4:	e1 f6       	brne	.-72     	; 0x42ae <fputc+0x10>
    42f6:	d8 01       	movw	r26, r16
    42f8:	16 96       	adiw	r26, 0x06	; 6
    42fa:	8d 91       	ld	r24, X+
    42fc:	9c 91       	ld	r25, X
    42fe:	17 97       	sbiw	r26, 0x07	; 7
    4300:	01 96       	adiw	r24, 0x01	; 1
    4302:	17 96       	adiw	r26, 0x07	; 7
    4304:	9c 93       	st	X, r25
    4306:	8e 93       	st	-X, r24
    4308:	16 97       	sbiw	r26, 0x06	; 6
    430a:	ce 01       	movw	r24, r28
    430c:	df 91       	pop	r29
    430e:	cf 91       	pop	r28
    4310:	1f 91       	pop	r17
    4312:	0f 91       	pop	r16
    4314:	08 95       	ret

00004316 <__ultoa_invert>:
    4316:	fa 01       	movw	r30, r20
    4318:	aa 27       	eor	r26, r26
    431a:	28 30       	cpi	r18, 0x08	; 8
    431c:	51 f1       	breq	.+84     	; 0x4372 <__ultoa_invert+0x5c>
    431e:	20 31       	cpi	r18, 0x10	; 16
    4320:	81 f1       	breq	.+96     	; 0x4382 <__ultoa_invert+0x6c>
    4322:	e8 94       	clt
    4324:	6f 93       	push	r22
    4326:	6e 7f       	andi	r22, 0xFE	; 254
    4328:	6e 5f       	subi	r22, 0xFE	; 254
    432a:	7f 4f       	sbci	r23, 0xFF	; 255
    432c:	8f 4f       	sbci	r24, 0xFF	; 255
    432e:	9f 4f       	sbci	r25, 0xFF	; 255
    4330:	af 4f       	sbci	r26, 0xFF	; 255
    4332:	b1 e0       	ldi	r27, 0x01	; 1
    4334:	3e d0       	rcall	.+124    	; 0x43b2 <__ultoa_invert+0x9c>
    4336:	b4 e0       	ldi	r27, 0x04	; 4
    4338:	3c d0       	rcall	.+120    	; 0x43b2 <__ultoa_invert+0x9c>
    433a:	67 0f       	add	r22, r23
    433c:	78 1f       	adc	r23, r24
    433e:	89 1f       	adc	r24, r25
    4340:	9a 1f       	adc	r25, r26
    4342:	a1 1d       	adc	r26, r1
    4344:	68 0f       	add	r22, r24
    4346:	79 1f       	adc	r23, r25
    4348:	8a 1f       	adc	r24, r26
    434a:	91 1d       	adc	r25, r1
    434c:	a1 1d       	adc	r26, r1
    434e:	6a 0f       	add	r22, r26
    4350:	71 1d       	adc	r23, r1
    4352:	81 1d       	adc	r24, r1
    4354:	91 1d       	adc	r25, r1
    4356:	a1 1d       	adc	r26, r1
    4358:	20 d0       	rcall	.+64     	; 0x439a <__ultoa_invert+0x84>
    435a:	09 f4       	brne	.+2      	; 0x435e <__ultoa_invert+0x48>
    435c:	68 94       	set
    435e:	3f 91       	pop	r19
    4360:	2a e0       	ldi	r18, 0x0A	; 10
    4362:	26 9f       	mul	r18, r22
    4364:	11 24       	eor	r1, r1
    4366:	30 19       	sub	r19, r0
    4368:	30 5d       	subi	r19, 0xD0	; 208
    436a:	31 93       	st	Z+, r19
    436c:	de f6       	brtc	.-74     	; 0x4324 <__ultoa_invert+0xe>
    436e:	cf 01       	movw	r24, r30
    4370:	08 95       	ret
    4372:	46 2f       	mov	r20, r22
    4374:	47 70       	andi	r20, 0x07	; 7
    4376:	40 5d       	subi	r20, 0xD0	; 208
    4378:	41 93       	st	Z+, r20
    437a:	b3 e0       	ldi	r27, 0x03	; 3
    437c:	0f d0       	rcall	.+30     	; 0x439c <__ultoa_invert+0x86>
    437e:	c9 f7       	brne	.-14     	; 0x4372 <__ultoa_invert+0x5c>
    4380:	f6 cf       	rjmp	.-20     	; 0x436e <__ultoa_invert+0x58>
    4382:	46 2f       	mov	r20, r22
    4384:	4f 70       	andi	r20, 0x0F	; 15
    4386:	40 5d       	subi	r20, 0xD0	; 208
    4388:	4a 33       	cpi	r20, 0x3A	; 58
    438a:	18 f0       	brcs	.+6      	; 0x4392 <__ultoa_invert+0x7c>
    438c:	49 5d       	subi	r20, 0xD9	; 217
    438e:	31 fd       	sbrc	r19, 1
    4390:	40 52       	subi	r20, 0x20	; 32
    4392:	41 93       	st	Z+, r20
    4394:	02 d0       	rcall	.+4      	; 0x439a <__ultoa_invert+0x84>
    4396:	a9 f7       	brne	.-22     	; 0x4382 <__ultoa_invert+0x6c>
    4398:	ea cf       	rjmp	.-44     	; 0x436e <__ultoa_invert+0x58>
    439a:	b4 e0       	ldi	r27, 0x04	; 4
    439c:	a6 95       	lsr	r26
    439e:	97 95       	ror	r25
    43a0:	87 95       	ror	r24
    43a2:	77 95       	ror	r23
    43a4:	67 95       	ror	r22
    43a6:	ba 95       	dec	r27
    43a8:	c9 f7       	brne	.-14     	; 0x439c <__ultoa_invert+0x86>
    43aa:	00 97       	sbiw	r24, 0x00	; 0
    43ac:	61 05       	cpc	r22, r1
    43ae:	71 05       	cpc	r23, r1
    43b0:	08 95       	ret
    43b2:	9b 01       	movw	r18, r22
    43b4:	ac 01       	movw	r20, r24
    43b6:	0a 2e       	mov	r0, r26
    43b8:	06 94       	lsr	r0
    43ba:	57 95       	ror	r21
    43bc:	47 95       	ror	r20
    43be:	37 95       	ror	r19
    43c0:	27 95       	ror	r18
    43c2:	ba 95       	dec	r27
    43c4:	c9 f7       	brne	.-14     	; 0x43b8 <__ultoa_invert+0xa2>
    43c6:	62 0f       	add	r22, r18
    43c8:	73 1f       	adc	r23, r19
    43ca:	84 1f       	adc	r24, r20
    43cc:	95 1f       	adc	r25, r21
    43ce:	a0 1d       	adc	r26, r0
    43d0:	08 95       	ret

000043d2 <__prologue_saves__>:
    43d2:	2f 92       	push	r2
    43d4:	3f 92       	push	r3
    43d6:	4f 92       	push	r4
    43d8:	5f 92       	push	r5
    43da:	6f 92       	push	r6
    43dc:	7f 92       	push	r7
    43de:	8f 92       	push	r8
    43e0:	9f 92       	push	r9
    43e2:	af 92       	push	r10
    43e4:	bf 92       	push	r11
    43e6:	cf 92       	push	r12
    43e8:	df 92       	push	r13
    43ea:	ef 92       	push	r14
    43ec:	ff 92       	push	r15
    43ee:	0f 93       	push	r16
    43f0:	1f 93       	push	r17
    43f2:	cf 93       	push	r28
    43f4:	df 93       	push	r29
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
    43fa:	ca 1b       	sub	r28, r26
    43fc:	db 0b       	sbc	r29, r27
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	f8 94       	cli
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	0f be       	out	0x3f, r0	; 63
    4406:	cd bf       	out	0x3d, r28	; 61
    4408:	09 94       	ijmp

0000440a <__epilogue_restores__>:
    440a:	2a 88       	ldd	r2, Y+18	; 0x12
    440c:	39 88       	ldd	r3, Y+17	; 0x11
    440e:	48 88       	ldd	r4, Y+16	; 0x10
    4410:	5f 84       	ldd	r5, Y+15	; 0x0f
    4412:	6e 84       	ldd	r6, Y+14	; 0x0e
    4414:	7d 84       	ldd	r7, Y+13	; 0x0d
    4416:	8c 84       	ldd	r8, Y+12	; 0x0c
    4418:	9b 84       	ldd	r9, Y+11	; 0x0b
    441a:	aa 84       	ldd	r10, Y+10	; 0x0a
    441c:	b9 84       	ldd	r11, Y+9	; 0x09
    441e:	c8 84       	ldd	r12, Y+8	; 0x08
    4420:	df 80       	ldd	r13, Y+7	; 0x07
    4422:	ee 80       	ldd	r14, Y+6	; 0x06
    4424:	fd 80       	ldd	r15, Y+5	; 0x05
    4426:	0c 81       	ldd	r16, Y+4	; 0x04
    4428:	1b 81       	ldd	r17, Y+3	; 0x03
    442a:	aa 81       	ldd	r26, Y+2	; 0x02
    442c:	b9 81       	ldd	r27, Y+1	; 0x01
    442e:	ce 0f       	add	r28, r30
    4430:	d1 1d       	adc	r29, r1
    4432:	0f b6       	in	r0, 0x3f	; 63
    4434:	f8 94       	cli
    4436:	de bf       	out	0x3e, r29	; 62
    4438:	0f be       	out	0x3f, r0	; 63
    443a:	cd bf       	out	0x3d, r28	; 61
    443c:	ed 01       	movw	r28, r26
    443e:	08 95       	ret

00004440 <_exit>:
    4440:	f8 94       	cli

00004442 <__stop_program>:
    4442:	ff cf       	rjmp	.-2      	; 0x4442 <__stop_program>
