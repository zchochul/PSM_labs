   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_13
  12               	__vector_13:
  13               	.LFB11:
  14               		.file 1 "main.c"
   1:main.c        **** #include "lcd.h"
   2:main.c        **** #include "usart.h"
   3:main.c        **** #include "1wire.h"
   4:main.c        **** 
   5:main.c        **** FILE lcd_stream= FDEV_SETUP_STREAM(lcd_putc, NULL, _FDEV_SETUP_WRITE);
   6:main.c        **** FILE u_stream= FDEV_SETUP_STREAM(u_putc, NULL, _FDEV_SETUP_WRITE);
   7:main.c        **** 
   8:main.c        **** uint16_t temp;
   9:main.c        **** uint8_t  x;
  10:main.c        **** uint8_t  y;
  11:main.c        **** uint8_t tab[10];
  12:main.c        **** uint8_t i;
  13:main.c        **** uint8_t etap;
  14:main.c        **** double xx, yy;
  15:main.c        **** 
  16:main.c        **** ISR(USART_RXC_vect)
  17:main.c        **** {
  15               		.loc 1 17 0
  16               		.cfi_startproc
  17 0000 1F92      		push r1
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 1, -2
  21 0002 0F92      		push r0
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 0, -3
  25 0004 0FB6      		in r0,__SREG__
  26 0006 0F92      		push r0
  27 0008 1124      		clr __zero_reg__
  28 000a 2F93      		push r18
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 18, -4
  32 000c 3F93      		push r19
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 19, -5
  36 000e 4F93      		push r20
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 20, -6
  40 0010 5F93      		push r21
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 21, -7
  44 0012 6F93      		push r22
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 22, -8
  48 0014 7F93      		push r23
  49               	.LCFI7:
  50               		.cfi_def_cfa_offset 10
  51               		.cfi_offset 23, -9
  52 0016 8F93      		push r24
  53               	.LCFI8:
  54               		.cfi_def_cfa_offset 11
  55               		.cfi_offset 24, -10
  56 0018 9F93      		push r25
  57               	.LCFI9:
  58               		.cfi_def_cfa_offset 12
  59               		.cfi_offset 25, -11
  60 001a AF93      		push r26
  61               	.LCFI10:
  62               		.cfi_def_cfa_offset 13
  63               		.cfi_offset 26, -12
  64 001c BF93      		push r27
  65               	.LCFI11:
  66               		.cfi_def_cfa_offset 14
  67               		.cfi_offset 27, -13
  68 001e CF93      		push r28
  69               	.LCFI12:
  70               		.cfi_def_cfa_offset 15
  71               		.cfi_offset 28, -14
  72 0020 EF93      		push r30
  73               	.LCFI13:
  74               		.cfi_def_cfa_offset 16
  75               		.cfi_offset 30, -15
  76 0022 FF93      		push r31
  77               	.LCFI14:
  78               		.cfi_def_cfa_offset 17
  79               		.cfi_offset 31, -16
  80               	/* prologue: Signal */
  81               	/* frame size = 0 */
  82               	/* stack size = 16 */
  83               	.L__stack_usage = 16
  18:main.c        **** 	tab[i]=UDR;
  84               		.loc 1 18 0
  85 0024 8091 0000 		lds r24,i
  86 0028 9CB1      		in r25,0xc
  87 002a E82F      		mov r30,r24
  88 002c F0E0      		ldi r31,0
  89 002e E050      		subi r30,lo8(-(tab))
  90 0030 F040      		sbci r31,hi8(-(tab))
  91 0032 9083      		st Z,r25
  19:main.c        **** 	if(tab[i]=='\n')
  92               		.loc 1 19 0
  93 0034 9A30      		cpi r25,lo8(10)
  94 0036 01F4      		brne .L2
  20:main.c        **** 	{
  21:main.c        **** 		if(etap==0)
  95               		.loc 1 21 0
  96 0038 C091 0000 		lds r28,etap
  97 003c C111      		cpse r28,__zero_reg__
  98 003e 00C0      		rjmp .L3
  22:main.c        **** 		{
  23:main.c        **** 			x=atoi((const char*) tab);
  99               		.loc 1 23 0
 100 0040 80E0      		ldi r24,lo8(tab)
 101 0042 90E0      		ldi r25,hi8(tab)
 102 0044 0E94 0000 		call atoi
 103               	.LVL0:
 104 0048 8093 0000 		sts x,r24
 105 004c 00C0      		rjmp .L4
 106               	.L3:
  24:main.c        **** 		}
  25:main.c        **** 		if(etap==1)
 107               		.loc 1 25 0
 108 004e C130      		cpi r28,lo8(1)
 109 0050 01F4      		brne .L4
  26:main.c        **** 		{
  27:main.c        **** 			y=atoi((const char*) tab);
 110               		.loc 1 27 0
 111 0052 80E0      		ldi r24,lo8(tab)
 112 0054 90E0      		ldi r25,hi8(tab)
 113 0056 0E94 0000 		call atoi
 114               	.LVL1:
 115 005a 8093 0000 		sts y,r24
 116               	.L4:
  28:main.c        **** 		}
  29:main.c        **** 		
  30:main.c        **** 		i=0;
 117               		.loc 1 30 0
 118 005e 1092 0000 		sts i,__zero_reg__
  31:main.c        **** 		etap++;
 119               		.loc 1 31 0
 120 0062 CF5F      		subi r28,lo8(-(1))
  32:main.c        **** 		if(etap==2)
 121               		.loc 1 32 0
 122 0064 C230      		cpi r28,lo8(2)
 123 0066 01F0      		breq .L5
  31:main.c        **** 		etap++;
 124               		.loc 1 31 0
 125 0068 C093 0000 		sts etap,r28
 126 006c 00C0      		rjmp .L1
 127               	.L5:
  33:main.c        **** 		{
  34:main.c        **** 			etap=0;
 128               		.loc 1 34 0
 129 006e 1092 0000 		sts etap,__zero_reg__
 130 0072 00C0      		rjmp .L1
 131               	.L2:
  35:main.c        **** 		}
  36:main.c        **** 	}
  37:main.c        **** 	else
  38:main.c        **** 	{
  39:main.c        **** 		i++;
 132               		.loc 1 39 0
 133 0074 8F5F      		subi r24,lo8(-(1))
 134 0076 8093 0000 		sts i,r24
 135               	.L1:
 136               	/* epilogue start */
  40:main.c        **** 	}
  41:main.c        **** 	
  42:main.c        **** }
 137               		.loc 1 42 0
 138 007a FF91      		pop r31
 139 007c EF91      		pop r30
 140 007e CF91      		pop r28
 141 0080 BF91      		pop r27
 142 0082 AF91      		pop r26
 143 0084 9F91      		pop r25
 144 0086 8F91      		pop r24
 145 0088 7F91      		pop r23
 146 008a 6F91      		pop r22
 147 008c 5F91      		pop r21
 148 008e 4F91      		pop r20
 149 0090 3F91      		pop r19
 150 0092 2F91      		pop r18
 151 0094 0F90      		pop r0
 152 0096 0FBE      		out __SREG__,r0
 153 0098 0F90      		pop r0
 154 009a 1F90      		pop r1
 155 009c 1895      		reti
 156               		.cfi_endproc
 157               	.LFE11:
 159               		.section	.rodata.str1.1,"aMS",@progbits,1
 160               	.LC0:
 161 0000 2564 2E25 		.string	"%d.%04d"
 161      3034 6400 
 162               	.global	__floatunsisf
 163               	.global	__divsf3
 164               	.global	__floatsisf
 165               	.global	__addsf3
 166               	.global	__gtsf2
 167               	.LC1:
 168 0008 2025 6400 		.string	" %d"
 169               	.LC2:
 170 000c 2025 642E 		.string	" %d."
 170      00
 171               		.section	.text.startup,"ax",@progbits
 172               	.global	main
 174               	main:
 175               	.LFB12:
  43:main.c        **** 
  44:main.c        **** int main(void)
  45:main.c        **** {
 176               		.loc 1 45 0
 177               		.cfi_startproc
 178               	/* prologue: function */
 179               	/* frame size = 0 */
 180               	/* stack size = 0 */
 181               	.L__stack_usage = 0
  46:main.c        **** 	DDRC=0xff;
 182               		.loc 1 46 0
 183 0000 8FEF      		ldi r24,lo8(-1)
 184 0002 84BB      		out 0x14,r24
  47:main.c        **** 	PORTC=0xff;
 185               		.loc 1 47 0
 186 0004 85BB      		out 0x15,r24
  48:main.c        **** 	USART_Init(1);
 187               		.loc 1 48 0
 188 0006 81E0      		ldi r24,lo8(1)
 189 0008 90E0      		ldi r25,0
 190 000a 0E94 0000 		call USART_Init
  49:main.c        **** 	lcdinit();
 191               		.loc 1 49 0
 192 000e 0E94 0000 		call lcdinit
  50:main.c        **** 	on_off_cursor(0);
 193               		.loc 1 50 0
 194 0012 80E0      		ldi r24,0
 195 0014 0E94 0000 		call on_off_cursor
  51:main.c        **** 	
  52:main.c        **** 	sei();
 196               		.loc 1 52 0
 197               	/* #APP */
 198               	 ;  52 "main.c" 1
 199 0018 7894      		sei
 200               	 ;  0 "" 2
  53:main.c        **** 	while(1)
  54:main.c        **** 	{
  55:main.c        **** 		DS18B20_start();
  56:main.c        **** 		_delay_ms(750);
  57:main.c        **** 		temp=DS18B20_read();
  58:main.c        **** 		lcd_set_xy(0,0);
  59:main.c        **** 		fprintf(&lcd_stream, "%d.%04d", temp>>4, (temp&0x0f)*625);
 201               		.loc 1 59 0
 202               	/* #NOAPP */
 203 001a 01E7      		ldi r16,lo8(113)
 204 001c 12E0      		ldi r17,lo8(2)
 205 001e 40E0      		ldi r20,lo8(.LC0)
 206 0020 242E      		mov r2,r20
 207 0022 40E0      		ldi r20,hi8(.LC0)
 208 0024 342E      		mov r3,r20
 209 0026 C0E0      		ldi r28,lo8(lcd_stream)
 210 0028 D0E0      		ldi r29,hi8(lcd_stream)
 211               	.L13:
  55:main.c        **** 		_delay_ms(750);
 212               		.loc 1 55 0
 213 002a 0E94 0000 		call DS18B20_start
 214               	.LBB4:
 215               	.LBB5:
 216               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 217               		.loc 2 187 0
 218 002e 2FEF      		ldi r18,lo8(2399999)
 219 0030 8EE9      		ldi r24,hi8(2399999)
 220 0032 94E2      		ldi r25,hlo8(2399999)
 221 0034 2150      	1:	subi r18,1
 222 0036 8040      		sbci r24,0
 223 0038 9040      		sbci r25,0
 224 003a 01F4      		brne 1b
 225 003c 00C0      		rjmp .
 226 003e 0000      		nop
 227               	.LBE5:
 228               	.LBE4:
  57:main.c        **** 		lcd_set_xy(0,0);
 229               		.loc 1 57 0
 230 0040 0E94 0000 		call DS18B20_read
 231 0044 9093 0000 		sts temp+1,r25
 232 0048 8093 0000 		sts temp,r24
  58:main.c        **** 		fprintf(&lcd_stream, "%d.%04d", temp>>4, (temp&0x0f)*625);
 233               		.loc 1 58 0
 234 004c 60E0      		ldi r22,0
 235 004e 80E0      		ldi r24,0
 236 0050 0E94 0000 		call lcd_set_xy
 237               		.loc 1 59 0
 238 0054 8091 0000 		lds r24,temp
 239 0058 9091 0000 		lds r25,temp+1
 240 005c AC01      		movw r20,r24
 241 005e 4F70      		andi r20,15
 242 0060 5527      		clr r21
 243 0062 409F      		mul r20,r16
 244 0064 9001      		movw r18,r0
 245 0066 419F      		mul r20,r17
 246 0068 300D      		add r19,r0
 247 006a 509F      		mul r21,r16
 248 006c 300D      		add r19,r0
 249 006e 1124      		clr r1
 250 0070 3F93      		push r19
 251               	.LCFI15:
 252               		.cfi_def_cfa_offset 3
 253 0072 2F93      		push r18
 254               	.LCFI16:
 255               		.cfi_def_cfa_offset 4
 256 0074 24E0      		ldi r18,4
 257               		1:
 258 0076 9695      		lsr r25
 259 0078 8795      		ror r24
 260 007a 2A95      		dec r18
 261 007c 01F4      		brne 1b
 262 007e 9F93      		push r25
 263               	.LCFI17:
 264               		.cfi_def_cfa_offset 5
 265 0080 8F93      		push r24
 266               	.LCFI18:
 267               		.cfi_def_cfa_offset 6
 268 0082 3F92      		push r3
 269               	.LCFI19:
 270               		.cfi_def_cfa_offset 7
 271 0084 2F92      		push r2
 272               	.LCFI20:
 273               		.cfi_def_cfa_offset 8
 274 0086 DF93      		push r29
 275               	.LCFI21:
 276               		.cfi_def_cfa_offset 9
 277 0088 CF93      		push r28
 278               	.LCFI22:
 279               		.cfi_def_cfa_offset 10
 280 008a 0E94 0000 		call fprintf
  60:main.c        **** 		lcd_write_data(0b11011111);
 281               		.loc 1 60 0
 282 008e 8FED      		ldi r24,lo8(-33)
 283 0090 0E94 0000 		call lcd_write_data
  61:main.c        **** 		lcd_write_data('C');
 284               		.loc 1 61 0
 285 0094 83E4      		ldi r24,lo8(67)
 286 0096 0E94 0000 		call lcd_write_data
  62:main.c        **** 		
  63:main.c        **** 		
  64:main.c        **** 		lcd_set_xy(1,1);
 287               		.loc 1 64 0
 288 009a 61E0      		ldi r22,lo8(1)
 289 009c 81E0      		ldi r24,lo8(1)
 290 009e 0E94 0000 		call lcd_set_xy
  65:main.c        **** 		xx=(double)((temp&0x0f)*625)/10000;
 291               		.loc 1 65 0
 292 00a2 A090 0000 		lds r10,temp
 293 00a6 B090 0000 		lds r11,temp+1
 294 00aa C501      		movw r24,r10
 295 00ac 8F70      		andi r24,15
 296 00ae 9927      		clr r25
 297 00b0 809F      		mul r24,r16
 298 00b2 B001      		movw r22,r0
 299 00b4 819F      		mul r24,r17
 300 00b6 700D      		add r23,r0
 301 00b8 909F      		mul r25,r16
 302 00ba 700D      		add r23,r0
 303 00bc 1124      		clr r1
 304 00be 80E0      		ldi r24,0
 305 00c0 90E0      		ldi r25,0
 306 00c2 0E94 0000 		call __floatunsisf
 307 00c6 20E0      		ldi r18,0
 308 00c8 30E4      		ldi r19,lo8(64)
 309 00ca 4CE1      		ldi r20,lo8(28)
 310 00cc 56E4      		ldi r21,lo8(70)
 311 00ce 0E94 0000 		call __divsf3
 312 00d2 6B01      		movw r12,r22
 313 00d4 7C01      		movw r14,r24
 314 00d6 6093 0000 		sts xx,r22
 315 00da 7093 0000 		sts xx+1,r23
 316 00de 8093 0000 		sts xx+2,r24
 317 00e2 9093 0000 		sts xx+3,r25
  66:main.c        **** 		yy=(double)(temp>>4);
 318               		.loc 1 66 0
 319 00e6 B501      		movw r22,r10
 320 00e8 34E0      		ldi r19,4
 321               		1:
 322 00ea 7695      		lsr r23
 323 00ec 6795      		ror r22
 324 00ee 3A95      		dec r19
 325 00f0 01F4      		brne 1b
 326 00f2 80E0      		ldi r24,0
 327 00f4 90E0      		ldi r25,0
 328 00f6 0E94 0000 		call __floatunsisf
 329 00fa 4B01      		movw r8,r22
 330 00fc 5C01      		movw r10,r24
 331 00fe 6093 0000 		sts yy,r22
 332 0102 7093 0000 		sts yy+1,r23
 333 0106 8093 0000 		sts yy+2,r24
 334 010a 9093 0000 		sts yy+3,r25
  67:main.c        **** 		
  68:main.c        **** 		if(x>(xx+yy))
 335               		.loc 1 68 0
 336 010e 6091 0000 		lds r22,x
 337 0112 70E0      		ldi r23,0
 338 0114 80E0      		ldi r24,0
 339 0116 90E0      		ldi r25,0
 340 0118 0E94 0000 		call __floatsisf
 341 011c 2B01      		movw r4,r22
 342 011e 3C01      		movw r6,r24
 343 0120 A501      		movw r20,r10
 344 0122 9401      		movw r18,r8
 345 0124 C701      		movw r24,r14
 346 0126 B601      		movw r22,r12
 347 0128 0E94 0000 		call __addsf3
 348 012c 9B01      		movw r18,r22
 349 012e AC01      		movw r20,r24
 350 0130 8DB7      		in r24,__SP_L__
 351 0132 9EB7      		in r25,__SP_H__
 352 0134 0896      		adiw r24,8
 353 0136 0FB6      		in __tmp_reg__,__SREG__
 354 0138 F894      		cli
 355 013a 9EBF      		out __SP_H__,r25
 356 013c 0FBE      		out __SREG__,__tmp_reg__
 357 013e 8DBF      		out __SP_L__,r24
 358               	.LCFI23:
 359               		.cfi_def_cfa_offset 2
 360 0140 C301      		movw r24,r6
 361 0142 B201      		movw r22,r4
 362 0144 0E94 0000 		call __gtsf2
 363 0148 1816      		cp __zero_reg__,r24
 364 014a 04F4      		brge .L9
  69:main.c        **** 		{
  70:main.c        **** 			PORTC&=~(1<<PC0);
 365               		.loc 1 70 0
 366 014c A898      		cbi 0x15,0
 367               	.L9:
  71:main.c        **** 				
  72:main.c        **** 		}
  73:main.c        **** 		if((xx+yy)>y)
 368               		.loc 1 73 0
 369 014e 2091 0000 		lds r18,yy
 370 0152 3091 0000 		lds r19,yy+1
 371 0156 4091 0000 		lds r20,yy+2
 372 015a 5091 0000 		lds r21,yy+3
 373 015e 6091 0000 		lds r22,xx
 374 0162 7091 0000 		lds r23,xx+1
 375 0166 8091 0000 		lds r24,xx+2
 376 016a 9091 0000 		lds r25,xx+3
 377 016e 0E94 0000 		call __addsf3
 378 0172 6B01      		movw r12,r22
 379 0174 7C01      		movw r14,r24
 380 0176 6091 0000 		lds r22,y
 381 017a 70E0      		ldi r23,0
 382 017c 80E0      		ldi r24,0
 383 017e 90E0      		ldi r25,0
 384 0180 0E94 0000 		call __floatsisf
 385 0184 9B01      		movw r18,r22
 386 0186 AC01      		movw r20,r24
 387 0188 C701      		movw r24,r14
 388 018a B601      		movw r22,r12
 389 018c 0E94 0000 		call __gtsf2
 390 0190 1816      		cp __zero_reg__,r24
 391 0192 04F4      		brge .L11
  74:main.c        **** 		{
  75:main.c        **** 				PORTC=0xff;
 392               		.loc 1 75 0
 393 0194 9FEF      		ldi r25,lo8(-1)
 394 0196 95BB      		out 0x15,r25
 395               	.L11:
  76:main.c        **** 		}
  77:main.c        **** 		
  78:main.c        **** 		lcd_set_xy(1,1);
 396               		.loc 1 78 0
 397 0198 61E0      		ldi r22,lo8(1)
 398 019a 81E0      		ldi r24,lo8(1)
 399 019c 0E94 0000 		call lcd_set_xy
  79:main.c        **** 		fprintf(&lcd_stream, " %d", x);
 400               		.loc 1 79 0
 401 01a0 8091 0000 		lds r24,x
 402 01a4 1F92      		push __zero_reg__
 403               	.LCFI24:
 404               		.cfi_def_cfa_offset 3
 405 01a6 8F93      		push r24
 406               	.LCFI25:
 407               		.cfi_def_cfa_offset 4
 408 01a8 80E0      		ldi r24,lo8(.LC1)
 409 01aa 90E0      		ldi r25,hi8(.LC1)
 410 01ac 9F93      		push r25
 411               	.LCFI26:
 412               		.cfi_def_cfa_offset 5
 413 01ae 8F93      		push r24
 414               	.LCFI27:
 415               		.cfi_def_cfa_offset 6
 416 01b0 DF93      		push r29
 417               	.LCFI28:
 418               		.cfi_def_cfa_offset 7
 419 01b2 CF93      		push r28
 420               	.LCFI29:
 421               		.cfi_def_cfa_offset 8
 422 01b4 0E94 0000 		call fprintf
  80:main.c        **** 		lcd_write_data(0b11011111);
 423               		.loc 1 80 0
 424 01b8 8FED      		ldi r24,lo8(-33)
 425 01ba 0E94 0000 		call lcd_write_data
  81:main.c        **** 		lcd_write_data('C');
 426               		.loc 1 81 0
 427 01be 83E4      		ldi r24,lo8(67)
 428 01c0 0E94 0000 		call lcd_write_data
  82:main.c        **** 
  83:main.c        **** 		fprintf(&lcd_stream, " %d.", y);
 429               		.loc 1 83 0
 430 01c4 8091 0000 		lds r24,y
 431 01c8 1F92      		push __zero_reg__
 432               	.LCFI30:
 433               		.cfi_def_cfa_offset 9
 434 01ca 8F93      		push r24
 435               	.LCFI31:
 436               		.cfi_def_cfa_offset 10
 437 01cc 80E0      		ldi r24,lo8(.LC2)
 438 01ce 90E0      		ldi r25,hi8(.LC2)
 439 01d0 9F93      		push r25
 440               	.LCFI32:
 441               		.cfi_def_cfa_offset 11
 442 01d2 8F93      		push r24
 443               	.LCFI33:
 444               		.cfi_def_cfa_offset 12
 445 01d4 DF93      		push r29
 446               	.LCFI34:
 447               		.cfi_def_cfa_offset 13
 448 01d6 CF93      		push r28
 449               	.LCFI35:
 450               		.cfi_def_cfa_offset 14
 451 01d8 0E94 0000 		call fprintf
  84:main.c        **** 		lcd_write_data(0b11011111);
 452               		.loc 1 84 0
 453 01dc 8FED      		ldi r24,lo8(-33)
 454 01de 0E94 0000 		call lcd_write_data
  85:main.c        **** 		lcd_write_data('C');
 455               		.loc 1 85 0
 456 01e2 83E4      		ldi r24,lo8(67)
 457 01e4 0E94 0000 		call lcd_write_data
  86:main.c        **** 		
  87:main.c        **** 	}
 458               		.loc 1 87 0
 459 01e8 8DB7      		in r24,__SP_L__
 460 01ea 9EB7      		in r25,__SP_H__
 461 01ec 0C96      		adiw r24,12
 462 01ee 0FB6      		in __tmp_reg__,__SREG__
 463 01f0 F894      		cli
 464 01f2 9EBF      		out __SP_H__,r25
 465 01f4 0FBE      		out __SREG__,__tmp_reg__
 466 01f6 8DBF      		out __SP_L__,r24
 467               	.LCFI36:
 468               		.cfi_def_cfa_offset 2
 469 01f8 00C0      		rjmp .L13
 470               		.cfi_endproc
 471               	.LFE12:
 473               		.comm	yy,4,1
 474               		.comm	xx,4,1
 475               		.comm	etap,1,1
 476               		.comm	i,1,1
 477               		.comm	tab,10,1
 478               		.comm	y,1,1
 479               		.comm	x,1,1
 480               		.comm	temp,2,1
 481               	.global	u_stream
 482               		.data
 485               	u_stream:
 486 0000 0000 00   		.zero	3
 487 0003 02        		.byte	2
 488 0004 0000 0000 		.zero	4
 489 0008 0000      		.word	gs(u_putc)
 490 000a 0000      		.word	0
 491 000c 0000      		.word	0
 492               	.global	lcd_stream
 495               	lcd_stream:
 496 000e 0000 00   		.zero	3
 497 0011 02        		.byte	2
 498 0012 0000 0000 		.zero	4
 499 0016 0000      		.word	gs(lcd_putc)
 500 0018 0000      		.word	0
 501 001a 0000      		.word	0
 502               		.text
 503               	.Letext0:
 504               		.file 3 "/usr/lib/avr/include/stdint.h"
 505               		.file 4 "/usr/lib/avr/include/stdio.h"
 506               		.file 5 "/usr/lib/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4T9lB4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc4T9lB4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc4T9lB4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc4T9lB4.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc4T9lB4.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc4T9lB4.s:12     .text:0000000000000000 __vector_13
                            *COM*:0000000000000001 i
                            *COM*:000000000000000a tab
                            *COM*:0000000000000001 etap
                            *COM*:0000000000000001 x
                            *COM*:0000000000000001 y
     /tmp/cc4T9lB4.s:174    .text.startup:0000000000000000 main
     /tmp/cc4T9lB4.s:495    .data:000000000000000e lcd_stream
                            *COM*:0000000000000002 temp
                            *COM*:0000000000000004 xx
                            *COM*:0000000000000004 yy
     /tmp/cc4T9lB4.s:485    .data:0000000000000000 u_stream

UNDEFINED SYMBOLS
atoi
__floatunsisf
__divsf3
__floatsisf
__addsf3
__gtsf2
USART_Init
lcdinit
on_off_cursor
DS18B20_start
DS18B20_read
lcd_set_xy
fprintf
lcd_write_data
u_putc
lcd_putc
__do_copy_data
__do_clear_bss
