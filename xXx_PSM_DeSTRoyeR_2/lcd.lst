   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	lcd_write_instr
  12               	lcd_write_instr:
  13               	.LFB7:
  14               		.file 1 "lcd.c"
   1:lcd.c         **** #include "lcd.h"
   2:lcd.c         **** 
   3:lcd.c         **** 
   4:lcd.c         **** 
   5:lcd.c         **** void lcd_write_instr(uint8_t data)
   6:lcd.c         **** {
  15               		.loc 1 6 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
   7:lcd.c         **** 	LCD_PORT&=~(1<<LCD_RS);
  22               		.loc 1 7 0
  23 0000 DA98      		cbi 0x1b,2
   8:lcd.c         **** 	LCD_PORT|=(1<<LCD_E);
  24               		.loc 1 8 0
  25 0002 DB9A      		sbi 0x1b,3
   9:lcd.c         **** 	
  10:lcd.c         **** 	LCD_PORT=(data&0xf0)|(LCD_PORT&0x0f);
  26               		.loc 1 10 0
  27 0004 9BB3      		in r25,0x1b
  28 0006 282F      		mov r18,r24
  29 0008 207F      		andi r18,lo8(-16)
  30 000a 9F70      		andi r25,lo8(15)
  31 000c 922B      		or r25,r18
  32 000e 9BBB      		out 0x1b,r25
  33               	.LVL1:
  34               	.LBB18:
  35               	.LBB19:
  36               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  37               		.loc 2 187 0
  38 0010 EFE1      		ldi r30,lo8(19999)
  39 0012 FEE4      		ldi r31,hi8(19999)
  40 0014 3197      	1:	sbiw r30,1
  41 0016 01F4      		brne 1b
  42 0018 00C0      		rjmp .
  43 001a 0000      		nop
  44               	.LVL2:
  45               	.LBE19:
  46               	.LBE18:
  11:lcd.c         **** 	
  12:lcd.c         **** 	_delay_ms(5);
  13:lcd.c         **** 	
  14:lcd.c         **** 	LCD_PORT&=~(1<<LCD_E);
  47               		.loc 1 14 0
  48 001c DB98      		cbi 0x1b,3
  49               	.LVL3:
  50               	.LBB20:
  51               	.LBB21:
  52               		.loc 2 187 0
  53 001e EFE1      		ldi r30,lo8(19999)
  54 0020 FEE4      		ldi r31,hi8(19999)
  55 0022 3197      	1:	sbiw r30,1
  56 0024 01F4      		brne 1b
  57 0026 00C0      		rjmp .
  58 0028 0000      		nop
  59               	.LVL4:
  60               	.LBE21:
  61               	.LBE20:
  15:lcd.c         **** 	
  16:lcd.c         **** 	_delay_ms(5);
  17:lcd.c         **** 	
  18:lcd.c         **** 	LCD_PORT|=(1<<LCD_E);
  62               		.loc 1 18 0
  63 002a DB9A      		sbi 0x1b,3
  19:lcd.c         **** 	
  20:lcd.c         **** 	LCD_PORT=(data<<4)|(LCD_PORT&0x0f);
  64               		.loc 1 20 0
  65 002c 2BB3      		in r18,0x1b
  66 002e F0E1      		ldi r31,lo8(16)
  67 0030 8F9F      		mul r24,r31
  68 0032 C001      		movw r24,r0
  69 0034 1124      		clr __zero_reg__
  70               	.LVL5:
  71 0036 922F      		mov r25,r18
  72 0038 9F70      		andi r25,lo8(15)
  73 003a 892B      		or r24,r25
  74 003c 8BBB      		out 0x1b,r24
  75               	.LVL6:
  76               	.LBB22:
  77               	.LBB23:
  78               		.loc 2 187 0
  79 003e 8FE1      		ldi r24,lo8(19999)
  80 0040 9EE4      		ldi r25,hi8(19999)
  81 0042 0197      	1:	sbiw r24,1
  82 0044 01F4      		brne 1b
  83 0046 00C0      		rjmp .
  84 0048 0000      		nop
  85               	.LVL7:
  86               	.LBE23:
  87               	.LBE22:
  21:lcd.c         **** 	
  22:lcd.c         **** 	_delay_ms(5);
  23:lcd.c         **** 	
  24:lcd.c         **** 	LCD_PORT&=~(1<<LCD_E);
  88               		.loc 1 24 0
  89 004a DB98      		cbi 0x1b,3
  90               	.LVL8:
  91               	.LBB24:
  92               	.LBB25:
  93               		.loc 2 187 0
  94 004c EFE1      		ldi r30,lo8(19999)
  95 004e FEE4      		ldi r31,hi8(19999)
  96 0050 3197      	1:	sbiw r30,1
  97 0052 01F4      		brne 1b
  98 0054 00C0      		rjmp .
  99 0056 0000      		nop
 100               	.LVL9:
 101 0058 0895      		ret
 102               	.LBE25:
 103               	.LBE24:
 104               		.cfi_endproc
 105               	.LFE7:
 107               	.global	lcd_write_data
 109               	lcd_write_data:
 110               	.LFB8:
  25:lcd.c         **** 	
  26:lcd.c         **** 	_delay_ms(5);
  27:lcd.c         **** }
  28:lcd.c         **** 
  29:lcd.c         **** void lcd_write_data(uint8_t data)
  30:lcd.c         **** {
 111               		.loc 1 30 0
 112               		.cfi_startproc
 113               	.LVL10:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
  31:lcd.c         **** 	LCD_PORT|=(1<<LCD_RS);
 118               		.loc 1 31 0
 119 005a DA9A      		sbi 0x1b,2
  32:lcd.c         **** 	LCD_PORT|=(1<<LCD_E);
 120               		.loc 1 32 0
 121 005c DB9A      		sbi 0x1b,3
  33:lcd.c         **** 	
  34:lcd.c         **** 	LCD_PORT=(data&0xf0)|(LCD_PORT&0x0f);
 122               		.loc 1 34 0
 123 005e 9BB3      		in r25,0x1b
 124 0060 282F      		mov r18,r24
 125 0062 207F      		andi r18,lo8(-16)
 126 0064 9F70      		andi r25,lo8(15)
 127 0066 922B      		or r25,r18
 128 0068 9BBB      		out 0x1b,r25
 129               	.LVL11:
 130               	.LBB26:
 131               	.LBB27:
 132               		.loc 2 187 0
 133 006a EFE9      		ldi r30,lo8(3999)
 134 006c FFE0      		ldi r31,hi8(3999)
 135 006e 3197      	1:	sbiw r30,1
 136 0070 01F4      		brne 1b
 137 0072 00C0      		rjmp .
 138 0074 0000      		nop
 139               	.LVL12:
 140               	.LBE27:
 141               	.LBE26:
  35:lcd.c         **** 	
  36:lcd.c         **** 	_delay_ms(1);
  37:lcd.c         **** 	
  38:lcd.c         **** 	LCD_PORT&=~(1<<LCD_E);
 142               		.loc 1 38 0
 143 0076 DB98      		cbi 0x1b,3
 144               	.LVL13:
 145               	.LBB28:
 146               	.LBB29:
 147               		.loc 2 187 0
 148 0078 EFE9      		ldi r30,lo8(3999)
 149 007a FFE0      		ldi r31,hi8(3999)
 150 007c 3197      	1:	sbiw r30,1
 151 007e 01F4      		brne 1b
 152 0080 00C0      		rjmp .
 153 0082 0000      		nop
 154               	.LVL14:
 155               	.LBE29:
 156               	.LBE28:
  39:lcd.c         **** 	
  40:lcd.c         **** 	_delay_ms(1);
  41:lcd.c         **** 	
  42:lcd.c         **** 	LCD_PORT|=(1<<LCD_E);
 157               		.loc 1 42 0
 158 0084 DB9A      		sbi 0x1b,3
  43:lcd.c         **** 	
  44:lcd.c         **** 	LCD_PORT=(data<<4)|(LCD_PORT&0x0f);
 159               		.loc 1 44 0
 160 0086 2BB3      		in r18,0x1b
 161 0088 F0E1      		ldi r31,lo8(16)
 162 008a 8F9F      		mul r24,r31
 163 008c C001      		movw r24,r0
 164 008e 1124      		clr __zero_reg__
 165               	.LVL15:
 166 0090 922F      		mov r25,r18
 167 0092 9F70      		andi r25,lo8(15)
 168 0094 892B      		or r24,r25
 169 0096 8BBB      		out 0x1b,r24
 170               	.LVL16:
 171               	.LBB30:
 172               	.LBB31:
 173               		.loc 2 187 0
 174 0098 8FE9      		ldi r24,lo8(3999)
 175 009a 9FE0      		ldi r25,hi8(3999)
 176 009c 0197      	1:	sbiw r24,1
 177 009e 01F4      		brne 1b
 178 00a0 00C0      		rjmp .
 179 00a2 0000      		nop
 180               	.LVL17:
 181               	.LBE31:
 182               	.LBE30:
  45:lcd.c         **** 	
  46:lcd.c         **** 	_delay_ms(1);
  47:lcd.c         **** 	
  48:lcd.c         **** 	LCD_PORT&=~(1<<LCD_E);
 183               		.loc 1 48 0
 184 00a4 DB98      		cbi 0x1b,3
 185 00a6 0895      		ret
 186               		.cfi_endproc
 187               	.LFE8:
 189               	.global	lcdinit
 191               	lcdinit:
 192               	.LFB9:
  49:lcd.c         **** 	
  50:lcd.c         **** }
  51:lcd.c         **** void lcdinit(void)
  52:lcd.c         **** {
 193               		.loc 1 52 0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
  53:lcd.c         **** 	LCD_DDR=0xff;
 199               		.loc 1 53 0
 200 00a8 8FEF      		ldi r24,lo8(-1)
 201 00aa 8ABB      		out 0x1a,r24
 202               	.LVL18:
 203               	.LBB32:
 204               	.LBB33:
 205               		.loc 2 187 0
 206 00ac 2FE7      		ldi r18,lo8(143999)
 207 00ae 82E3      		ldi r24,hi8(143999)
 208 00b0 92E0      		ldi r25,hlo8(143999)
 209 00b2 2150      	1:	subi r18,1
 210 00b4 8040      		sbci r24,0
 211 00b6 9040      		sbci r25,0
 212 00b8 01F4      		brne 1b
 213 00ba 00C0      		rjmp .
 214 00bc 0000      		nop
 215               	.LVL19:
 216               	.LBE33:
 217               	.LBE32:
  54:lcd.c         **** 	_delay_ms(45);
  55:lcd.c         **** 	
  56:lcd.c         **** 	lcd_write_instr(0x33);
 218               		.loc 1 56 0
 219 00be 83E3      		ldi r24,lo8(51)
 220 00c0 0E94 0000 		call lcd_write_instr
 221               	.LVL20:
  57:lcd.c         **** 	lcd_write_instr(0x32);
 222               		.loc 1 57 0
 223 00c4 82E3      		ldi r24,lo8(50)
 224 00c6 0E94 0000 		call lcd_write_instr
 225               	.LVL21:
  58:lcd.c         **** 	
  59:lcd.c         **** 	lcd_write_instr(0x28);
 226               		.loc 1 59 0
 227 00ca 88E2      		ldi r24,lo8(40)
 228 00cc 0E94 0000 		call lcd_write_instr
 229               	.LVL22:
  60:lcd.c         **** 	lcd_write_instr(0x08);
 230               		.loc 1 60 0
 231 00d0 88E0      		ldi r24,lo8(8)
 232 00d2 0E94 0000 		call lcd_write_instr
 233               	.LVL23:
  61:lcd.c         **** 	lcd_write_instr(0x01);
 234               		.loc 1 61 0
 235 00d6 81E0      		ldi r24,lo8(1)
 236 00d8 0E94 0000 		call lcd_write_instr
 237               	.LVL24:
  62:lcd.c         **** 	lcd_write_instr(0x06);
 238               		.loc 1 62 0
 239 00dc 86E0      		ldi r24,lo8(6)
 240 00de 0E94 0000 		call lcd_write_instr
 241               	.LVL25:
  63:lcd.c         **** 	lcd_write_instr(0x0f);
 242               		.loc 1 63 0
 243 00e2 8FE0      		ldi r24,lo8(15)
 244 00e4 0C94 0000 		jmp lcd_write_instr
 245               	.LVL26:
 246               		.cfi_endproc
 247               	.LFE9:
 249               	.global	lcd_clear
 251               	lcd_clear:
 252               	.LFB10:
  64:lcd.c         **** }
  65:lcd.c         **** 
  66:lcd.c         **** void lcd_clear(void)
  67:lcd.c         **** {
 253               		.loc 1 67 0
 254               		.cfi_startproc
 255               	/* prologue: function */
 256               	/* frame size = 0 */
 257               	/* stack size = 0 */
 258               	.L__stack_usage = 0
  68:lcd.c         **** 	lcd_write_instr(1);
 259               		.loc 1 68 0
 260 00e8 81E0      		ldi r24,lo8(1)
 261 00ea 0C94 0000 		jmp lcd_write_instr
 262               	.LVL27:
 263               		.cfi_endproc
 264               	.LFE10:
 266               	.global	lcd_set_xy
 268               	lcd_set_xy:
 269               	.LFB11:
  69:lcd.c         **** }
  70:lcd.c         **** 
  71:lcd.c         **** void lcd_set_xy(uint8_t x, uint8_t y)
  72:lcd.c         **** {
 270               		.loc 1 72 0
 271               		.cfi_startproc
 272               	.LVL28:
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* stack size = 0 */
 276               	.L__stack_usage = 0
  73:lcd.c         **** 	lcd_write_instr(0x80+x+y*0x40);
 277               		.loc 1 73 0
 278 00ee 8058      		subi r24,lo8(-(-128))
 279               	.LVL29:
 280 00f0 90E4      		ldi r25,lo8(64)
 281 00f2 699F      		mul r22,r25
 282 00f4 800D      		add r24,r0
 283 00f6 1124      		clr __zero_reg__
 284               	.LVL30:
 285 00f8 0C94 0000 		jmp lcd_write_instr
 286               	.LVL31:
 287               		.cfi_endproc
 288               	.LFE11:
 290               	.global	lcd_write_text_xy
 292               	lcd_write_text_xy:
 293               	.LFB12:
  74:lcd.c         **** }
  75:lcd.c         **** 
  76:lcd.c         **** void lcd_write_text_xy(uint8_t x, uint8_t y, char *text)
  77:lcd.c         **** {
 294               		.loc 1 77 0
 295               		.cfi_startproc
 296               	.LVL32:
 297 00fc 0F93      		push r16
 298               	.LCFI0:
 299               		.cfi_def_cfa_offset 3
 300               		.cfi_offset 16, -2
 301 00fe 1F93      		push r17
 302               	.LCFI1:
 303               		.cfi_def_cfa_offset 4
 304               		.cfi_offset 17, -3
 305 0100 CF93      		push r28
 306               	.LCFI2:
 307               		.cfi_def_cfa_offset 5
 308               		.cfi_offset 28, -4
 309 0102 DF93      		push r29
 310               	.LCFI3:
 311               		.cfi_def_cfa_offset 6
 312               		.cfi_offset 29, -5
 313               	/* prologue: function */
 314               	/* frame size = 0 */
 315               	/* stack size = 4 */
 316               	.L__stack_usage = 4
 317 0104 8A01      		movw r16,r20
  78:lcd.c         **** 	lcd_set_xy(x, y);
 318               		.loc 1 78 0
 319 0106 0E94 0000 		call lcd_set_xy
 320               	.LVL33:
 321 010a E801      		movw r28,r16
 322               	.LVL34:
 323               	.L7:
  79:lcd.c         **** 	while(*text)
 324               		.loc 1 79 0
 325 010c 8991      		ld r24,Y+
 326               	.LVL35:
 327 010e 8823      		tst r24
 328 0110 01F0      		breq .L10
  80:lcd.c         **** 	{
  81:lcd.c         **** 		lcd_write_data(*text);
 329               		.loc 1 81 0
 330 0112 0E94 0000 		call lcd_write_data
 331               	.LVL36:
 332 0116 00C0      		rjmp .L7
 333               	.LVL37:
 334               	.L10:
 335               	/* epilogue start */
  82:lcd.c         **** 		text++;
  83:lcd.c         **** 	}
  84:lcd.c         **** }
 336               		.loc 1 84 0
 337 0118 DF91      		pop r29
 338 011a CF91      		pop r28
 339               	.LVL38:
 340 011c 1F91      		pop r17
 341 011e 0F91      		pop r16
 342 0120 0895      		ret
 343               		.cfi_endproc
 344               	.LFE12:
 346               	.global	lcd_putc
 348               	lcd_putc:
 349               	.LFB13:
  85:lcd.c         **** 
  86:lcd.c         **** int lcd_putc(char c, FILE* unused)
  87:lcd.c         **** {
 350               		.loc 1 87 0
 351               		.cfi_startproc
 352               	.LVL39:
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 0 */
 356               	.L__stack_usage = 0
  88:lcd.c         **** 	lcd_write_data(c);
 357               		.loc 1 88 0
 358 0122 0E94 0000 		call lcd_write_data
 359               	.LVL40:
  89:lcd.c         **** 	return 0;
  90:lcd.c         **** }
 360               		.loc 1 90 0
 361 0126 80E0      		ldi r24,0
 362 0128 90E0      		ldi r25,0
 363 012a 0895      		ret
 364               		.cfi_endproc
 365               	.LFE13:
 367               	.global	on_off_cursor
 369               	on_off_cursor:
 370               	.LFB14:
  91:lcd.c         **** 
  92:lcd.c         **** void on_off_cursor(uint8_t o)
  93:lcd.c         **** {
 371               		.loc 1 93 0
 372               		.cfi_startproc
 373               	.LVL41:
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
  94:lcd.c         **** 	if(o==0)
 378               		.loc 1 94 0
 379 012c 8111      		cpse r24,__zero_reg__
 380 012e 00C0      		rjmp .L13
  95:lcd.c         **** 	{	
  96:lcd.c         **** 		lcd_write_instr(0b00001100);
 381               		.loc 1 96 0
 382 0130 8CE0      		ldi r24,lo8(12)
 383               	.LVL42:
 384 0132 00C0      		rjmp .L15
 385               	.LVL43:
 386               	.L13:
  97:lcd.c         **** 	}
  98:lcd.c         **** 	if(o==1)
 387               		.loc 1 98 0
 388 0134 8130      		cpi r24,lo8(1)
 389 0136 01F4      		brne .L12
  99:lcd.c         **** 	{	
 100:lcd.c         **** 		lcd_write_instr(0b00001111);
 390               		.loc 1 100 0
 391 0138 8FE0      		ldi r24,lo8(15)
 392               	.LVL44:
 393               	.L15:
 394 013a 0C94 0000 		jmp lcd_write_instr
 395               	.LVL45:
 396               	.L12:
 397 013e 0895      		ret
 398               		.cfi_endproc
 399               	.LFE14:
 401               	.Letext0:
 402               		.file 3 "/usr/lib/avr/include/stdint.h"
 403               		.file 4 "/usr/lib/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/cceA5mPf.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cceA5mPf.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cceA5mPf.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cceA5mPf.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cceA5mPf.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cceA5mPf.s:12     .text:0000000000000000 lcd_write_instr
     /tmp/cceA5mPf.s:109    .text:000000000000005a lcd_write_data
     /tmp/cceA5mPf.s:191    .text:00000000000000a8 lcdinit
     /tmp/cceA5mPf.s:251    .text:00000000000000e8 lcd_clear
     /tmp/cceA5mPf.s:268    .text:00000000000000ee lcd_set_xy
     /tmp/cceA5mPf.s:292    .text:00000000000000fc lcd_write_text_xy
     /tmp/cceA5mPf.s:348    .text:0000000000000122 lcd_putc
     /tmp/cceA5mPf.s:369    .text:000000000000012c on_off_cursor

NO UNDEFINED SYMBOLS
