   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__floatunsisf
  11               	.global	__mulsf3
  12               		.section	.rodata.str1.1,"aMS",@progbits,1
  13               	.LC0:
  14 0000 5520 3D20 		.string	"U = %.2f V"
  14      252E 3266 
  14      2056 00
  15               	.global	__addsf3
  16               	.global	__divsf3
  17               	.LC1:
  18 000b 5573 7220 		.string	"Usr = %.2f V"
  18      3D20 252E 
  18      3266 2056 
  18      00
  19               		.section	.text.startup,"ax",@progbits
  20               	.global	main
  22               	main:
  23               	.LFB7:
  24               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h> 
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include "lcd.h"
   4:main.c        **** #include "spi.h"
   5:main.c        **** 
   6:main.c        **** FILE lcd_stream = FDEV_SETUP_STREAM(lcd_puts, NULL, _FDEV_SETUP_WRITE);
   7:main.c        **** uint8_t bajt1, bajt2;
   8:main.c        **** uint16_t bajcisko;
   9:main.c        **** double wynikos;
  10:main.c        **** double srednia_tablica[20];
  11:main.c        **** uint8_t ilosc_srednich=0;
  12:main.c        **** double srednia=0;
  13:main.c        **** int main(void){
  25               		.loc 1 13 0
  26               		.cfi_startproc
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 0 */
  30               	.L__stack_usage = 0
  14:main.c        **** 	lcdinit();
  31               		.loc 1 14 0
  32 0000 0E94 0000 		call lcdinit
  15:main.c        **** 	blinking(0);
  33               		.loc 1 15 0
  34 0004 80E0      		ldi r24,0
  35 0006 0E94 0000 		call blinking
  16:main.c        **** 	SPI_MasterInit(); //SPI init
  36               		.loc 1 16 0
  37 000a 0E94 0000 		call SPI_MasterInit
  17:main.c        **** 	SS_DISABLE(); //slave select to 1
  38               		.loc 1 17 0
  39 000e C49A      		sbi 0x18,4
  18:main.c        **** 
  19:main.c        **** 	while(1)
  20:main.c        **** 	{
  21:main.c        **** 		SS_ENABLE() //slave select to 0 to start communication
  22:main.c        **** 		SPI_MasterTransmit(1); //start bit
  23:main.c        **** 		bajt1 = SPI_MasterTransmit(0b10100000);
  24:main.c        **** 		bajt2 = SPI_MasterTransmit(0);
  25:main.c        **** 		SS_DISABLE(); //slave select to 1
  26:main.c        **** 		bajcisko = ((bajt1 & 0x0F) << 8)|bajt2;
  27:main.c        **** 		wynikos = 5. * bajcisko / 4096;
  28:main.c        **** 		lcd_set_xy(0,0);
  29:main.c        **** 		fprintf(&lcd_stream,"U = %.2f V", wynikos);
  40               		.loc 1 29 0
  41 0010 00E0      		ldi r16,lo8(.LC0)
  42 0012 10E0      		ldi r17,hi8(.LC0)
  43 0014 C0E0      		ldi r28,lo8(lcd_stream)
  44 0016 D0E0      		ldi r29,hi8(lcd_stream)
  30:main.c        **** 		lcd_set_xy(0,1);
  31:main.c        **** 		
  32:main.c        **** 		srednia_tablica[ilosc_srednich] = wynikos;
  33:main.c        **** 		ilosc_srednich++;
  34:main.c        **** 		
  35:main.c        **** 		for (int i=0; i<20; i++){
  36:main.c        **** 			srednia += srednia_tablica[i];
  37:main.c        **** 		}
  38:main.c        **** 		srednia = srednia/20;
  39:main.c        **** 		_delay_ms(100);
  40:main.c        **** 		fprintf(&lcd_stream,"Usr = %.2f V", srednia);
  45               		.loc 1 40 0
  46 0018 30E0      		ldi r19,lo8(.LC1)
  47 001a E32E      		mov r14,r19
  48 001c 30E0      		ldi r19,hi8(.LC1)
  49 001e F32E      		mov r15,r19
  50               	.L3:
  21:main.c        **** 		SPI_MasterTransmit(1); //start bit
  51               		.loc 1 21 0
  52 0020 C498      		cbi 0x18,4
  22:main.c        **** 		bajt1 = SPI_MasterTransmit(0b10100000);
  53               		.loc 1 22 0
  54 0022 81E0      		ldi r24,lo8(1)
  55 0024 0E94 0000 		call SPI_MasterTransmit
  23:main.c        **** 		bajt2 = SPI_MasterTransmit(0);
  56               		.loc 1 23 0
  57 0028 80EA      		ldi r24,lo8(-96)
  58 002a 0E94 0000 		call SPI_MasterTransmit
  59 002e 8093 0000 		sts bajt1,r24
  24:main.c        **** 		SS_DISABLE(); //slave select to 1
  60               		.loc 1 24 0
  61 0032 80E0      		ldi r24,0
  62 0034 0E94 0000 		call SPI_MasterTransmit
  63 0038 8093 0000 		sts bajt2,r24
  25:main.c        **** 		bajcisko = ((bajt1 & 0x0F) << 8)|bajt2;
  64               		.loc 1 25 0
  65 003c C49A      		sbi 0x18,4
  26:main.c        **** 		wynikos = 5. * bajcisko / 4096;
  66               		.loc 1 26 0
  67 003e 6091 0000 		lds r22,bajt1
  68 0042 6F70      		andi r22,lo8(15)
  69 0044 70E0      		ldi r23,0
  70 0046 762F      		mov r23,r22
  71 0048 6627      		clr r22
  72 004a 8091 0000 		lds r24,bajt2
  73 004e 682B      		or r22,r24
  74 0050 7093 0000 		sts bajcisko+1,r23
  75 0054 6093 0000 		sts bajcisko,r22
  27:main.c        **** 		lcd_set_xy(0,0);
  76               		.loc 1 27 0
  77 0058 80E0      		ldi r24,0
  78 005a 90E0      		ldi r25,0
  79 005c 0E94 0000 		call __floatunsisf
  80 0060 20E0      		ldi r18,0
  81 0062 30E0      		ldi r19,0
  82 0064 40EA      		ldi r20,lo8(-96)
  83 0066 50E4      		ldi r21,lo8(64)
  84 0068 0E94 0000 		call __mulsf3
  85 006c 20E0      		ldi r18,0
  86 006e 30E0      		ldi r19,0
  87 0070 40E8      		ldi r20,lo8(-128)
  88 0072 59E3      		ldi r21,lo8(57)
  89 0074 0E94 0000 		call __mulsf3
  90 0078 6093 0000 		sts wynikos,r22
  91 007c 7093 0000 		sts wynikos+1,r23
  92 0080 8093 0000 		sts wynikos+2,r24
  93 0084 9093 0000 		sts wynikos+3,r25
  28:main.c        **** 		fprintf(&lcd_stream,"U = %.2f V", wynikos);
  94               		.loc 1 28 0
  95 0088 60E0      		ldi r22,0
  96 008a 80E0      		ldi r24,0
  97 008c 0E94 0000 		call lcd_set_xy
  29:main.c        **** 		lcd_set_xy(0,1);
  98               		.loc 1 29 0
  99 0090 8091 0000 		lds r24,wynikos+3
 100 0094 8F93      		push r24
 101               	.LCFI0:
 102               		.cfi_def_cfa_offset 3
 103 0096 8091 0000 		lds r24,wynikos+2
 104 009a 8F93      		push r24
 105               	.LCFI1:
 106               		.cfi_def_cfa_offset 4
 107 009c 8091 0000 		lds r24,wynikos+1
 108 00a0 8F93      		push r24
 109               	.LCFI2:
 110               		.cfi_def_cfa_offset 5
 111 00a2 8091 0000 		lds r24,wynikos
 112 00a6 8F93      		push r24
 113               	.LCFI3:
 114               		.cfi_def_cfa_offset 6
 115 00a8 1F93      		push r17
 116               	.LCFI4:
 117               		.cfi_def_cfa_offset 7
 118 00aa 0F93      		push r16
 119               	.LCFI5:
 120               		.cfi_def_cfa_offset 8
 121 00ac DF93      		push r29
 122               	.LCFI6:
 123               		.cfi_def_cfa_offset 9
 124 00ae CF93      		push r28
 125               	.LCFI7:
 126               		.cfi_def_cfa_offset 10
 127 00b0 0E94 0000 		call fprintf
  30:main.c        **** 		
 128               		.loc 1 30 0
 129 00b4 61E0      		ldi r22,lo8(1)
 130 00b6 80E0      		ldi r24,0
 131 00b8 0E94 0000 		call lcd_set_xy
  32:main.c        **** 		ilosc_srednich++;
 132               		.loc 1 32 0
 133 00bc 8091 0000 		lds r24,ilosc_srednich
 134 00c0 94E0      		ldi r25,lo8(4)
 135 00c2 899F      		mul r24,r25
 136 00c4 F001      		movw r30,r0
 137 00c6 1124      		clr __zero_reg__
 138 00c8 E050      		subi r30,lo8(-(srednia_tablica))
 139 00ca F040      		sbci r31,hi8(-(srednia_tablica))
 140 00cc 4091 0000 		lds r20,wynikos
 141 00d0 5091 0000 		lds r21,wynikos+1
 142 00d4 6091 0000 		lds r22,wynikos+2
 143 00d8 7091 0000 		lds r23,wynikos+3
 144 00dc 4083      		st Z,r20
 145 00de 5183      		std Z+1,r21
 146 00e0 6283      		std Z+2,r22
 147 00e2 7383      		std Z+3,r23
  33:main.c        **** 		
 148               		.loc 1 33 0
 149 00e4 8F5F      		subi r24,lo8(-(1))
 150 00e6 8093 0000 		sts ilosc_srednich,r24
 151 00ea 6091 0000 		lds r22,srednia
 152 00ee 7091 0000 		lds r23,srednia+1
 153 00f2 8091 0000 		lds r24,srednia+2
 154 00f6 9091 0000 		lds r25,srednia+3
 155 00fa 20E0      		ldi r18,lo8(srednia_tablica)
 156 00fc C22E      		mov r12,r18
 157 00fe 20E0      		ldi r18,hi8(srednia_tablica)
 158 0100 D22E      		mov r13,r18
 159 0102 EDB7      		in r30,__SP_L__
 160 0104 FEB7      		in r31,__SP_H__
 161 0106 3896      		adiw r30,8
 162 0108 0FB6      		in __tmp_reg__,__SREG__
 163 010a F894      		cli
 164 010c FEBF      		out __SP_H__,r31
 165 010e 0FBE      		out __SREG__,__tmp_reg__
 166 0110 EDBF      		out __SP_L__,r30
 167               	.LCFI8:
 168               		.cfi_def_cfa_offset 2
 169               	.L2:
 170               	.LBB5:
  36:main.c        **** 		}
 171               		.loc 1 36 0 discriminator 3
 172 0112 F601      		movw r30,r12
 173 0114 2191      		ld r18,Z+
 174 0116 3191      		ld r19,Z+
 175 0118 4191      		ld r20,Z+
 176 011a 5191      		ld r21,Z+
 177 011c 6F01      		movw r12,r30
 178 011e 0E94 0000 		call __addsf3
  35:main.c        **** 			srednia += srednia_tablica[i];
 179               		.loc 1 35 0 discriminator 3
 180 0122 F0E0      		ldi r31,lo8(srednia_tablica+80)
 181 0124 CF16      		cp r12,r31
 182 0126 F0E0      		ldi r31,hi8(srednia_tablica+80)
 183 0128 DF06      		cpc r13,r31
 184 012a 01F4      		brne .L2
 185               	.LBE5:
  38:main.c        **** 		_delay_ms(100);
 186               		.loc 1 38 0
 187 012c 20E0      		ldi r18,0
 188 012e 30E0      		ldi r19,0
 189 0130 40EA      		ldi r20,lo8(-96)
 190 0132 51E4      		ldi r21,lo8(65)
 191 0134 0E94 0000 		call __divsf3
 192 0138 6093 0000 		sts srednia,r22
 193 013c 7093 0000 		sts srednia+1,r23
 194 0140 8093 0000 		sts srednia+2,r24
 195 0144 9093 0000 		sts srednia+3,r25
 196               	.LBB6:
 197               	.LBB7:
 198               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 199               		.loc 2 187 0
 200 0148 2FEF      		ldi r18,lo8(319999)
 201 014a 31EE      		ldi r19,hi8(319999)
 202 014c 84E0      		ldi r24,hlo8(319999)
 203 014e 2150      	1:	subi r18,1
 204 0150 3040      		sbci r19,0
 205 0152 8040      		sbci r24,0
 206 0154 01F4      		brne 1b
 207 0156 00C0      		rjmp .
 208 0158 0000      		nop
 209               	.LBE7:
 210               	.LBE6:
 211               		.loc 1 40 0
 212 015a 8091 0000 		lds r24,srednia+3
 213 015e 8F93      		push r24
 214               	.LCFI9:
 215               		.cfi_def_cfa_offset 3
 216 0160 8091 0000 		lds r24,srednia+2
 217 0164 8F93      		push r24
 218               	.LCFI10:
 219               		.cfi_def_cfa_offset 4
 220 0166 8091 0000 		lds r24,srednia+1
 221 016a 8F93      		push r24
 222               	.LCFI11:
 223               		.cfi_def_cfa_offset 5
 224 016c 8091 0000 		lds r24,srednia
 225 0170 8F93      		push r24
 226               	.LCFI12:
 227               		.cfi_def_cfa_offset 6
 228 0172 FF92      		push r15
 229               	.LCFI13:
 230               		.cfi_def_cfa_offset 7
 231 0174 EF92      		push r14
 232               	.LCFI14:
 233               		.cfi_def_cfa_offset 8
 234 0176 DF93      		push r29
 235               	.LCFI15:
 236               		.cfi_def_cfa_offset 9
 237 0178 CF93      		push r28
 238               	.LCFI16:
 239               		.cfi_def_cfa_offset 10
 240 017a 0E94 0000 		call fprintf
  41:main.c        **** 		srednia = 0;
 241               		.loc 1 41 0
 242 017e 1092 0000 		sts srednia,__zero_reg__
 243 0182 1092 0000 		sts srednia+1,__zero_reg__
 244 0186 1092 0000 		sts srednia+2,__zero_reg__
 245 018a 1092 0000 		sts srednia+3,__zero_reg__
  42:main.c        **** 		if (ilosc_srednich == 20)
 246               		.loc 1 42 0
 247 018e 2DB7      		in r18,__SP_L__
 248 0190 3EB7      		in r19,__SP_H__
 249 0192 285F      		subi r18,-8
 250 0194 3F4F      		sbci r19,-1
 251 0196 0FB6      		in __tmp_reg__,__SREG__
 252 0198 F894      		cli
 253 019a 3EBF      		out __SP_H__,r19
 254 019c 0FBE      		out __SREG__,__tmp_reg__
 255 019e 2DBF      		out __SP_L__,r18
 256               	.LCFI17:
 257               		.cfi_def_cfa_offset 2
 258 01a0 8091 0000 		lds r24,ilosc_srednich
 259 01a4 8431      		cpi r24,lo8(20)
 260 01a6 01F0      		breq .+2
 261 01a8 00C0      		rjmp .L3
  43:main.c        **** 			ilosc_srednich = 0;
 262               		.loc 1 43 0
 263 01aa 1092 0000 		sts ilosc_srednich,__zero_reg__
 264 01ae 00C0      		rjmp .L3
 265               		.cfi_endproc
 266               	.LFE7:
 268               	.global	srednia
 269               		.section .bss
 272               	srednia:
 273 0000 0000 0000 		.zero	4
 274               	.global	ilosc_srednich
 277               	ilosc_srednich:
 278 0004 00        		.zero	1
 279               		.comm	srednia_tablica,80,1
 280               		.comm	wynikos,4,1
 281               		.comm	bajcisko,2,1
 282               		.comm	bajt2,1,1
 283               		.comm	bajt1,1,1
 284               	.global	lcd_stream
 285               		.data
 288               	lcd_stream:
 289 0000 0000 00   		.zero	3
 290 0003 02        		.byte	2
 291 0004 0000 0000 		.zero	4
 292 0008 0000      		.word	gs(lcd_puts)
 293 000a 0000      		.word	0
 294 000c 0000      		.word	0
 295               		.text
 296               	.Letext0:
 297               		.file 3 "/usr/lib/avr/include/stdint.h"
 298               		.file 4 "/usr/lib/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccnWqU8L.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccnWqU8L.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccnWqU8L.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccnWqU8L.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccnWqU8L.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccnWqU8L.s:22     .text.startup:0000000000000000 main
     /tmp/ccnWqU8L.s:288    .data:0000000000000000 lcd_stream
                            *COM*:0000000000000001 bajt1
                            *COM*:0000000000000001 bajt2
                            *COM*:0000000000000002 bajcisko
                            *COM*:0000000000000004 wynikos
     /tmp/ccnWqU8L.s:277    .bss:0000000000000004 ilosc_srednich
                            *COM*:0000000000000050 srednia_tablica
     /tmp/ccnWqU8L.s:272    .bss:0000000000000000 srednia

UNDEFINED SYMBOLS
__floatunsisf
__mulsf3
__addsf3
__divsf3
lcdinit
blinking
SPI_MasterInit
SPI_MasterTransmit
lcd_set_xy
fprintf
lcd_puts
__do_copy_data
__do_clear_bss
